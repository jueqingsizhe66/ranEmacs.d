** 16:16 yes it works

** 16:22 dynamic characterization of multi-axis 


** 12:24 FYI :For your information
FYI用 户 信 息,供参考For your Information的 缩 写, 是 一 种 寻 求 用 普 通 英 语 说 明Internet标 准 和 技 术 的 电 子 出 版 系 列, 与RFC(请 求 注 释)一 样 的 方 式 分 发, 但FYI的 意 图 与RFC不 同, 并 不 是 为 了 建 立 新 的 标 准. 在Usenet和 电 子 邮 件 中,FYI通 常 作 为 在 讨 论 中 供 你 使 用 的 信 息 的 缩 写.
PLS:please
Pls noted as mail subject 请注意邮件主题

** 23:25 I found out about this diatribe as I sat down to spend the day (my weekend) continuing to work for the Clojure ecosystem. Time spent in lieu of spending time with my wife, having already spent the work week on spec, my Conj talk, and the Clojure 1.9 release.

I don't believe diatribes such as these deserve attention, but, to the extent they foster misconceptions, they do harm that must be addressed.

Cognitect does not make money from Clojure. Period. We want the same things from/for Clojure as other businesses using it - stability and quality. Absolutely no decisions are made regarding Clojure that impact our revenues because we have no revenue from Clojure itself whatsoever. We spend money on Clojure (i.e. paying a non-billable salary so Alex Miller can support the community and the language) because we rely upon it and want it to thrive. We don't make money from Clojure conferences. I personally am over $200k in the negative overall due to my initial work on Clojure. Money I have no prospects of getting back. Not that that is anyone else's business, but anyone sitting around thinking Cognitect or I am making money on Clojure is mistaken.

Lots of great people work for Cognitect, it's true. And what makes them great is primarily the fact that they are really good people. People too nice to respond to such diatribes in kind. Makers. And givers - there's not a person at Cognitect who wouldn't freely give you their time and best advice if you sought their help, who haven't given their time speaking at user groups, and building open-source tools and libraries, writing books, sharing their knowledge and investing their spare time acquiring it. They don't make money off Clojure, they make money through their ongoing effort writing new software to solve customer problems, or by making Datomic for companies that still value software enough to pay for it. Cognitect is not 'the establishment', it's a small company that provides a livelihood and healthy nurturing culture for those that work here. No one is getting rich.

This consistent sense of entitlement to the efforts of makers, amongst a community of supposed makers, is baffling and counterproductive. It is a cancer of the software development community at large and will inevitably lead to the devaluation of software and those who make it, and has already.

I've done months of design work on the next phase of spec, and we have an agenda to take on implementing that after the 1.9 release and Conj. It is astounding to see something like spec characterized as an attack on another library or abnegation of the community. I've invested about 9 months of my life on spec, for which I and Cognitect will never see a dime, and am open-sourcing my effort. And this is the response? With spec, I was just pursuing what I thought was a good idea (as was Luke with Arachne). That can't become wrong due to some supposed community obligation or we'll never have novelty.

The posts asks "On Whose Authority?" but doesn't use the word again.

Here's what 'authority' means (from dictionary.com):

"from Latin auctoritatem (nominative auctoritas) "invention, advice, opinion, influence, command," from auctor "master, leader, author" (see author (n.))"

and 'author':

"literally "one who causes to grow," agent noun from auctus, past participle of augere "to increase" (see augment)"

Thus authority comes along with authorship, and is accorded first to the makers, people who've added to the world. I don't know why that is no longer obvious. Thinking otherwise yields a broken economic model, where people are not entitled to control over the products of their own labor, and thus are without control over their livelihood.

Clojure was not originally primarily a community effort, and it isn't primarily one now. That has to be ok. The presumption that everything is or ought to be a community endeavor is severely broken. A true community respects the autonomy of its participants, else it degenerates into a cult of need/want.

Cognitect is a terrific supporter of Clojure, and happens to be where I work, but the ultimate authority and stewardship of Clojure remains with me and I am responsible for the decisions governing it, good or bad.

To those who think that Datomic ought to be open source: We don't see a viable economic model there. If you think otherwise, come up with the money to buy the IP and make a go of it. If you can't, then recognize your arguments for the hot air of entitlement they are.

We can argue about the software economy and open source models all day. In the end it's about people. You can't say f**k XYZ and deny that it is an attack on the people who work on XYZ. Cognitect is not some evil corporate entity, it's a bunch of people with families trying to make a living, pay their mortgages and send their kids to college. And, if you are talking about Clojure, you are talking to me. The indirection doesn't mask the attack on people, their work and their choices.

I have to say now to those for whom such expressions are cathartic - they hurt people, a lot. I don't believe the sentiments in the post are widely held - most people who are happily using Clojure aren't as vocal. But it doesn't take many arrows to bring someone down.

Every time I have to process such a diatribe and its aftermath, and its effects on myself, my family, and my co-workers, I have to struggle back from "Why should I bother?", and every time it gets harder to justify to myself and my family that it's worth the time, energy and emotional burden. Every time a community engages with such a diatribe without calling it out, and decrying its tone, the civility of our discourse and treatment of others heads further down the drain. It's time for people who value other people to speak out, in this domain and elsewhere:

Chris Zheng, your diatribe is despicable. Your post demonstrates a lack of respect for people, their hard work, their contributions, their independence, and their economic, social and familial responsibilities. Grow up.

    永久連結embed檢舉

[–]Borkdude 44 指標 3 天前* 

Well said Rich. I'm very grateful for all the hard work you and Cognitect put into Clojure. I and other people should probably say this out loud more often.

    永久連結embed上層留言檢舉

[–]zcaudate[S] -1 指標 2 天前* 

@Borkdude. I will have to leech off of your good sentiments to Rich because my reply dropped off the thread due to negative votes.

I personally don't mind negativity. I do think that populist sentiment does little to address the problem that I want this thread to self-reference: When Rich and other members of the Cognitect community poopoos something, the community is also given the 'authoritative reference' to poopoo.

This was reflected in how the Reddit thread changed before and after Rich replied. He is a rockstar, there's no doubt about that.

Midje was a great project but it has pretty much died and one of the reasons was that there was a reluctance from the core to say anything positive about it. https://groups.google.com/forum/#!topic/clojure/T8fIW27kDYE

In the end, it's about intent. My intent stands on solid foundation and I'm happy to be mocked/blasted/challenged. They say that the ultimate fear of ambition is to be held in obscurity. I welcome all.

    永久連結embed上層留言檢舉

[–]alexelcu 5 指標 2 天前 

    I personally don't mind negativity. I do think that populist sentiment does little to address the problem that I want this thread to self-reference

It's probably because you haven't received much negativity, plus your personal opinion on this is irrelevant when other people are clearly getting hurt. I'm also an open source software author, interacting with other software makers and I can relate to Rich's pain here.

Programming in general isn't a science. Much like math, a big part of programming is communication and collaboration. You might classify this response as a "populist sentiment", however by phrasing your opinions in the disrespectful way that you did, it's pretty obvious that you're not looking for a dialog, so you shouldn't be surprised if you're not getting one.

    This was reflected in how the Reddit thread changed before and after Rich replied.

That's because people on the Internet tend to be really mean under the cover of anonymity. Just like when you are in traffic and feel the need to honk loudly or swear at other people for not moving at the green light in a split second, things you would never do when face to face out of fear of being punched.

That Rich Hickey tempered the thread, that's not because he's a "rockstar", but because he reminded people of the personal sacrifices he and others are making.

    Midje was a great project but it has pretty much died.

I've never seen Midje, but reading that thread I do see many counter points I agree with. For example I also think that "mocking" is a serious code smell and should never happen, unless the code is too tightly coupled with side effects. The solution IMO shouldn't be to provide better tools for mocking, but to encourage architectures that don't need mocking at all.

But anyway, there are many reasons for why open source projects live or die and I'm pretty sure that you're oversimplifying the issue. I've been working on Monix since 2014, a project whose popularity rose only in the last year and a half. And for that to happen, I had to go at conferences to teach people about it, I had to be super responsive on its Gitter channel, literally helping all new users with their problems, I had to keep developing it, adding new features in response to competition, I had to make it play nice with other libraries in the ecosystem, etc.

Projects don't win just on technical merits, but also on finding a product-market fit, on marketing and on collaboration, a painful truth that many of us ignore because this requires soft skills many of us don't possess.

    In the end, it's about intent. My intent stands on solid foundation and I'm happy to be mocked/blasted/challenged. They say that the ultimate fear of ambition is to be held in obscurity. I welcome all.

No, in the end it's about being able to work with others in order to deliver products and being an ambitious dick is nothing to be proud of.

    永久連結embed上層留言檢舉

[–]zcaudate[S] 2 指標 2 天前 

    being an ambitious dick is nothing to be proud of.

pride is never a good thing.

    永久連結embed上層留言檢舉

[–]ReflectiveTeaTowel 1 指標 5小時前 

Patently bollocks. Having pride in your work means you give a shit if it's good or not

    永久連結embed上層留言檢舉

[–]grammati 58 指標 3 天前 

Rich, I am in my office giving this reply a standing ovation. I firmly believe that 99.9% of the Clojure community is doing the same.

Remember that for every whining malcontent that posts nonsense like this, there are 1000 happy, productive Clojure programmers. I am one of them. I have worked with many others. We are out here, quietly writing software, creating things, and enjoying every minute of it. You may not hear much from us; most of us don't blog, or comment on Reddit. But please know that we, the silent majority, are deeply grateful for the years of hard work that you and others have put into Clojure. Thank you.

    永久連結embed上層留言檢舉

[–]zcaudate[S] -3 指標 2 天前* 

It's not about 'content' vs 'malcontent'. Please don't have 'us' vs 'them' blinders on the topic. I'm one person sharing my own experience - both the good and the bad. When posts such as these gets labelled as 'diatribe' and put into the 'reject' basket, it does not bring anything new to the table.

    永久連結embed上層留言檢舉

[–]umpc 3 指標 2 天前 

I only had to read a single line.

    ...Fuck Clojure.

Yup. It's a diatribe.

Not only that, it is a definitive example of one. There is no ambiguity as to whether or not it even is one. Who cares what the rest of it even says?

You purposely disrespected the people who gave up and give up their limited time to develop Clojure, so fuck your opinion. :)

    永久連結embed上層留言檢舉

[–]zcaudate[S] 0 指標 2 天前 

Thanks for taking the time out of your hectic schedule to give me your thoughts on how to pick out a diatribe.

    永久連結embed上層留言檢舉

[–]Michaelmrose 2 指標 2 天前 

You didn't even present coherent complaints. Nothing you whined about made sense. Why don't you quit while you are behind?

    永久連結embed上層留言檢舉

[–]zcaudate[S] -2 指標 2 天前 

@michaelmrose: one word. wow.

    永久連結embed上層留言檢舉

[–]gorrepati 25 指標 3 天前 

Clojure is a big reason why I fell in love with programming again. I feel your (and your colleagues) efforts are thoroughly appreciated by many a people like me, albeit silently.

The thing is, there are a lot of smart people in the world without good taste. Even though the things they do work, they place a lot of unseen mental burden on us lesser programmers. Please please be aware that there are lot of discerning (but may not be capable) engineers like us, who appreciate the time, work and emotional energy you put into it.

I haven't grown up with a Apple computer as a kid; never seen it until I was an adult. I distinctly remember my heart leaping in joy the first time I used it. I had the same feeling when I first came to Clojure. That is the highest praise I can give to someone who sweat, fought against status quo and raised the standards for everyone else. Thank you so very much!

    永久連結embed上層留言檢舉

[–]yogthos 10 指標 3 天前 

Thank you for all the work you've done on Clojure, it is very much appreciated.

    永久連結embed上層留言檢舉

[–]daemianmack 23 指標 3 天前 

Thanks for the clarity above, Rich, and moreover: thank you for so carefully designing and stewarding Clojure.

    永久連結embed上層留言檢舉

[–]I_am_a_haiku_bot 1 指標 3 天前 

Thanks for the clarity above,

Rich, and moreover: *thank you for so*

carefully designing and stewarding Clojure.

-english_haiku_bot

    永久連結embed上層留言檢舉

[–]ertucetin 15 指標 3 天前 

Well said, he needs to grow up!

    永久連結embed上層留言檢舉

[–]ferociousturtle 16 指標 3 天前 

    Every time I have to process such a diatribe and its aftermath, and its effects on myself, my family, and my co-workers, I have to struggle back from "Why should I bother?", and every time it gets harder to justify to myself and my family that it's worth the time, energy and emotional burden.

Man. I'm sorry to hear this. Clojure is a beautiful language. It's easily my favorite language. The hard work you have put into it, and especially the hard work you've put into saying no to additional complexity and keeping the core small... Well, there are a whole lot of folks who appreciate it and probably don't tell you that often enough.

I hope you continue to bother for a very long time.

    永久連結embed上層留言檢舉

[–]un_passant 12 指標 3 天前 

Just taking the opportunity of your post to thank you for all the work you put into making this awesome gift that is Clojure !

    永久連結embed上層留言檢舉

[–]Owengjones 12 指標 3 天前 

Thank you Rich. And thank you, Alex, Cognitect and the entire community for Clojure. I assume there are many like me who happily use Clojure in drama-less silence everyday; maybe we need to speak up more.

    永久連結embed上層留言檢舉

[–]Naomarik 13 指標 3 天前 

    Every time I have to process such a diatribe and its aftermath, and its effects on myself, my family, and my co-workers, I have to struggle back from "Why should I bother?", and every time it gets harder to justify to myself and my family that it's worth the time, energy and emotional burden. Every time a community engages with such a diatribe without calling it out, and decrying its tone, the civility of our discourse and treatment of others heads further down the drain. It's time for people who value other people to speak out, in this domain and elsewhere.

I am one of silent happy clojure users. I am someone who can appreciate what the language can do after developing projects in others before.

Cognitect's work on clojure/script has given me the ability to execute on work that I would find impossible to do in languages I've used previously. All the work you guys do reading those 1970s research papers that are incomprehensible to me and implementing the ideas into clojure have had a massive impact in the life I have now. I'm not someone who zealously enjoys programming, I just enjoy being able to make a living creating things on my own schedule.

I'm extremely grateful for the work you put in. clojure.spec completely blew me away when I realized what it can do especially with generative testing. Datomic looks amazing and is on my todo list of things to learn properly but I'm still managing to move quickly without it on my current project.

If I look at other languages I just feel like everything is a complete mess. Please keep doing what you're doing. Having tasted clojure with one master chef who is very meticulous about what he's doing, nothing else is tempting.

I'm looking forward to your next talk, Rich.

    永久連結embed上層留言檢舉

[–]joncampbelldev 9 指標 3 天前 

Well said. As one of the usually less vocal but happy people I'd like to say thank you, clojure has given me a significant boost in happiness (and efficiency) at my job and in my hobby projects.

Also I can't help but smile that you go to the original definition of a word in anger as well as in conference talks.

    永久連結embed上層留言檢舉

[–]aisamu 8 指標 3 天前 

Thank you, Rich.

For Clojure, for Datomic, for your wonderful talks.

    永久連結embed上層留言檢舉

[–]mobiledevguy5554 4 指標 2 天前* 

Rich the silent majority greatly appreciates and respects the efforts of you and your team in building out this incredible ecosystem. I personally can’t wait to find a reason to buy a license for your database. I no longer just thank folks providing these wonderful open source projects, I pay them on patreon or some other service.

Guys like you, Rob Pike, Anders h, Alan kay, the list goes on and on are my personal heroes (and I’m 50!). While I can’t operate at your level, your writings and talks inspire me to always keep improving always getting better.

    永久連結embed上層留言檢舉

[–]bit_cmdr 6 指標 3 天前 

‪I really appreciate all the work that you & Cognitect have put into Clojure. I admire your stewardship of the language and your passion for it. It’s one of the things that draws me towards Clojure. Personally, I have found Clojure and the Clojure community to be one of the more welcoming and friendly ecosystems. Clojure and its community continue to be my favorite. Don’t let a few bad apples spoil the bunch. Thank you and all involved.

    永久連結embed上層留言檢舉

[–]deafmacro 5 指標 3 天前 

Thank you for Clojure. It is a piece of art!

    永久連結embed上層留言檢舉

[–]theothagod 6 指標 3 天前 

Clojure is amazing! Thank you Rich. Please keep it amazing forever!

    永久連結embed上層留言檢舉

[–]dansjay 5 指標 3 天前 

With giving us Clojure you made us believe that we are hackers, problem solvers and a strong community, who are crazy enough to take the risk for what we believe in. Thank you for bothering to address this post. We are looking forward to the Clojure 1.9 release and specially to your next Conj talk sir.

    永久連結embed上層留言檢舉

[–]the2bears 5 指標 2 天前 

After toiling for years in Java, and slowly losing any passion for software, Clojure was responsible for helping me regain it. Thank-you for that.

    永久連結embed上層留言檢舉

[–]the_evergrowing_fool 6 指標 3 天前* 

    Clojure was not originally primarily a community effort, and it isn't primarily one now.

This is arguably the best part of Clojure.

The worst part...the zealots in this community.

    永久連結embed上層留言檢舉

[–]afmoreno 2 指標 2 天前 

Rich,

You like words--thought I would give you the definition of Auctor from Peter Lombard's Libri Sententiarum:

The Method of making a book is fourfold. For someone writes the materials of others, adding and changing nothing, and this person is said to be merely the scribe [scriptor]. Someone else writes the materials of others, adding, but nothing of his own, and this person is said to be the compiler [compilator]. Someone else writes both the materials of other men, and of his own, but the materials of others as the principal materials, and his own annexed for the purpose of clarifying them, and this person is said to be the commentator [commentator], not the author [auctor]. Someone else writes both his own materials and those of others, but his own as the principal materials, and the materials of others annexed for the purpose of confirming his own, and such must be called the author [auctor].

I think of you and the core contributors as "authors" with the rest of the community in one of the other three roles. I like Clojure because I recognize the thoughtfulness behind the language: the "right" definition of literals, the "right" implementation of key Lisp features, the ecumenical approach towards being a hosted language, careful towers of abstraction, etc. I have invested learning Clojure because I believe it makes me smarter (per the quote that floats the ether) and also because it makes programming fun again. All my best to you and those who toil for our benefit. Thanks.

    永久連結embed上層留言檢舉

[–]zcaudate[S] 0 指標 2 天前 

@afmoreno: I'm curious if there's a metaphor in what you just wrote.

    永久連結embed上層留言檢舉

[–]afmoreno 1 指標 1 天前 

I thought the quote apt because it captures the idea that all software development consists of dwarfs standing on the shoulders of giants: Rich is that author of Clojure but his work stands on the foundation of the JVM, etc. Similarly, I think of library authors as "commentators", i.e., they add to the language but are minor players. Programmers tend to be "compilators": we poke around to find stuff that will work and we stitch it together, more often than not without a great deal of value-add. I think the analogy breaks down here.

Cheers!

    永久連結embed上層留言檢舉

[–]zcaudate[S] 1 指標 1 天前 

I love it. It does put things into perspective.

    永久連結embed上層留言檢舉

[–]dirtyvagabond 5 指標 3 天前 

Thank you Rich, for all that you do

    永久連結embed上層留言檢舉

[–]nathants 3 指標 3 天前 

thank you, rich.

    永久連結embed上層留言檢舉

[–]jwr 4 指標 2 天前 

    Every time I have to process such a diatribe and its aftermath, and its effects on myself, my family, and my co-workers, I have to struggle back from "Why should I bother?"

Rich, please do bother. Thanks to your work many other people (me included) are able to pay their bills and support their families. If it wasn't for Clojure and ClojureScript, I would not have been able to tame the complexity of my SaaS app, so I owe you quite a bit.

I've seen many of these types of rants about the "language" and "community" over the years. Most of the time they are written by people who do not write and maintain apps for a living. People that actually do write apps to support themselves tend to be rather quiet. They've got things to do, and they are grateful for the tools that others have provided.

I am in that "quiet" category most of the time, but now is the time to speak up and support what you're doing.

    永久連結embed上層留言檢舉

[–]neverfox 3 指標 2 天前* 

Another thank you, Rich. I have not only had the joy of using Clojure has my primary language (for work and play) but also the joy of teaching it to others and watching the epiphany that comes from using a powerful and simple functional language. It angers and frustrates me that things like this happen that threaten to undermine its future. I consider it a careless attack on my livelihood and the livelihood of those like me. It's personal for us too.

    永久連結embed上層留言檢舉

[–]surya_aditya 2 指標 3 天前 

Your efforts are highly appreciated Rich, it has had positive influence on the community, it is a great acheivement. thanks again.

    永久連結embed上層留言檢舉

[–]bpiel 2 指標 3 天前 

Thanks, Rich & Cognitect. I sincerely wish you were all getting rich.

    永久連結embed上層留言檢舉

[–]kingnuscodus 2 指標 2 天前 

Well said Rich..Thank You for your amazing work and for giving the world Clojure - which for me made programming fun again. It would be nice if the author of the post could write another with a formal apology - in the meantime, please know that the very vast majority of us will be forever grateful for your stewardship and many other contributions to the language!

    永久連結embed上層留言檢舉

[–]zcaudate[S] 1 指標 2 天前 

Let's hope that this dialectic will produce a more reasoned synthesis. Apologies are way too cheap by my reckoning.

    永久連結embed上層留言檢舉

[–]addamsson 1 指標 1 天前 

I'm a long time user and admirer of Clojure. I don't think that naysayers like this guy are worth addressing, but I see that if they reach a critical mass they must be put to their place.

On the other hand there are a lot of programmers like me who are also not vocal but think that you are a very positive and influential figure and Clojure is worth learning and using so here it is. Keep up the good work!

    a simple Clojure user

    永久連結embed上層留言檢舉

[–]foobarbazquix 1 指標 2 天前 

On the flip side: In a conversation this week I praised the maintainers of Clojure for their stewardship of the language and what I perceive as exhaustive consideration given to the smallest of changes. I attributed this to part of why the language is so well designed and stable and why I think overall it’s the best language we have been given to date. When I said I sometimes wish the language had a larger community the other person said that would destroy the Clojure I know and love, that the language would be changed to accommodate something like the least common denominator, that it wouldn’t be Clojure anymore. I proudly and with complete confidence said Clojure’s maintainers would never allow that to happen. I recommended Clojure to someone on Twitter who said they liked metaprogramming. I had a positive interaction with a Cognitect employee. I recommended Clojure for in house projects at my company because we are tiny and I find the language confers something like an unfair advantage to those who use it. I worked on a library written in Clojure that can record the operations of functions, simultaneously read the definition of a function from its source and persist all this to another file. I was able to do this fairly easily, and it worked even when the calling code was run from within the file that was being read from. I despaired at the thought of attempting anything like this in any other programming language.

    永久連結embed上層留言檢舉

[+]zcaudate[S] 留言分數低於臨界標準 * (36 下層留言)

[+]downvotes_puffins 留言分數低於臨界標準  (7 下層留言)

[+]visible_gravity 留言分數低於臨界標準  (6 下層留言)

[–]keymone -2 指標 3 天前* 

Thank you for Clojure and continued efforts in making it and ecosystem around it amazing.

Edit: wow, this sub doesn’t react well to puns, noted and removed it.

    永久連結embed上層留言檢舉

[–]zcaudate[S] 1 指標 3 天前 

... it definitely reacts

    永久連結embed上層留言檢舉

[–]Michaelmrose 0 指標 2 天前 

    Every time I have to process such a diatribe and its aftermath, and its effects on myself, my family, and my co-workers, I have to struggle back from "Why should I bother?", and every time it gets harder to justify to myself and my family that it's worth the time, energy and emotional burden. Every time a community engages with such a diatribe without calling it out, and decrying its tone, the civility of our discourse and treatment of others heads further down the drain. It's time for people who value other people to speak out, in this domain and elsewhere:

I honestly don't know why you care. Hate and stupidity are pervasive human qualities. One of the great things about the Internet is the breadth of the perspective it brings. Go looking far enough and you could and whatever your interests, beliefs nationality, race there are probably at least few hundred people who would like to kill you and use you for fertilizer for who you are.

Going to look for idiots on the Internet is bad, engaging them and wasting your energy, feeling bad or angry is worse. You will never enlighten them and the exercise only hurts you and wastes your time which is better spent with work that makes you fulfilled or with your family. Fuck stupid people.
https://www.reddit.com/r/Clojure/comments/73yznc/on_whose_authority/do1olag/

** 23:27 On whose authority?

by Chris Zheng,

...Fuck Clojure.

There I've said it and God it feels good.

I say it with much admiration and respect to all the members of community. I've learnt so much from being in this microcosm of dynamism, ideas and learning over the past 8 years. Clojure has allowed me to get to know so many amazing people, to travel to a whole bunch of places and to do things that I had never thought possible.

Having said that, I've gone from a wide-eyed, idealistic fanboy to someone less idealistic, and almost cynical about the trajectory of the language. I have gained so much - but at the same time, I had expected more. Now I'm just tired.

Like the ending of a long love affair with a girl way out of my league, I loved and loathed every single minute of my time as a clojure developer. The experience, though unforgettable, has taken a toll on my mental and physical well-being. I feel that I have given my all. Now that the party is over and sunrise begins to reveal the plastic fairy lights and overdone makeup, I begin to question my life as well as the values that I am looking for within it.

I remember when I first got into Clojure. I had been struggling to build a concurrent system for years (and to this day, I'm still clueless about how to do it with locks and semaphores). I had been working with python back then and it was really hard work. Then I read Paul Graham's hacker's and painter's book in his article Revenge of the Nerds

"As one data point on the curve, at any rate, if you were to compete with ITA and chose to write your software in C, they would be able to develop software twenty times faster than you. If you spent a year on a new feature, they'd be able to duplicate it in less than three weeks. Whereas if they spent just three months developing something new, it would be five years before you had it too."

My thinking at the time was. Wow. I want to be elite and so after a brief spell with Common Lisp, decided on Clojure. The hook for me (like probably a lot of people) was watching Rich Hickey's epic refutation of OOP and his infamous Ants demo. I was flabbergasted at the fact that I spent 3 months trying to figure out how to get two processes to talk to each other and there was this guy running a graphical simulation of over 100 threads syncing flawlessly. It was a real wake up call to what was possible.

So I dove right in. At the time, no one was employing for Clojure and so I worked as an IT guy in a new age crystal store learning the craft. No one really knew what I was doing and as most of the staff had the innate ability to talk to crystals, they assumed I had the same type of talent except with electronic equiptment. I have very fond memories of the time there both working and learning. I remember that it was around 2010-2013 period where Clojure was really growing in terms of the community and all the interesting ideas that people were implementing. Because of my isolation, I had to resort to asking questions on stackoverflow. I stopped asking a while back but the count of my clojure related questions is currently at 205. Of course, there were a few assholes on SO that find enjoyment marking questions as 'closed' or 'irrelevent' because they didn't understand it correctly. If those questions had been allowed to stay, my SO clojure related count would have been about 230. But who's counting anyways.

There was also the Monthly Melbourne Clojure Meetup Group organised by James and Hank. It was a real treat to talk to those that solved problems through deduction, logic and language instead of massages, eagle feathers and putting crystal on each other.

In the period of 2010 to 2013, so much cool shit came out on a weekly basis. I don't know how it happened. It was a time where I was constantly challenged to improve my thought and design process. The highlights showcased in the 2011 and 2012 conj talks were phenomenal and the level of innovation and experimentation was beyond anything I had experienced. As someone still new to the scene, I was star stuck. 2013 marked the year where clojure 'jumped the shark' so to speak. This marked the path to 'enterprise clojure'. One of the real treats for 2013 was the talk by prismatic where the community was shown that it was not only conceivable, but also possible that an entire platform could be built on clojure. That talk set the bar and the trend of the enterprise platform has continued over the years. Now, it's a staple of a conference to have about half a dozen talks where a team lead (but not necessarily dev) of a well known organisation saying "look everyone, we've built this large data analytics platform using clojure". While it was cool about 5 years ago, I've lost the excitement that those talks once brought.

I've decided to break from actively contributing to the community. This is mainly from actions that I've seen from my perspective that have fragmented community. I'm putting the focus on Cognitect and the company's impact on developer culture.

One. The Establishment and the myth of the Rockstar Developer

I understand that there is great pressure for a company to increase it's product range, market its brand and make money. However, in the case of Cognitect, I feel that the company has had an unreasonable amount of influence of the language. Like a single mother with custody over her kids, Cognitect has definitely been the major force in shaping the direction of development. This is however a double-edged sword. I have had a couple of pull-requests rejected and then introduced a year after I released a library for the feature. I don't think I'm the only person with the experience.

The fact that Cognitect have hired so many high profile contributors to the Clojure ecosystem has resulted in a boost for both the company, as well as the people that work there. Who doesn't want to play guitar and talk immutability with Rich at the watercooler? Rich epitomizes this concept of a 'Rockstar Programmer' - a brilliant, all-round individual who could solve any problem known to man - all in his sleep. I know I believed in it - and the things that I would have given to be part of the 'establishment'

How this mythos influences the community however is subtle, but present. The mythos attracts the gunslingers and the lone rangers of tech. Those that know that anything is possible. For many in the community (including myself to some extent), it also brings out the darker attributes of genius such as narcissim and jealousy. In short, clojure amplifies the qualities inherent within an individual with a tool that is extremely powerful. The need for cooperating with others diminishes and this is not good for community.

Two. Standards and Ignoring the Defacto Community

With great power comes great responsibility. I feel that Cognitect could do a lot more to promote other projects with the clojure ecosystem that are not internal to the company. One example was some of a 'defacto standard' going away was Noir. At it's peak, Noir was a great library for building webapps due to it's emphasis on documentation and design. It had the potential to be something pretty cool if more people supported it. I don't know what happened but suddenly, it was not the flavor of the month anymore. If more collaboration had occured then maybe it would have been different. I don't know. Maybe using compojure was enough. I don't know. I just felt that Noir had the potential to be the 'django of clojure' and due to whatever reason, it never did. Noir was essentially dead in 2013 when Chris Granger started on Light Table and his attention moved else where.

In the last couple of years, two projects gave me doubts as to the intentions of the core. The first was the Arachne project and the second was clojure.spec. I believe that both projects undermined the spirit of generousity by putting the interests of the establishment over that of the whole. Whether deliberate or not, there was a certain set of blinkers put on that ignored alot of what was going on within the broader community.

Since the post was published, there was a a bit of confusion about my portrayal about the status of Arachne. I wanted to clarify that Arachne is not an 'official' Cognitect project. However, there is a certain prestige gained from working at Cognitect and this was what I wanted to express. I personally found the Arachne kickstarter campaign a little bit condescending and I was interested to read yogthos's comment on reddit. I didn't think we needed yet another web framework - we need more documentation, examples and sexy home pages for existing ones. However shallow that may be, it worked for Noir and countless frameworks in other languages. A sexy webpage for Ring would be amazing. I personally would contribute because the library has helped me immensely over the years. I thought that all the campaign was to confuse an already fragmented landscape of web frameworks.

When clojure.spec came out, I was quite sad because I had grown very attached to prismatic/schema. I felt that schema was on the verge of establishing itself as the 'defacto' standard and although spec offered 'additional' features, it meant that the community was forced to choose. The energy and momentum going into schema suddenly stopped and it's a real shame because once the 'official' version comes out, the alternatives tend to be overlooked.

Three. Datomic

Just please open source it already. GraphQL is here to stay and gaining ground. The breakthough technology is somewhat emulated with gundb and very soon the technology could be superceeded.

Quite a few things have happened that made me recently that made me reevaluate how long I should be a developer.

I think I'm still ahead of the curve but I've realised that I can't keep running anymore. Technology pushes forward in leaps and bounds and we the technologists end up getting in the way most of the time. The things we thought impossible has become the norm today. Money, fame, success - they are all so short lived. What's important is community, respect and understanding because it's through others that we grow.

Fuck. Clojure.

Update: I've taken note of some of the confusion with language around the timeline of Noir and the timeline of Arachne and updated the post. Also, the relationship of Arachne and Cognitect can be better explained by Tim Baldridge of Cognitect in the featured comments. 
http://z.caudate.me/on-whose-authority/
## 20171012 -----------------------------------
星期四, 2017/10/12


acs.d]]

* Event: It finally works

  https://github.com/howardabrams/dot-files/blob/master/emacs-org.org

  From:https://github.com/cosysn/org-gtd/blob/master/org-gtd.el

* Event: yes it works

  

  From:http://www.jvejournals.com/Vibro/article/JVE-16879.html

* Event: 升力面和升力线
升力面方法一般是在环量求解时基于流动无分离假设，当解出叶片攻角后再通过翼型气动数据算出气动力，因此
叶片绕流分离越大时，叶片环量计算偏差越大。
升力线方法在叶片环量计算时就引入翼型气动数据，环量计算更有效。但是，叶片环量方程组是隐式非线性方程组，在
较大偏航角工况等叶片环量分布存在较强的非线性时，方程迭代比较容易发散。
  

  From:《基于自由涡方法的控制过程中风轮气动特性研究》


## 20171013 -----------------------------------
星期五, 2017/10/13


acs.d]]


* Event: org time budget

* How does this differ from Effort estimates?

Effort is an estimate of how long a task will take you to complete. You might get overdue or finish sooner, and that's fine because estimates are guesswork. However, time/clock budget is a fixed quantity you can't go overdue with. A person working 40-hour week has only about 40 hours of free time (5h for 5 work days and 2x10 for weekend), and that's it.

To plan your tasks you use effort estimates, to schedule them within weeks or months you use budget (sometimes called capacity or goal).

For example, you can have a task which might have 30 hour estimate, and you wish to work on it for 3 weeks. Therefore, you'd budget 10 hours weekly to work on this task and no more, allocating the rest of the time to other tasks. If your estimate was too little, you will simply extend the period for another week of 10 hours. If it was too little, you can re-budget the surplus time on other tasks.
Why should I want to budget my time?

Resource allocation is the basis of effectivity. With a purposeful budget you won't get overwhelmed about thinking what to do when. Once you use up all your hours it means you need to work on something else. This way you can spread your work on different tasks to avoid burnout. Coupled with basic scheduling this can lead to surprising amount of "administration" time saved.
When should I budget my time?

A "recommended" work-flow is to have a weekly (or by-weekly) recurring task called "Plan for next week" (fortnight/month...) where you consolidate your tasks and refine your budgets, review stale tasks etc. This can take anywhere from 10 to 60 minutes depending on your level of sophistication. Hitting the sweet-spot of not wasting more time than necessary while freeing you from all the cognitive burden during the week might take some practice and discipline.
  

  From: https://github.com/Fuco1/org-clock-budget

## 20171017 -----------------------------------
星期二, 2017/10/17


acs.d]]

** 10:38 clojure dir-fn

{{{
user> (require 'clojure.repl 'clojure.string)
nil
user> (pprint (clojure.repl/dir-fn 'clojure.string))
(blank?
 capitalize
 ends-with?
 escape
 includes?
 index-of
 join
 last-index-of
 lower-case
 re-quote-replacement
 replace
 replace-first
 reverse
 split
 split-lines
 starts-with?
 trim
 trim-newline
 triml
 trimr
 upper-case)
nil
}}}

** 11:09 loop do cucur

user> (loop [i 1] (if (< i  5) (println i) (recur (inc i))))
1
nil
user> (loop [i 1] (if (< i 5) (do (println i) (recur (inc i)))))
1
2
3
4
nil
user> (loop [i 1] (when (< i 5) (println i) (recur (inc i))))
1
2
3
4
nil

** 12:17 clojure典型工作过程



许多 Java 程序员在开始写 Clojure 程序的时候，将写 Java 程序的工作习惯一道带了过来。但是，这两种语言是非常不同的，在 Java 方面工作良好的工作习惯，却不能发挥出 Clojure 的威力。

下文全部用 Cursive IDE 说明。Clojure 高效工作流程的基础，在于：

    REPL。这是威力最强大的武器！我的习惯是一旦打开项目，立即启动 REPL。在 cursive 下，就是按下 cmd+R （第一次运行 REPL 时需要用右键点 project.clj)。

    快捷键，快捷键，快捷键！重要的事说三次。要高效使用 REPL，就不可能把一只手放在鼠标上。在 settings 里搜索 clojure keybinding，使用快捷键。如果你不是疯狂的 Emacs 爱好者，选择 cursive 方案会容易一点。

    随手 Load 代码。写完或改完任何函数后，我会立即按下 Ctrl+C, Ctrl+K 来把程序送进 REPL, 以保证 REPL 里总是最新的版本。

    在文件中写随手测试，并将其送到 REPL，而不是直接在 REPL 中敲键盘！除了正规的测试外，程序中我们会经常尝试些想法，与其每次把这些想法反复敲出来，不如放在源文件中。我一般会在文件结尾放一个 comment，里面放随手尝试代码。只要用cmd+option+x 键就可以把 form 送进 REPL 看结果啦！象这样：

(comment
  (my-function "hello")
  )

    小步写程序。一个函数一个函数写，边写边使用 REPL 试验它们。深思熟虑地一次写一大批代码可能看起来很酷，却往往不是 Clojure 的最佳做法。

https://segmentfault.com/a/1190000004392158

** 12:21 add-remote-javadoc

http://clojure-api-cn.readthedocs.io/en/latest/clojure.java.javadoc/add-remote-javadoc.html
添加路径 url 到远程 javadoc 路径的列表， package-prefix 是 URL 对应的 javadoc 的包名的开始部分。

** 12:39 三个境界(clojure state management)

可以参考《clojure pratical》
其實這個「看山是山，看山不是山，看山仍是山」是禪宗青原行思禪師對自己修行的總結。也是修行人對境緣的三個見地層次：
起初「看山是山」，形容我們在未修行的時候，人家說山我們就一堆妄念，覺得山應該如何如何，要高要翠綠要有這個要有那個等等。打個比方就如在學校學到了很多書本上的知識，覺得這個世界應該是如何如何，尊老愛幼，廉潔正直，做人要有道德等等。一說到某政黨或者國家，大家自然生起一系列聯想。(只是看了）

然後「看山不是山」，就是開始參悟佛理，精進修行，體悟一切的虛幻不實和無常，那裏還來個「山」呢？不過是因緣和合而有之物。繼續用上面的比方，就如當發現一些平常接觸不到的歷史和聽到看到讀到某些平常不讓看的新聞，立馬三觀盡毀，這個世界原來不是我們想像那樣啊！為老不尊，貪污腐敗，少年早熟，一切唯利是圖等等。(看多了，反而乱了)
(观点太多了，似是而非）

最後「看山仍是山」，則是我們徹悟本來，不被虛幻欺騙，可以真真實實地直視世間一切，不再有“應該這樣”、“應該那樣”的聯想。繼續上面的例子：不再執著於“三觀”，任它好壞，世間即是世間，對其喜好厭惡都是我們自己自作多情強加上去的。某國就是某國，貪污也是某國，廉潔也是某國，不再因為對某些元素的喜好厭惡而妄作判斷。能平和無爭，自在無礙地看著，抽離了世俗的眼光而觀。不會再“驚呆了”。(看清楚了，就不乱了)

** 13:53 文献综述

其他作者是怎么描述该作者的工作

该作者做了那个工作，别人是怎么描述的

** 17:26 全球风电2017发展状况

一、过去五年，风电产业取得快速的发展和成长。中国在2012年的时候，风电总装机容量约是6000万千瓦，到2017年已经接近2012年的3倍。而全球的风电产业也取得了重大进展。2012年全球风电总装机容量是2.8亿千瓦，而现在已经超过5亿千瓦，大约是2012的2倍。所以说，风电产业在过去的五年当中取得了很大的成绩。虽然风电市场的增长有它的波动性，不可能总是复制中国2006年3000多万千瓦新增装机容量这样发展的速度，但是如果我们看到最近3年全球新增风电装机容量和3年之前相比，最近3年是之前3年1.4倍。所以说，从全球来看风电产业正在快速成长。

** 17:30 2017年中国风电并网量

http://www.nea.gov.cn/2017-04/25/c_136234299.htm
1-3月，全国风电新增并网容量352万千瓦，截至3月底，累计并网容量达到1.51亿千瓦，累计并网容量同比增长13%；1-3月，全国风电上网电量687亿千瓦时，同比增长26%；平均利用小时数468小时，同比增加46小时；风电弃风电量135亿千瓦时，比去年同期减少57亿千瓦时，弃风限电情况明显好转。

** 23:00 世界主要国家人均能源消费量

http://news.bjx.com.cn/html/20141030/559169.shtml
## 20171019 -----------------------------------
星期四, 2017/10/19


acs.d]]

** 11:05 光看文档是学不会的，必须要做一些项目练手、积累经验

定理证明项目从年初写到现在，目前已经积累了 18000 行代码，还差最后一个引理的最后部分就把教授论文里的主定理形式化完成了；HOL 虽然是我自学的，但如果不留这个学我自己永远也学不会，甚至都不知道其存在。
## 20171021 -----------------------------------
星期六, 2017/10/21


acs.d]]

** 00:49 align rules

down vote
favorite
10
	

I saw this somewhere, but cannot find it now. Is there a built-in function in emacs, or does someone have elisp, to line up all the equals signs in a series of inititialization statments in cc-mode?

Before:

int t=9;
Graphics g = new Graphics();
List<String> list = new List<String>();

After:

int          t    = 9;
Graphics     g    = new Graphics();
List<String> list = new List<String>();


## 20171022 -----------------------------------
星期日, 2017/10/22


acs.d]]

** 15:11 Lisp fantasity

What makes LISP such a fantastic language is that the source code
and data structures are intrinsically one and the same:
the lisp source code you read as a human is almost identical to
how the code is manipulated as a data structure by lisp---the distinction
between the questions "What is data?" and "What is code" are nil

The data as code,the macro system and the ability to "advise" arbitrary
functions--meaning you can modify the behavior of existing code without
copying and modifying the original---give you an unprecedented ability
to alter Emacs to suit your needs.

You can *hook* , replace or alter existing routines in Emacs to suit
your needs without rewriting large swathes of someone else's source 
code.

Emacs is a living systems. When you write elisp, you are not just
writing snippets of code run in a sandbox, isolated from everything
It is a living system; an operationg system running on an operating
system. It is an interpreter

** 15:39 what is buffer in emacs

The buffer is the data structure(this is very important(extremely powerful concept 
because the very same command you use to move around and edit in Emacs
are almost always the same ones you use behind-the-scenes in elisp.

** 15:45 window

Think of it as a physical window having a frame, each 
frame made up of window panes(each window is an window)

why introduce the Point and mark!

keystrokes(key bindings) 

.emacs.d init.el and .eamcs

Major mode and minor mode(key function  highlight --one file extension bind to only one major mode)

** 15:54 font locking

Font locking is the correct term for syntax high-lighting in Emacs, and in turn
is made up of faces of properties(color, font, text size, text style etc) that
the font locking engines use to pretty-point the text.

You are free to change a buffer's major mode at any time by typing the command
for another one.

** 16:03 client-server

Emacs has a client-server architecture(emacs client-server mode)
Emacs --daemon will run emacs as a daemon. It will call server-start,
as above, but will return control to your terminal immediately and run
in background ,waiting for client requests.

** 16:13 M-x

M-x means the execute extended command(M-x) interface and key bindings

So if you're a package author, you have to choose if a particular function 
is accessible to the end-user through the M-x interface(Mx) . Marking 
it as interactive will make it accessible to the end users.

In other words, if it's not interactive ,you cannot run it from M-x nor 
can you bind it to a key

** 16:39 You know what's my talents?

That is what I want? That is why I came here.

** 16:42 Self-documenting editor

Emacs is a sophisticated self-documenting editor. Every facet of
emacs is searchable or describable. Learning how to do this
is absolutely esssential to mastering Emacs.

I use emacs's self-documenting functionality all the time.

Knowing how to get help is critical because
1. emacs knows best .
2. you will find more beautiful and functional features in emacs.

** 16:47 emacs document system

diveded into 3 parts
1. the info manual
2. Apropos(Emacs has an extensive apropos systems that works in much the same 
way as apropos does on the command line.The Apropos system is specially useful
if you 're not entirely sure what you are looking for.(C-h a: M-x apropos-command)
(Hint : Apropos can sort results by relevancy . To enable this
add (setq apropos-sort-by-scores t)
3. the describle system---a living system which describe yourself system.(your

personalize Emacs(M-x describe-mode or C-h m   
C-h f: M-x describe-function
C-h v: M-x describe-variable
C-h k: M-x describe-key

** DONE 16:57 the theory of movement
CLOSED: [2017-10-30 周一 09:07] SCHEDULED: <2017-10-22 周日>

- State "DONE"       from "学习"       [2017-10-30 周一 09:07]
- State "学习"       from              [2017-10-22 周日 17:04]
Getting around, and getting around efficiently, is as important as 
knowing how to edit quickly and efficiently.

But movement in Emacs is more than characters in a buffer.
There's a host of supplementary skills that make up navigation,
like understanding Emacs's rather complicated windowing system.

I've laid things out ,so you can start at the beginning and work
your way through, picking up bits and pieces as you read. The most important
part, as I've stressed many times, is to give it time and practice 
take a moment in your day-to-day life to ask yourself if there's a 
better way of solving with which you are faced

** 17:24 syntax table

syntax table let you choose which is the comment character,
what character make up a word?(symbol. punctuation,comment etc)
as a syntactic unit . So when you move the point around on
the screen, it moves according to the syntax table 
and the general rules governing forward-word and backward-word

Every editor has an equivalent of Emacs's syntax table, but
what sets Emacs apart from other editors is that 
you can inspect and change the syntax table, which in turn will
effect how you invoke certain commands.
## 20171023 -----------------------------------
星期一, 2017/10/23


acs.d]]

** 1  四次剖
    1 大外场关联
    2 一次o剖
    3 机舱前头正方形o剖，然后关联
    4 切割buffer区域 和机舱尾部，关联机舱表面的流向网格线，删除机舱的网格block块
    5.第三次o剖，关联buffer区域的圆，删除buffer内部园，

开始布置网格节点和质量检查
检查差不多，进行第二步散热器的网格划分
2  散热器部分单独选取block快进行o剖
    2.1 注意选取bump上面三个block，
## 20171025 -----------------------------------
星期三, 2017/10/25


acs.d]]

** 11:54 Solidworks 重建

ctrl+b 简单重建  刷新
ctrl+q 全部重建（试试他） 在炸不到问题时候，就用它  深层次重建

** 23:48 机械系统

机械系统一般是由若干个物体组成，通过一系列的几何约束连接起来以完成预期动作
的一个整体，因此也可以把整个机械系统叫做多体系统。如果将系统中每个物体都看做
不变性的刚性体，则称该系统为多刚体系统；若系统中有一些物体必须计算其变形，则称之
为多柔体系统或柔性多体系统。多体动力学(MBD)软件的理论基础是多体动力学
## 20171026 -----------------------------------
* 星期四, 2017/10/26

** 22:26 reagent

reagent 是 react 与 cljs 的一个桥接，抽象的比较好，写页面爽多了
不过相比 Clojure，cljs 还是年轻些，工具不是很成熟，但是用没问题
 可能是个小众需求，但是这个过程使用 react + cljs + reagent，也方便回来讲
## 20171027 -----------------------------------
星期五, 2017/10/27


acs.d]]

** 12:42 mstsc 远程登陆

首先输入mstsc 然后登陆10.10.10.31(你的电IP是10.10.10.30），注意采用直连的方式进行，
eta机用户名为lzhpc
密码为111111

注意该台电脑是ping不同的，需要在系统设置中 打开允许远程访问的命令

** 15:59 毕业论文长短
我反复提醒自己，毕业论文不在于长短，关键是要言之有物，最起码要在实实在在的工作（代码为证）基础上把所做的内容说清楚，
并且文字要简洁以免给读者造成负担。背景知识可以有但也不必抄书。但除此之外我还可以有别的创新：有时候实现或发现了某个东西是一回事
，正确地解释它则是另一回事。


** 16:31 what on earth emacs  does what you need it

My question is–do you all find that Emacs (and Emacs alone) does what
 you need it to do for your day-to-day work? Or do you find yourselves 
using IDEs regularly, for the fancy features?

100% emacs at all times, for all languages. Even MATLAB!

MATLAB session is in emacs buffer. Can call MATLAB functions, launch plot windows, etc. I usually open another emacs window to edit a .m file in and run it from the shell buffer.

I set it up years ago so I don't remember the details, but there's info online.


**** IDE feature(Add the feature as you want)

That would mean that everyone who use Emacs should implement all ide features. Obviously everyone don’t use every feature, so there is definately situations where it is okay to not have som feature which your coworkers ide has.

** 21:44 let tools to solve problem

Good god, no. The company I work for is pretty deep in Microsoft land, so at a very minimum I need to keep a Windows VM around for Lync and (to some extent) Outlook. Similarly, despite the advances made by Emacs in the area, I doubt I'll be replacing the web browser with Emacs any time soon, web apps (like the Atlassian tools) are way too heavily integrated at my workplace. Code wise I'm happy with Emacs, but then again I don't write Java.

As a professional developer, I think it's important not to get too attached to the tools. They exist to help us solve problems, and when one tool doesn't cut it you pick a different one for the job. 

## 20171028 -----------------------------------
星期六, 2017/10/28


acs.d]]

** 16:07 如何拒绝别人

那我建议的拒绝方法是什么呢？你可以这么说：“你看，我今天还有五件事情没有做完，其中一件还是老板今天下午就要的，
我现在着急的很，能不能这样，你先问问别人，如果实在不行，下午快下班那会再说？”

这段话的套路是：

    说事实：“今天有五件事没做完”、“老板今天下午就要”，这些都是事实，当你说出这些事实的时候，对方就知道你为什么要拒绝他，不会产生误解
    谈感受：“我现在着急的很”，当你说出内心感受的时候，对方很容易感同身受、产生共鸣，就不好意思了。
    给建议：“能不能先问问别人……”有了前两层的铺垫，这时候你再说出自己的建议时，对方就容易接受多了。

** 16:34 观点和逻辑线

http://www.gtdlife.com/2017/4807/sheji-yanjianggao/


    观点是一根直线，这是整个演讲的主轴，任何时候都不应该偏离
    逻辑是一条线，这条线是由各种素材组成（也就是“点”）
    情感则是逻辑线上的波峰和波谷，让整条线有了起伏

甜点是为你演讲加分的最后机会

吃甜点的时候，通常是快要结束的时候，大部分人评价一场演讲好不好，通常都是看甜点怎么样，所以有些餐馆虽然主餐一般，但甜点很棒的话，也能拿到高分那甜点怎么让大家觉得很受用呢？

古典老师提到了三种：

    突出得到的东西
    抛出新理念
    吸引人的小故事

## 20171030 -----------------------------------
星期一, 2017/10/30


acs.d]]

** 19:52 要做就做的彻底

彻底地把一件事情办好

** 23:16 (source find)

查找find的源码
https://clojuredocs.org/clojure.repl/source
## 20171031 -----------------------------------
星期二, 2017/10/31


acs.d]]

** 15:34 clocking only works  with heads                           :clojure:

Clocking only works with headings indented less than 30 stars.
## 20171101 -----------------------------------
* 星期三, 2017/11/1

** 17:02 为什么要使用defmacro?

LISP里的宏之所以被称为宏，是因为它确实包装了很多步骤的操作，两大步：
第一步，像函数那样，宏的body对你传入宏的参数进行操作，进行处理，进行加工；注意，传入宏的参数，是不会被求值的。
第二步，第一步处理的结果，会被LISP-eval，也就是会被LISP执行；而在函数里，整个函数body的执行结果是不会被再次执行的。第二步的再次被执行，这种特性在动态生成代码中是非常OK的，第一步用来生成代码，第二步用来执行这段代码。为什么要动态生成代码呢?

动态变化的过程是data transformation的过程

可以到别的地方去执行，比如
(defmacro make-test(name body)
`(defun ,name ,body)
....)
需要定义测试加法的函数，就可以这样调用 ; (make-test test-+ body)
然后调用test-+

用来创建domain specific language. 换句话来说就是让你的语法更适合问题所在的domain.

Common Lisp的宏特别之处可能就在于能在run time之前多一层macro expansion time。宏扩展的时候可以把代码当作数据来处理，并可以控制宏参数的evalute次数、顺序等。依据这些特性可以用宏生成新的语法规则。写宏的时候要注意variable capture以及form参数的多次evalute.

(defmacro kv [& args]
  `(let [args# (list ~@args)]
     (zipmap (map #(keyword %) '(~@args)) args#)))


(defmacro defn-request [func-name api-key method & args]
  `(defn ~func-name [~@args]
     (url-request-jsonlize
      (request-hof
       ~api-key
       ~method
       (kv ~@args)))))
虽然不是common lisp, 但也是lisp方言(clojure).. 这是我用的比较舒服的宏.. 用参数定义request的发送函数 包括参数表之类的 外围用起来一个很舒服...




** 17:24 defmacro really generate the clojure expression

defmacro will not evaluate the parameter, but the body will evaluate some arguments with ~ and ~@ surround with `

Macro是函数式编程里面很重要的一个概念，在之前，我们已经使用了Clojure里面的一些macro，譬如when，and等，我们可以通过macroexpand获知：

user=> (macroexpand '(when true [1 2 3])))
(if true (do [1 2 3]))
user=> (doc when)
-------------------------
clojure.core/when
([test & body])
Macro
  Evaluates test. If logical true, evaluates body in an implicit do.
nil

可以看到，when其实就是if + do的封装，很类似C语言里面的macro。
defmacro

我们可以通过defmacro来定义macro：

user=> (defmacro my-plus
  #_=> "Another plus for a + b"
  #_=> [args]
  #_=> (list (second args) (first args) (last args)))
#'user/my-plus
user=> (my-plus (1 + 1))
2
user=> (macroexpand '(my-plus (1 + 1)))
(+ 1 1)

macro的定义比较类似函数的定义，我们需要定义一个macro name，譬如上面的my-plus，一个可选择的macro document，一个参数列表以及macro body。body通常会返回一个list用于后续被Clojure进行执行。

我们可以在macro body里面使用任何function，macro以及special form，然后使用macro的时候就跟函数调用一样。但是跟函数不一样的地方在于函数在调用的时候，参数都是先被evaluated，然后才被传入函数里面的，但是对于macro来说，参数是直接传入macro，而没有预先被evaluated。

我们也能在macro里面使用argument destructuring技术，进行参数绑定：

user=> (defmacro my-plus2
  #_=> [[op1 op op2]]
  #_=> (list op op1 op2))
#'user/my-plus2
user=> (my-plus2 (1 + 1))

Symbol and Value

编写macro的时候，我们其实就是构建list供Clojure去evaluate，所以在macro里面，我们需要quote expression，这样才能给Clojure返回一个没有evaluated的list，而不是在macro里面就自己evaluate了。也就是说，我们需要明确了解symbol和value的区别。

譬如，现在我们要实现这样一个功能，一个macro，接受一个expression，打印并且输出它的值，可能看起来像这样:

user=> (let [result 1] (println result) result)
1
1

然后我们定义这个macro：

user=> (defmacro my-print
  #_=> [expression]
  #_=> (list let [result expression]
  #_=> (list println result)
  #_=> result))

我们会发现出错了，错误为"Can't take value of a macro: #'clojure.core/let"，为什么呢？在上面这个例子中，我们其实想得到的是let symbol，而不是得到let这个symbol引用的value，这里let并不能够被evaluate。

所以为了解决这个问题，我们需要quote let，只是返回let这个symbol，然后让Clojure外面去负责evaluate，如下：

user=> (defmacro my-print
  #_=> [expression]
  #_=> (list 'let ['result expression]
  #_=> (list 'println 'result)
  #_=> 'result))
#'user/my-print
user=> (my-print 1)
1
1

Quote
Simple Quoting

如果我们仅仅想得到一个没有evaluated的symbol，我们可以使用quote:

user=> (+ 1 2)
3
user=> (quote (+ 1 2))
(+ 1 2)
user=> '(+ 1 2)
(+ 1 2)
user=> '123
123
user=> 123
123
user=> 'hello
hello
user=> hello

CompilerException java.lang.RuntimeException: Unable to resolve symbol: hello in this context

Syntax Quoting

在前面，我们通过'以及quote了解了simple quoting，Clojure还提供了syntax quoting `

user=> `1
1
user=> `+
clojure.core/+
user=> '+
+

可以看到，syntax quoting会返回fully qualified symbol，所以使用syntax quoting能够让我们避免命名冲突。

另一个syntax quoting跟simple quoting不同的地方在于，我们可以在syntax quoting里面使用~来unquote一些form，这等于是说，我要quote这一个expression，但是这个expression里面某一个form先evaluate，譬如:

user=> `(+ 1 ~(inc 1))
(clojure.core/+ 1 2)
user=> `(+ 1 (inc 1))
(clojure.core/+ 1 (clojure.core/inc 1))

这里还需要注意一下unquote splicing:

user=> `(+ ~(list 1 2 3))
(clojure.core/+ (1 2 3))
user=> `(+ ~@(list 1 2 3))
(clojure.core/+ 1 2 3)

syntax quoting会让代码更加简洁，具体到前面print那个例子，我们let这些都加了quote，代码看起来挺丑陋的，如果用syntax quoting，如下:

user=> (defmacro my-print2
  #_=> [expression]
  #_=> `(let [result# ~expression]
  #_=> (println result#)
  #_=> result#))
#'user/my-print2
user=> (my-print2 1)
1
1



宏存在第二步，这是之前没注意到的，也就是在解释完macro body之后还得解释macro-expansion的内容（这是核心的内容)
让他变着花样地执行！经常会用到的技能是，参数的次序调换。(不求值阶段和求值阶段，两部分，但是说到不求值，也是可以求的
比如~x  ~@(list...)---- 第一阶段code is data, 第二阶段data(list data) is code.

code->data->code->data->code...
eval->apply->eval->apply->eval...


how to uprade your thinking from function to macro?

如果真的是参数比如，红参数中x是5
但是你在宏body肯定使用的是5 如果你使用`(+   4 x) 那么最后就会报错，你得获得x symbol的value，
这时候你就需要使用`(+ 4 ~x) 来执行了，这样你形成的表达式才是(+ 4 5) ,而不是(+ 4 x),他会报错的（在第二阶段中)
也就是宏的第一阶段具备c语言早先的文本替换功能，然后才是clojure升级版的对应地方做执行。
## 20171125 -----------------------------------
星期六, 2017/11/25


acs.d]]

** 17:57 CFX也好，Fluent也罢，无所谓强弱。天下还有大大小小的与流体有关软件那么多，比CFX／Fluent口碑好用户广的，还有starCD，NUMECA之类，所以说好坏，不靠谱，也不好评价。
关键在于有限元（FEM）和有限体积（FVM）两种方法算流体，各有优劣。
对应楼主的问题的话，CFX那是基于FEM的，Fluent是基于FVM的。Ansys收购了两家，不是哪个好哪个不好，是为了市场覆盖的需要。
FEM的优点是离散格式丰富，高阶导数的离散精度高，所以对于低速粘性流体和非牛顿流体的求解精度高。再加上有限元擅长做力学，流固边界上的离散精度也高，所以擅长处理流固耦合问题和气动噪声问题。
FVM的优点是离散格式也算丰富而且数学公式比FEM简单的多（看看研究FEM的数学家多少人，而研究FVM的数学家就没几个，从某种意义上说，FVM的数学理论比较没意思，FEM基本继承了有限差分法的发展），守恒性好，这就带来在大多数流体上的计算优势，算得快啊，少占资源啊。FVM最大的缺点，就是算的不准，没办法，少占资源算的快和计算精准本来就是矛盾的两个方面。能兼顾的反正现在还没有。
从工业应用上来说，传统的CFD商软大多采用FVM，少数高端的CFD（功能特别强的，对计算精度要求特别高的，会采用FEM）。举个例子，航空工业，CFX和NUMECA的占用率不知道是Fluent的多少倍，就是因为对计算精度有要求。
这些年，单作流体的人少了，大家还是关心多物理，尤其是流固耦合、气动噪声等等方面，这其实也催生了象COMSOL Multiphysics这样的新生力量，包括Ansys也在提Ansys Multiphysics了。 

* 20180129.org
** 10:29 Wake structure of Wind Turbines                        :紧急不重要:



** 10:31 





Graphviz提供6种布局方式:



| 布局方式 | 说明                                              |

|----------+---------------------------------------------------|

| dot      | graphviz的默认布局方式，用于画有向图              |

| neato    | spring-model(基于斥力+张力的布局)                 |

| twopi    |                                                   |

| circo    | 在使用过程中，感觉circo算法布局出来的图形最为合理 |

| fdp      |                                                   |

| Sfdp     |                                                   |



#+BEGIN_SRC dot :file 1.png :cmdline -Kdot -Tpng :exports results

  digraph G {

    rankdir=LR;

    bgcolor="#ffffff00" # RGBA (with alpha)

    node [shape=box,

          color="gray",    # node border color

          fillcolor=white, # node fill color

          style="filled,solid",

          fontname="Verdana"]

    edge [ penwidth=2, color=white ]



    node [label=""] Base

  }

  #+END_SRC

  #+RESULTS:
  [[file:1.png]]








* 20180130.org
** 15:40 perl writing                                                 :perl:

:LOGBOOK:

CLOCK: [2018-08-06 周一 11:48]--[2018-08-06 周一 11:49] =>  0:01

:END:



*** scalar context



*** list context(array)



*** hash context(hash)



*** reference



*** module



*** test



*** class



*** module starter



#+BEGIN_SRC perl

Perl Build.pl             -------------------  to create the Build script



Build                ------------------build the distribution

Build test            ------------------test past

Build dist            --------------------create tar.gz distribution with the dist action





#+END_SRC



**** PAUSE                                                          :perl:



JUEQINGSI  457866zi'mu



http://pause.perl.org/pause/query



** 15:49 org-mode relearning                                     :emacslisp:



When you open the emacs again, it will agenda the newer journal files.



#+BEGIN_SRC elisp

(setq org-agenda-files (append (file-expand-wildcards "~/.emacs.d/GTD/OrgBoss/Journal/2*") org-agenda-files))



#+END_SRC





** 16:13 org-mode key technique                                  :emacslisp:



#+BEGIN_SRC elisp

C-c a m  -------  to check the tag name ,such as perl, emacslisp

C-c /  T -------  to get the information from current file(not the same with agenda)



#+END_SRC



** 21:58 mojolicious.org                                              :perl:



http://mojolicious.org/

https://github.com/kraih/mojo Mojolicious - Perl real-time web framework



** 23:05 module-starter                                               :perl:





#+BEGIN_SRC perl

现在需要其他模块的帮助,Module::Starter::AddModule能满足这个需求.



通过CPAN安装模块Module::Starter::AddModule,安装成功后在配置文件中加入plugins一行.



author: xxx

email: xxxxxx@163.com

builder: Module::Build

verbose: 1

plugins: Module::Starter::AddModule



  



现在使用如下命令添加新模块



$ module-starter --module=Dog,Sheep --distro=ANIMALS



   

module-starter --module=Web::Dog, Web::Fox --distro=Animals







如果工作目录在ANIMALS目录中,修改参数--distro=. 

其中dot 标识的是当前目录的意思。



#+END_SRC



#+BEGIN_SRC shell

E:\PERL_HOME\Animal>tree /f

文件夹 PATH 列表

卷序列号为 22BF-83A9

E:.

│  Animal-0.01.tar.gz

│  Build

│  Build.bat

│  Build.PL

│  Changes

│  MANIFEST

│  META.json

│  META.yml

│  MYMETA.json

│  MYMETA.yml

│  README

│

├─blib

│  ├─arch

│  └─lib

│      │  Animal.pm

│      │  Duck.pm

│      │  Fox.pm

│      │  Horse.pm

│      │  Sheep.pm

│      │

│      └─Web

│              Duck.pm

│              Fox.pm

│

├─lib

│  │  Animal.pm

│  │  Duck.pm

│  │  Fox.pm

│  │  Horse.pm

│  │  Sheep.pm

│  │

│  └─Web

│          Duck.pm

│          Fox.pm

│

├─t

│      00-load.t

│      manifest.t

│      pod-coverage.t

│      pod.t

│

├─xt

│      boilerplate.t

│

└─_build

        auto_features

        build_params

        cleanup

        config_data

        features

        magicnum

        notes

        prereqs

        runtime_params





#+END_SRC

* 20180131.org
** 08:50 perl oo has function                                         :perl:



has是perl oo 模块moose moo等的函数，用于构建对象属性的

has是一个perl面向对象的一个比较习惯的用法，用来定义对象的属性

但这个并不是官方的 只是一些第三方框架设计的



** 09:00 oracle安装                                                 :Oracle:



	1. 安装企业版3.27  字符集Unicode(Al32UTF8   口令自己设置

	2. 需要解密HR 和Scoott两个数据库

	3. cmd运行  sqlplus HR/123 或者sqlplus scott/123 是否进入

	4. OracleServiceORCL是主服务，不能关掉，其他均可停掉，然后把启动类型从自动改为手动即可

s使用SQLServer需要打开TNSLinstener服务，否则打不开





** 09:03 oracle常用命令                                             :Oracle:



Sqlplus username/password 登陆



Desc tablename 查看表结构



Host cls 清屏



Col tname for a15 (15个空格 相隔，print format  设置列宽度  tname表示列名，字段名，每个字段都可以设置的，然后for代表format意思，a代表一个字符，15代表15个字符   为了显示更加好看）

设置行宽  set linesize 400;

           

Col tname for 99999 设置为默认。。。



Set pagesize 20

/ 表示执行上一条命令

@文件名  执行sql文件（文件名前面加上一个@即可 类似mysql的source）



** 09:03 oracle卸载                                                 :Oracle:



1. 停止Oracle服务相关

2. 运行安装目录下的deinstall.bat

3. 删除Oracle的注册表

4. 环境变量删除



** 09:08 oracle解锁用户                                             :Oracle:



2 解锁用户scott



alter user scott account unlock



3 一般解锁后同时修改密码



alter user scott identified by 123



** 09:15 oracle orcl user                                           :Oracle:



usertale: orcl

管理口令  :  root(密码过于简单会警告 忽略即可)



** 10:08 everything and totalCMD 配置                                 :芝麻:



everything:

#+BEGIN_SRC markdown

1. 工具---选项---上下文菜单

2. 打开(文件夹):

  $exec("d:\totalcmd\TOTALCMD.EXE" /O /P=L /L="%1")



3. 打开路径

  $exec("d:\totalcmd\TOTALCMD.EXE" /O /P=L /L="%1")

/O  如果存在进程则激活不存在则创建进程

/P=L 激活TC的左侧列表

/L= 设置左侧的路径

#+END_SRC



TotalCmd:



注意配合快速搜索 Ctrl+Alt+字母

#+BEGIN_SRC markdown

1. 配置---选项--其他

2. Shift+F 快捷键--- em_usercmd1

命令: D:\Program Files (x86)\Everything\Everything.exe

参数：-search "%P" 

#+END_SRC







** 10:18 gc                                                           :java:



不过go的gc算法还比不上jvm



* 20180201.org
** 00:38 what a techniqe needs                                        :大山:





1. java



downdload java , JAVA_HOME=G:\JAVA\jdk1.8.0_161

Path=%JAVA_HOME%\bin



2. MAven



MAVEN_HOME = G:\JAVA\apache-maven-3.3.9

PATH=%MAVEN_HOME%\bind



Test it 





#+BEGIN_SRC sh

  mvn -v

#+END_SRC



3. NEXUS



edit wrapper.conf



G:\JAVA\NEXUS_BUNDLE\nexus-2.14.1-01\bin\jsw\conf\wrapper.conf





#+BEGIN_SRC java

  wrapper.java.command=G:\JAVA\jdk1.8.0_161\bin\java



#+END_SRC



update to your java.exe path.







#+BEGIN_SRC sh

  ## into nexus bin

  cd G:\JAVA\NEXUS_BUNDLE\nexus-2.14.1-01\bin



  nexus install   ###add service into the system





  nexus start  ### start nexus service

#+END_SRC





4. maven setting.xml





#+BEGIN_SRC java

  <?xml version="1.0" encoding="UTF-8"?>



  <settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"

      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"

      xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">

    <localRepository>E:/JAVA/apache-maven-3.3.9/MyselfLib</localRepository>

    <pluginGroups>

        <!-- pluginGroup

       | Specifies a further group identifier to use for plugin lookup.

      <pluginGroup>com.your.plugins</pluginGroup>

      -->

    </pluginGroups>



    <servers>

      <server> 

          <id>nexus-release</id>

          <username>admin</username>

          <password>admin123</password>

      </server> 





      <server> 

          <id>nexus-snapshot</id>

          <username>admin</username>

          <password>admin123</password>

      </server> 





      <server> 

          <id>nexus</id>

          <username>admin</username>

          <password>admin123</password>

      </server> 

    </servers>



  <mirrors>

  <!-- <mirror> -->

      <!-- <id>nexus</id> -->

      <!-- <mirrorOf>*</mirrorOf> -->

      <!-- <url>http://localhost:8089/nexus/content/groups/public/</url> -->

  <!-- </mirror> -->

       <mirror> 

         <id>nexus-releases</id> 

         <mirrorOf>*</mirrorOf> 

         <url>http://localhost:8089/nexus/content/groups/public</url> 

       </mirror>

       <mirror> 

         <id>nexus-snapshots</id> 

         <mirrorOf>*</mirrorOf> 

         <url>http://localhost:8089/nexus/content/groups/public-snapshots</url> 

       </mirror> 

  </mirrors>

  <profiles>

  <profile>

      <id>nexus</id>

      <repositories>

          <repository>

              <id>nexus-releases</id>

              <url>http://nexus-releases</url>

              <releases><enabled>true</enabled></releases>

              <snapshots><enabled>true</enabled></snapshots>

          </repository>

          <repository>

              <id>nexus-snapshots</id>

              <url>http://nexus-snapshots</url>

              <releases><enabled>true</enabled></releases>

              <snapshots><enabled>true</enabled></snapshots>

          </repository>



      </repositories>

      <pluginRepositories>

          <pluginRepository>

              <id>nexus-releases</id>

              <url>http://nexus-releases</url>

              <releases><enabled>true</enabled></releases>

              <snapshots><enabled>true</enabled></snapshots>

          </pluginRepository>

          <pluginRepository>

              <id>nexus-snapshots</id>

              <url>http://nexus-snapshots</url>

              <releases><enabled>true</enabled></releases>

              <snapshots><enabled>true</enabled></snapshots>

          </pluginRepository>

      </pluginRepositories>

  </profile>

  </profiles>

  <activeProfiles>

      <activeProfile>nexus</activeProfile>

  </activeProfiles>





  </settings>





#+END_SRC









** 00:49 git something to talk about                                  :地球:





config in your git-bash.exe 



#+BEGIN_SRC sh

  git config --user.name "Ye Zhaoliang" 

  git config --user.email "zhaoturkkey@163.com" 



  ssh-keygen -t rsa -C "zhaoturkkey@163.com" 

    

  eval "$(ssh-agent -s)" # Agent pid 59566 ssh-add ~/.ssh/id_rsa 

  sudo apt-get install xclip # Downloads and installs xclip. If you don't have `apt-get`, you might need to use another installer (like `yum`) xclip -sel clip < ~/.ssh/id_rsa.pub # Copies the contents of the id_rsa.pub file to your clipboard

  粘帖到你的github账户即可 

#+END_SRC





** 17:57 VMware screen go black                                      :Linux:





#+BEGIN_SRC sh



  1、以管理员身份运行cmd.exe 命令提示符 ；



  2、依次执行下面5个命令：



  netsh winsock reset



  net stop VMAuthdService



  net start VMAuthdService



  net stop VMwareHostd



  net start VMwareHostd



  操作完成后直接运行VMware Workstation 14一般即可解决黑屏的问题！

#+END_SRC





** 20:58 Ubuntu17.04开通22端口                                  :Linux:芝麻:





#+BEGIN_SRC sh

  apt-get install openssh-server openssh-client



  netstat -ntl ### check 22 is open?

#+END_SRC







** 21:07 Xshell connect to Vmware                                    :Linux:





#+BEGIN_SRC sh

  VMware下Ubuntu虚拟机NAT模式连接Xshell



  1.Edit->Virtual NetWork Editor 

  2.选择NAT->NAT Settings 配置端口映射关系 很重要！  



  Host port： 真实主机 一般是Windows端口号， 端口号只要是在1024~65535 之间都行。 这里分配一个2225



  Type：协议类型 选择 TCP



  Virtual machine IP Address：虚拟机的ip地址，这里当然是Ubuntu的ip 192.168.80.128(ifconfig : inet)



  Virtual machine port：虚拟机的端口号， 一般ssh服务默认端口 22， 这里不改



  3. apt-get install openssh-server openssh-client  open the port 22.



  4. open xshell or putty

   input the 127.0.0.1:2225(local vmnet8    real port 2225)

  

   身份输入 用户名+密码 okay

#+END_SRC





** 21:29 vim windows configuration update                            :Linux:







#+BEGIN_SRC sh

  C:\Users\yzl\.vim\vimrc>git push origin develop

  Counting objects: 8, done.

  Delta compression using up to 4 threads.

  Compressing objects: 100% (7/7), done.

  Writing objects: 100% (8/8), 9.39 KiB | 2.35 MiB/s, done.

  Total 8 (delta 5), reused 0 (delta 0)

  remote: Resolving deltas: 100% (5/5), completed with 5 local objects.

  To https://github.com/jueqingsizhe66/windowVimYe.git

     cdec209..12eb7d3  develop -> develop









  C:\Users\yzl\.vim\vimrc>git log --all

  commit 12eb7d3055a1a96ebd761bd7481ade1eda3ded6f (HEAD -> develop, origin/develop)

  Author: Ye Zhaoliang <zhaoturkkey@163.com>

  Date:   Thu Feb 1 21:28:14 2018 +0800



      2018-2-1 new colorscheme



  commit cdec20914a05f6010fe932b95cfb19abf37bfa58

  Author: Ye Zhaoliang <zhaoturkkey@163.com>

  Date:   Mon Aug 21 18:37:37 2017 +0800



      add ctags.exe es.exe

#+END_SRC





** 21:37 xshell use lrzsz to transfer files to ubunwtu/redhat





#+BEGIN_SRC sh

  apt-get install lrzsz



  then you can use  rz in the xshell or putty to new a window to transfer files





  or you can use xftp(use your school email to register valid codes)

#+END_SRC





** 23:50 vim edit todo.txt                                           :Linux:





#+BEGIN_SRC sh

  Sorting tasks:

  <localleader>s Sort the file

  <localleader>s+ Sort the file on +Projects

  <localleader>s@ Sort the file on @Contexts

  <localleader>sd Sort the file on dates

  <localleader>sdd Sort the file on due dates

  Edit priority:

  <localleader>j Decrease the priority of the current line

  <localleader>k Increase the priority of the current line

  <localleader>a Add the priority (A) to the current line

  <localleader>b Add the priority (B) to the current line

  <localleader>c Add the priority (C) to the current line

  Date:

  <localleader>d Set current task's creation date to the current date

  date<tab> (Insert mode) Insert the current date

  Mark as done:

  <localleader>x Mark current task as done

  <localleader>X Mark all tasks as done

  <localleader>D Move completed tasks to done.txt

#+END_SRC



* 20180202.org
** 20:25 粥和稀饭的区别                                              :@Home:



稀饭比粥水多，请人吃稀饭，自己吃就煮粥。 



1、稠稀不同。

粥比稀饭稠一点。稀饭在吃的时候还能见着米粒哟，粥就不能。 

2、需要煮的时间不同。

在做法上粥的时间比稀饭煲的长一些。

3、煮粥时水比煮稀饭少一些。

稀饭：米和水的比例是1:5。



粥：米和水的比例是1:3。



** 20:32 xshell sz 和rz的区别                                        :Linux:



sz filename|direname  需要添加文件名，该文件在你的服务器上，然后会提示选择客户机上的路径，完成从服务器下载数据需要



rz 不需要添加文件名，直接在客户机选取一文件，默认上传到Home目录下

[[file:20180201::*21:37%20xshell%20use%20lrzsz%20to%20transfer%20files%20to%20ubunwtu/redhat][21:37 xshell use lrzsz to transfer files to ubunwtu/redhat]]



** 20:56 git common command                                            :git:





#+BEGIN_SRC sh

  ubuntu for me



  git init

  git --global user.name "Ye Zhaoliang"

  git --global user.email "977962587@qq.com"

  cat .git/config

  cat .git/HEAD

  cat .git/refs/heads/master

  cat .git/refs/tags/v1.0

  .gitconfig  -----在$HOME目录下

  git config user.name 'Ye Zhaoliangpiaoliang'

  $ git config user.email '977962857@qq.com'

  ls -l .git

  ls -l .git/objects/

   find  .git/objects/ -type f

  ls -l .git/refs/tags/

  git checkout -f HEAD

  git hash-object main.c

  git show 0b4e

  git show 80ac

  git cat-file -t ec87

  git cat-file -t 80ac

   git ls-tree 80ac

  git show -s --pretty=raw ec87

  git tag v1.0

  git tag -a version1.0 -m "this is the first stable version"

  find .git/objects/ -type f |wc -l

  cat .git/refs/tags/version1.0

   git archive --format=tar --prefix=ruby/ v1.0 |gzip > d:/temp/ruby1.0.tar.gz



  git checkout v1.0

  git branch testing

  git branch

  git checkout testing

   git checkout -b testing1

  git branch -D testing1

  原来是可以在那个~/.bashrc  添加 alias ls="ls --show-control-chars --color=auto"





  我现在知道我是用help.github.com/linux-set-up-git/

  这边的设置方法进行git设置

  sudo apt-get install git-core git-gui git-doc

  git gui



  不同的操作系统具有不同的ssh key所以你需要进行设置 在每一个操作系统上 即使你已经在windows创建了一个git ssh用你的一个邮箱 

  在ubuntu 中一般是存在 cd ~/.ssh的

  （

  $ ls

  1步

  cd ~/.ssh

  $ mkdir key_backup

  $ cp id_rsa* key_backup

  $ rm id_rsa*） 如果没有跳过这一步

  2步

  ssh-keygen -t rsa -C "your_email@youremail.com"

  3步



  lisp@lisp-Compaq-Presario-CQ40-Notebook-PC:~/.ssh$ ssh-keygen -t rsa -C "zhaoturkkey@163.com"

  Generating public/private rsa key pair.

  Enter file in which to save the key (/home/lisp/.ssh/id_rsa): 

  Enter passphrase (empty for no passphrase): 

  Enter same passphrase again: 

  Your identification has been saved in /home/lisp/.ssh/id_rsa.

  Your public key has been saved in /home/lisp/.ssh/id_rsa.pub.

  The key fingerprint is:

  29:20:36:ec:6b:55:36:11:bb:df:56:46:24:13:46:23 zhaoturkkey@163.com

  The key's randomart image is:

  +--[ RSA 2048]----+

  |      o.E.B..    |

  | .     o o =     |

  |  = . =     .    |

  | o o + o . .     |

  |  . . o S   o    |

  |   o   o . o     |

  |  o     . o      |

  | .       .       |

  |                 |

  +-----------------+



  4步



  lisp@lisp-Compaq-Presario-CQ40-Notebook-PC:~/.ssh$ ls

  id_rsa  id_rsa.pub  key_backup  known_hosts

  lisp@lisp-Compaq-Presario-CQ40-Notebook-PC:~/.ssh$ gedit id_rsa.pub 



  把里面的内容挖到add key 肿  这样就设置完了远程的git



  zhaoturkkey@163.com (be:ca:b2:93:69:80:bc:95:d7:cf:63:1c:cd:82:58:68) 

  上面是我的windows

  zhaoturkkey@163.com (29:20:36:ec:6b:55:36:11:bb:df:56:46:24:13:46:23) 

  上面这个是我的ubuntu  虽然都是统一邮箱 但是操作系统不同



  但是我发先这样是不行的  必须是不同的邮箱  相同的邮箱不好设置 总是出现故障

  Are you sure you want to continue connecting (yes/no)? yes

  Warning: Permanently added 'github.com,207.97.227.239' (RSA) to the list of known hosts.

  Permission denied (publickey).



  ---------------------------------------------

  原来还会有这种错误

  Issues when using sudo



  You shouldn’t run sudo git unless you have a very good reason. If you don’t know if you have a good reason to use sudo, it’s likely that you do not have one.



  If you are using sudo with git commands (e.g. using sudo git clone because you are deploying to a root-owned folder), ensure that you also generated the key using sudo. Otherwise, you will have generated a key for your current user, but when you are doing sudo git, you are actually the root user – thus, the keys will not match.



  Simply put, if you are using sudo git, then also use sudo ssh-keygen.



  从上面的总结我们知道  ubuntu肯定要求你用sudo来执行ssh -T但是你根本不是用sudo用户创建了ssh-keygen -t rsa -C "" 你是用lisp

  所以肯定最后结果是冲突：

  -----------------------------------解决方法

  lisp@lisp-Compaq-Presario-CQ40-Notebook-PC:~/.ssh$ ssh-add ~/.ssh/id_rsa

  Enter passphrase for /home/lisp/.ssh/id_rsa: 

  Identity added: /home/lisp/.ssh/id_rsa (/home/lisp/.ssh/id_rsa)

  lisp@lisp-Compaq-Presario-CQ40-Notebook-PC:~/.ssh$ ssh -T git@github.com

  Hi jueqingsizhe66! You've successfully authenticated, but GitHub does not provide shell access.



  lisp@lisp-Compaq-Presario-CQ40-Notebook-PC:~/.ssh$ git config --global user.name "Ye Zhaoliang"

  lisp@lisp-Compaq-Presario-CQ40-Notebook-PC:~/.ssh$ git config --global user.email "jueqingsizhe66@gmail.com"



  ---------------------------------------------

  上部的结果是在你的～主目录下新建了一个 .gitconfig的一个全局git配置信息

  原本如果没有这句话你是不会看到.gitconfig   即使你用 ls -la也是没用





  cd (git linux)

  cd "git linux"--------------------》最好是这样 不会出现问题



#+END_SRC





** 21:22 emacs基本项目命令 for clojure                             :clojure:





#+BEGIN_SRC clojure



      ctrl-x ctrl-f 打开文件

      M-x cider-jack-in 打开cider调用lein repl

      ctrl-c ctrl-k 在cider接口编译clojure源文件(ctrl-c ctrl-e可以对新增部分进行编译）

      Ctrl-c Esc n 切换命名空间

      M-x packages-list-package ,然后U,最后x, 更新emacs插件包



#+END_SRC



* 20180203.org
** 09:45 Match with $#-                                               :perl:





#+BEGIN_SRC perl



  $x = "Mmm...donut, thought Homer";

  $x =~ /^(Mmm|Yech)\.\.\.(donut|peas)/;    # matches

  print "Match $#- positions\n";



  # foreach $exp (1..$#-) {

  #     print "Match $exp: '${$exp}' at position ($-[$exp],$+[$exp])\n";

  # }

  #



  foreach my $expr ( 1 .. $#- ) {

      printf "Match %s: '%s' at position (%d, %d)\n",

        $expr, substr( $x, $-[$expr], $+[$expr] - $-[$expr] ),   # fixes the error

        $-[$expr], $+[$expr];

  }



  if ( my @matches = $x =~ /^(Mmm|Yech)\.\.\.(donut|peas)/ ) {

      unshift @matches => undef;

      foreach my $expr ( 1 .. $#- ) {

          print

            "Match $expr: '$matches[$expr]' at position ($-[$expr],$+[$expr])\n";

      }

  }



  ""

#+END_SRC







** 09:52 Perl [] and {} , important {}                                :perl:



标量rerence的运用



#+BEGIN_SRC perl

  my $x;

  my $exp;

  for ( my $i = 0 ; $i < 10 ; $i++ ) {

      print "\$$i = $i\n";

  }



  for my $i ( 1 .. 10 ) {

      print "$i\n";

  }



  my $aref = [

      [ "fred",   "barney", "pebbles", "bambam", "dino", ],

      [ "homer",  "bart",   "marge",   "maggie", ],

      [ "george", "jane",   "elroy",   "judy", ],

  ];



  print $aref->[2]->[2], "\n";

  print $aref->[2][2], "\n";





  $aref = [3,4,5,6]; ## autovivification

  @arr = (1,2,3,4);

  $aref=\@arr;

  $aref = [@arr]



  $href= { 1=> 'one'

               2=>'two'}; ### autovivification

  @array = @{$aref}

  %hash =  %{$href}

  @keys  =  keys %{$href};



  Instead of ${$aref}[0] -----> $aref->[0]

             ${$href}{$key} --> $href0>{$key}

#+END_SRC





** 09:59 perl statistics                                              :perl:





#+BEGIN_SRC perl

  use strict;

  use warnings;

  use utf8;

  use Data::Dumper;



  my	$STATI_file_name = 'statistic.dat';		# input file name



  my	%total_bytes;

  open  my $STATI, '<', $STATI_file_name

      or die  "$0 : failed to open  input file '$STATI_file_name' : $!\n";





  while ( <$STATI> ) {



      my  ($source,$destination,$bytes)   = split;##按照空格划分

      $total_bytes{$source}{$destination}+=$bytes;## 累加

  }



  print Dumper(\%total_bytes),"\n";







  foreach my $source ( sort keys %total_bytes ) {



      foreach my $destination (sort keys %{$total_bytes{$source}} ) {

          print "$source => $destination:", "$total_bytes{$source}{$destination} bytes \n";

      }

  }

  close  $STATI

      or warn "$0 : failed to close input file '$STATI_file_name' : $!\n";





#+END_SRC



#+RESULTS:





statistics.dat------------------------->





#+BEGIN_SRC org

  professor.hut gilligan.crew.hut 1250

  professor.hut lovey.howell.hut 910

  thurston.howell.hut lovey.howell.hut 1250

  professor.hut lovey.howell.hut 450

  professor.hut laser3.copyroom.hut 2924

  ginger.girl.hut professor.hut 1218

  ginger.girl.hut maryann.girl.hut 199



#+END_SRC





** 10:02 perl sort                                                    :perl:





#+BEGIN_SRC perl



  ##alphabetically

  my @nums = sort qw/1 2 11 22 10 100/;

  print "Empty: @nums\n";



  my @nums2 = sort { $b cmp $a } qw/1 2 11 22 10 100/;

  print "CMP: @nums2\n";



  my @nums3 = sort { $a cmp $b } qw/1 2 11 22 10 100/;

  print "CMP: @nums3\n";



  ## numerically

  my @nums1 = sort { $a <=> $b } qw/1 2 11 22 10 100/;

  print "Numerically: @nums1\n";



  ## numerically2



  my @num2 = sort compare qw/1 2 11 22 10 100/;

  print "Subroutine: @num2\n";



  sub compare {

      if ( $a < $b ) {

          return -1;

      }

      elsif ( $a == $b ) {

          return 0;

      }

      else {

          return 1;

      }



  }



  ## objectically



#+END_SRC





** 10:04 access people with perl(first cols, then get data from files) :perl:





#+BEGIN_SRC perl

  use strict;

  use warnings;

  use utf8;



  my @records;

  my @cols = ( 's_name', 'f_name', 'job' ); ##列名



  my $FILE_file_name = 'people.dat';    # output file name



  open my $FILE, '<', $FILE_file_name

    or die "$0 : failed to open  output file '$FILE_file_name' : $!\n";

  while (<$FILE>) {

      chomp;

      my %rec;

      @rec{@cols} = split /,/;## split with comma(csv file format)  hash特殊用法

      push @records, \%rec; ### push into records

  }



  close $FILE

    or warn "$0 : failed to close output file '$FILE_file_name' : $!\n";



  foreach (@records) {

      print "$_->{f_name} ", "$_->{s_name} ", "is a $_->{job}\n";

  }





#+END_SRC







#+BEGIN_SRC people.dat

  Jones, Martha, UNIT

   Harkness,JACK,Torchwood

   Smith,Sarah Jane, Journalist



#+END_SRC



** 10:07 grade statistics                                              :perl:



grade tables:





#+BEGIN_SRC org

  Ben 76

  Clementine 49

  Norm 66

  Chris 25

  Doug 35

  Carol 35

  Ben 12

  Clementine 02

  Norm 65





  Norm 33





  Funny 34



#+END_SRC







#+BEGIN_SRC perl



  use strict;

  use warnings;

  use utf8;



  my  $student;

  my  $grade;



  my	%grades;



  my  $scores   = 0;

  my  $total   = 0;

  my  @gradeOf  ;

  my  $line;

  my  $average;





  my	$GRADES_file_name = 'grade.dat';		# input file name



  open  my $FG, '<', $GRADES_file_name

      or die  "$0 : failed to open  input file '$GRADES_file_name' : $!\n";





  while ( $line = <$FG>) {

      next if $line =~ m/^\s*$/g; ### 空行跳出 不进行parse

      chomp($line); ## delete the return symbol

      ($student, $grade) = split(" ", $line);

      $grades{$student} .= $grade . " ";

  }





  foreach my $line ( sort keys %grades ) {

      print "$line => $grades{$line}\n";

  }



  foreach my $student1 ( sort keys %grades  ) {

      my  $scores   = 0;

      my  $total   = 0;

      my  @gradeOf   = split(" ",$grades{$student1});





      foreach my $grade ( @gradeOf ) {

            $total +=$grade;

            $scores++;

      }

      $average = $total / $scores;

      print "$student1: $grades{$student1} \t Average: $average\n";

  }



  close  $FG

      or warn "$0 : failed to close input file '$GRADES_file_name' : $!\n";



#+END_SRC







** 11:17 git stash                                                     :git:







#+BEGIN_SRC sh

  git stash

        git stash save newStashName  也可以取个名字



  git stash list



  git stash apply  从栈顶弹出，（堆栈中依然存在）



  git stash pop  从堆栈中弹出stash（堆栈中不存在了）





  git stash clear  删除所有



  git stash drop stashname  删除制定的stash

#+END_SRC



** 11:27 网站动静分离 (风力机模拟动静分离）                   :EnglishPaper:



静态模拟



动态模拟（动态是指运动的动态特性）



** 11:29 网站四个问题



1. 大访问量

   1. 负载均衡(分流,让每个服务器负载更低，更均衡）

      1. Cisco以太网通道

      2. Windows NLB技术

      3. Linux LVS技术

      4. F5等负载均衡器

   2. 冗余技术(两种技术独立存在）（数据到达某台服务器，服务器突然断电，宕机，于是需要另外一台服务器（备份机位客户提供服务器）

      冗余的目的是防止单点宕机，让客户感觉不到服务器出现问题

2. 大数据量

3. 网站加速(CDN加速）

4. 服务器监控)



** 12:22 rancher完整容器管理平台                                    :Docker:



https://github.com/rancher/rancher



** 13:09 perl分级重组数据                                             :perl:



原始数据



#+BEGIN_SRC org

  风力机

      PhaseVI

      Tj

      Nrel 5MW

      NK 500

  组件

      机舱

      整流罩

      轮毂

      叶片

          翼型

      偏航轴承

      变桨器

      发电机

      制动机

  语言

      c

      perl

      english

      deustch

      java

      matlab

      python

      scheme

      drracket

      lisp

      ruby

      汉语

  数学

      基础数学

      线性代数

      高等代数

      概率学

      矩阵论

      数值分析

      模糊数学

      属性约简



#+END_SRC









#+BEGIN_SRC perl

  use strict;

  use warnings;

  use utf8;

  use Data::Dumper;



  #binmode(STDIN,":encoding(gb2312)");

  #binmode(STDOUT,":encoding(gb2312)");



  binmode(STDIN,":encoding(gbk)");

  binmode(STDOUT,":encoding(gbk)");





  my %provisions;

  my  $person;





  #my	$FEIJI_file_name = 'feiji.txt';		# input file name

  my	$FEIJI_file_name = 'skewdata.txt';		# input file name

  #my	$FEIJI_file_name = 'skewEnglish.txt';		# input file name



  open  my $FEIJI, '<', $FEIJI_file_name

      or die  "$0 : failed to open  input file '$FEIJI_file_name' : $!\n";



  binmode($FEIJI,":encoding(gb2312)");



  while ( <$FEIJI> ) {

  #while ( <> ) {

      # print "Big: $_" if /^(\S.*)/;

      # print "Small $1\n" if /^\s+(\S.*)/;





      if ( /^(\S.*)/ ) {

          $person=$1;

      }

      elsif (/\G(^\s{4}(\S.*))/xgcm) {

          die 'No Person yet!' unless defined $person;

          push @{$provisions{$person}},$1;

      }

      elsif ( /\G(^\s{8}(\S.*))/xgcm ) {

          print "Ok : $1\n";

      }

      else {

          die  "I don't understand: $_";

      }

      #

      # if ( /^(\S.*)/ ) { ## big classification

      #     $person = $1;

      #     print "\$person = $person\n";

      #     ## autovivify

      #     ##$provsions{$person} = []  unless $provsions{$person}; ## did not exist ,so create it

      # }

      # elsif ( /^\s+(\S.*) /) {

      #     die 'No person yet!' unless defined $person;

      #     push @{$provisions{$person}}, $1;

      # }

      # else {

      #     die "I don't understand : $_";

      # }

  }



  close  $FEIJI

      or warn "$0 : failed to close input file '$FEIJI_file_name' : $!\n";





  foreach my $item ( keys %provisions ) {

      print "Big :: $item\n";





      foreach my $little ( @{$provisions{$item}}  ) {

           print "Small $little\n";

      }

      # foreach my $little ( @$item ) {

      #     print "Small $little\n";

      # }

  }



  # print Dumper(\%provisions),"\n";



#+END_SRC



** 13:16 perl替换(汽车到风力机)                                       :perl:



原始文件





#+BEGIN_SRC org

  汽车在高速行驶时，根据空气动力学原理，在行驶过程中会遇到空气阻力，围绕汽车重心同时产生纵向、侧向和垂直上升的三个方向的空气动力量，其中纵向为空气阻力。

  为了有效地减少并克服汽车高速行驶时空气阻力的影响，人们设计使用了汽车尾翼，其作用就是使空气对汽车产生第四种作用力，即产生较大的对地面的附着力，它能抵消一部分升力，有效控制汽车上浮，使风阻系数相应减小，使汽车能紧贴在道路地面行驶，从而提高行驶的稳定性能。



  工作原理

  汽车尾翼作用

  汽车尾翼的作用，就是在汽车高速行驶时，使空气阻力形成一个向下的压力，尽量抵消升力，有效控制气流下压力，使风阻系数相应减小，增加汽车的高速行驶稳定性；由于尾翼能降低汽车的空气阻力，因此高速汽车加装尾翼对于节省燃油也有一定的帮助；同时也使汽车的外形更加美观，起到一定的装饰作用。

  汽车尾翼分类

  玻璃钢尾翼：这类尾翼造型多样，有鸭舌状的、机翼状的，也有直板式的．比较好做造型，不过玻璃钢材质比较脆，韧性和刚性都较差，价格比较便宜。

  铝合金尾翼：这类尾翼导流和散热效果不错，而且价格适中，不过重量要比其他材质的尾翼稍重些。

  碳纤维尾翼：碳纤维尾翼刚性和耐久性都非常好．不仅重量轻而且也是最美观的一种尾翼．现在广泛被F1赛车采用不过价格比较昂贵。[1] 



#+END_SRC





打开中文文件，得用encoding一下





#+BEGIN_SRC perl



  use strict;

  use warnings;

  use utf8;



  binmode(STDIN,":encoding(gb2312)");

  binmode(STDOUT,":encoding(gb2312)");







  open(FEIJI,"feiji.txt") or die "can't open the file \n";

  my $car ="尾翼";



  binmode(FEIJI,":encoding(gb2312)");



  my $count=1;

  while( <FEIJI>){





      s/汽车/风力机/g;

      print;

  }



#+END_SRC



** 13:20 perl sqlite                                           :sqlite:perl:





#+BEGIN_SRC perl

  #

  #C:\Users\YeZhao\perl>perl sqliteLink.pl

  #ADO

  #CSV

  #DBM

  #ExampleP

  #File

  #Gofer

  #ODBC

  #Oracle

  #Pg

  #Proxy

  #SQLite

  #Sponge

  #mysql



  use strict;

  use warnings;

  use utf8;



  use DBI;

  my  @drivers   = DBI->available_drivers();

  print join("\n",@drivers);

  print("\n");



  ## 公共参数

  my  $driver="SQLite";

  my  $db_name="generateSqlite.db";

  # sqlite have no username and password

  my  $username="";

  my  $password   = "";



  my  $connection=getConnection($driver,$db_name,$username,$password);



  my  $tableName="NETWORK";





  ## run only once

  #createDatabaseSource($connection,$tableName);



  queryDB($connection,$tableName);

  #updateCPULoadWithOS($connection,$tableName,'CentOS 7',20);

  #deleteWithID($connection,$tableName,2);

  closeConnection($connection);



  ## 创建并获得数据库连接【2个动作】

  sub getConnection{

      my ($driver,$db_name,$username,$password)  = @_;#$@;

      #print "$db_name\n";

      my $dbd="DBI:$driver:dbname=$db_name";

      my $dbh =DBI->connect($dbd, $username, $password);

      return $dbh;

  }



  ## 创建表

  sub createTable{

      my ($connection,$tableName) = @_;

      my $stmt = qq(CREATE TABLE IF NOT EXISTS ).$tableName.qq(

      (ID INTEGER PRIMARY KEY AUTOINCREMENT,

      HOSTNAME TEXT NOT NULL,

      IPADDRESS INT NOT NULL,

      OS CHAR(50),

      CPULOAD REAL););

      my $ret = $connection->do($stmt);

      if($ret <0){

      print STDERR $DBI::errstr;

      }else{

      print STDERR "Table created successfully\n";

  }

  }





  ## insert data

  sub insertIntoTable{

      my ($connection,$tableName,$HOSTNAME,$IPADDRESS,$OS,$CPULOAD)= @_;

      print "$HOSTNAME, $OS, $CPULOAD\n";

      # VALUES ('xmodulo',16843009,'Ubuntu 14.10',0.0) 

      # VALUES ('bert',16843010,'CentOS 7',0.0)) 

      # VALUES ('puppy',16843011,'Ubuntu 14.10',0.0) 

      my $stmt = qq(INSERT INTO ).$tableName.qq( (HOSTNAME, IPADDRESS, OS,CPULOAD) VALUES )."('$HOSTNAME',$IPADDRESS,'$OS',$CPULOAD)";

      my  $ret = $connection->do($stmt) or die $DBI::errstr;

  }





  sub createDatabaseSource{

      my  ($connection,$tableName)   = @_;

      createTable($connection,$tableName);

      insertIntoTable($connection,$tableName,'xmoudulo',16843009,'Ubuntu15.04','0.1');

      insertIntoTable($connection,$tableName,'bert',16843010,'CentOS 7','0.3');

      insertIntoTable($connection,$tableName,'puppy',16843011,'ubuntu 17.04','0.0');



  }



  # 在表中检索行

  sub queryDB{



      my  ($connection,$tableName)   = @_;

      my $stmt = qq(SELECT id, hostname, os, cpuload from ).$tableName.";";

      my $obj = $connection->prepare($stmt);

      my $ret = $obj->execute() or die $DBI::errstr;

      if($ret <0){

          print STDERR $DBI::errstr;

      }

      while(my @row= $obj->fetchrow_array()){

          print"ID: ". $row[0]."\n";

          print"HOSTNAME: ". $row[1]."\n";

          print"OS: ". $row[2]."\n";

          print"CPULOAD: ". $row[3]."\n\n";

      }



  }





  sub queryWithOs{



  }



  ## 更新

  sub updateCPULoadWithOS{

      my  ($connection,$tableName,$OS,$CPULOAD)   = @_;

      my $stmt = "UPDATE $tableName set CPULOAD =".$CPULOAD." where OS='$OS';";

      print "what:$stmt\n";

      #my $ret = $$connection->do($stmt) or die $DBI::errstr;

      my $ret = $connection->do($stmt) or die $DBI::errstr;

      print "what:$ret\n";

      if( $ret <0){

          print STDERR $DBI::errstr;

      }else{

          print STDERR "A total of $ret rows updated\n";

      }

  }



  ## 删除

  sub deleteWithID{



      my ($connection,$tableName,$ID)=@_;

      my $stmt = qq(DELETE from ).$tableName.qq( where ID=).$ID.";";

      my $ret = $connection->do($stmt) or die $DBI::errstr;

      if($ret <0){

          print STDERR $DBI::errstr;

      }else{

          print STDERR "A total of $ret rows deleted\n";

      }

  }



  sub closeConnection{

      my  $connection   = @_;

      $connection->disconnect();

      print STDERR "Exit current database\n";

  }



#+END_SRC





** 13:37 perl查看模块 





#+BEGIN_SRC perl

  use strict;

  use warnings;

  use utf8;

  use ExtUtils::Installed;



  my $inst = ExtUtils::Installed->new();



  my @modules = $inst->modules();



  foreach  (@modules) {

          my  $ver = $inst->version($_) || "???";

          printf("%-22s -Version- %-22s\n", $_, $ver);

  }

#  exit;



#+END_SRC



#+RESULTS:

* 20180204.org
** 10:22 perl context                                                 :perl:



perl 首先教会你的context(Scaler ($ ---s)    Array (@----a  list context)

hash(%---key/value)



hash体现的是所属关系 

    我的老婆  The wife of cleaver(所有格's  of两种形式）

    hash表现是一种所有格关系



双引号环境，在perl中成为代换环境（变量可替换）

单引号环境为非替换环境



#+BEGIN_SRC perl



  wife of chen

  $Wife{'chen'} = 'Dina';

  $Wife{'chen'} = ['Dina','Fanha', 'lena'];  ## 有一堆老婆



  $kids_of_wife{"jacob"}=

  { 

      "leah" => ["Reuben", "Simeon","Levi", "JUdah", "Issachar"],

      "Rachel"=> ["Joseph","Benjamin"],

      "Bilhah"=> ["Dan", "Naphral"],

      "Ziplph"=>["God","asher"]

  };



  #Jacob的妻子有4个 Leah,Rachel,Bilhah,Ziplph; 其中Leah有5个孩子。。。

  # Perl可以用简单的标量来代表复杂的数据结构

#+END_SRC



@理解，一般表示一段时间，一部分

perl擅长文字处理,python擅长数值处理

perl的符号表被称为包(package),包含动词和名次

<2018-08-06 12:02> 再次阅读觉得不错

** 10:33 perl 项的概念                                                :perl:



perl里项的优先级最高，包括变量，引起和类似引起的操作符，大多数元括弧（或方括弧，或大括弧）内的表达式，以及所有器参数被

圆括弧包围的函数



列表操作符（如print,sprintf)

<"*.xml">               == glob("*.xml")             == glob "*.xml";

尖角操作符                  函数                          操作符

非标量和文件操作符





** 13:18 长期跟踪CFD流沙                                               :CFD:



http://blog.sina.com.cn/s/articlelist_1503498154_0_1.html



** 15:12 Your value                                                   :地球:





#+BEGIN_SRC org

  我一直相信你能够做出什么东西，决定着你能不能给人录用



  你做的东西，首先是你能够知道它是什么，并且知道为什么要做什么（必须得知道自己研究的目的才可以做研究）



  必须规划好你要做什么（前提是知道他是什么（概念）和为什么（背景--延伸到意义），才能指导你要去做这件事情）

  你的规划由你来干，你是你自己的







  光是一张饼抹平了，只是做一个太浅的工作，在现在中国不好混。光做商软软件CFD还是有局限性，你也得能够分析出别人

  不可能分析的东西



  OpenFoam可适当加上sowfar单机和风场的模拟，能够让你在面试场脱颖而出。

#+END_SRC





** 15:19 天之道                                                       :地球:





#+BEGIN_SRC org

  天之道,其犹张弓与?高者抑之,下者举之,有余者损之,不足者补之.

  天之道,损有余而补不足.人之道,则不然,损不足以奉有余.

  孰能有余以奉天下,唯有道者.

  是以圣人为而不恃,功成而不处,其不欲见贤.

  译文：

  天道不就象拉弓射箭吗?目标高了,就把它压低一点,目标低了,就把它抬高一点.弓弦过满,就把它减少一点,弓弦不够满,就把它拉满一些.

  天之道就是这样,把多余的拿来补不足的.而人之道刚刚好相反,减少不足的来增加那有余的.

  谁能把有余的拿出来以奉天下呢?那只有得“道”的人才能如此.

  所以圣人为老百姓做了好事并不骄矜,立下功勋也不居功,他永远也不表现自己有多大的能力.

  赏析 ：此章通过对比,指出自然规律是损有余而补不足,人世则与之相反,进而赞美了有道者不同于世俗的行为.

#+END_SRC









** 15:20 自强不息--物腐之变





#+BEGIN_SRC org

  《孟子》中对尊严的看法是:人必自悔然后人悔之,家必自毁然后人毁之,国必自伐然后人伐之。一个人,一个民族,一个国家要想得到别人的尊重首先必须要维护尊重自己的尊严。



  一切外在的形态，都是从内在滋生，物必自腐，而后虫生



  内拳始于内，发于心，在于灵活多变

  外拳止于神，刚劲，虎虎生乎，但却无变化，

  博彩百家之长，引领一家之先









#+END_SRC







** 15:23 青磷光不变                                                   :大山:







#+BEGIN_SRC org

  【《被逮口占》原文】：

  衔石成痴绝，沧波万里愁。

  孤飞终不倦，羞逐海鸥浮。

  姹紫嫣红色，从知渲染难。

  他时好花发，认取血痕斑。

  慷慨歌燕市，从容作楚囚。

  引刀成一快，不负少年头。

  留得心魂在，残躯付劫灰。

  青磷光不灭，夜夜照燕台。





  痴绝的精卫鸟衔石投海。海波无际，浮泛愁色。

  孤零零的飞着，不知疲倦，不愿随波逐流。

  姹紫嫣红的色彩知道不能渲染。

  等到花开日，认取那血痕的色泽。

  在燕地慷慨悲歌，即使做了阶下囚也从容不迫。

  砍了头也和我心意，不辜负我少年的豪情。

  只要心魂流传，剩下的身躯由它成灰。

  磷火不会熄灭，夜夜在燕台闪耀。

#+END_SRC



** 15:26 阴阳割昏晓                                                   :大山:





#+BEGIN_SRC org

  岱宗夫如何？齐鲁青未了。



  造化钟神秀，阴阳割昏晓。



  荡胸生层云，决眦入归鸟。



  会当凌绝顶，一览众山小。

#+END_SRC





** 15:27 赤壁 小乔 神游 豪杰                                          :大山:





#+BEGIN_SRC org

  大江东去，浪淘尽，千古风流人物。



  故垒西边，人道是：三国周郎赤壁。



  乱石崩云，惊涛裂岸，卷起千堆雪。



  江山如画，一时多少豪杰。



  遥想公瑾当年，小乔初嫁了，雄姿英发。



  羽扇纶巾，谈笑间、强虏灰飞烟灭。



  故国神游，多情应笑我，早生华发。



  人间如梦，一尊还酹江月。

#+END_SRC



** 15:28 孙仲谋 封狼居胥 廉颇                                         :大山:





#+BEGIN_SRC org

  大江东去，浪淘尽，千古风流人物。



  故垒西边，人道是：三国周郎赤壁。



  乱石崩云，惊涛裂岸，卷起千堆雪。



  江山如画，一时多少豪杰。



  遥想公瑾当年，小乔初嫁了，雄姿英发。



  羽扇纶巾，谈笑间、强虏灰飞烟灭。



  故国神游，多情应笑我，早生华发。



  人间如梦，一尊还酹江月。





  译文

  历经千古的江山，再也难找到像孙权那样的英雄。当年的舞榭歌台还在，英雄人物却随着岁月的流逝早已不复存在。斜阳照着长满草树的普通小巷，人们说那是当年刘裕曾经住过的地方。回想当年，他领军北伐、收复失地的时候是何等威猛！

  然而刘裕的儿子刘义隆好大喜功，仓促北伐，却反而让北魏太武帝拓跋焘乘机挥师南下，兵抵长江北岸而返，遭到对手的重创。我回到南方已经有四十三年了，看着原仍然记得扬州一带烽火连天的战乱场景。怎么能回首啊，当年拓跋焘的行宫外竟有百姓在那里祭祀，乌鸦啄食祭品，人们过着社日，只把他当作一位神祇来供奉，而不知道这里曾是一个皇帝的行宫。还有谁会问，廉颇老了，饭量还好吗？



  韵译

  江山如画、历经千年仍如故，但是找不到东吴英雄孙权在此的定都处。昔日的舞榭歌台、显赫人物，都被风吹雨打化为土。斜阳照着草和树，普通的街巷和小路，人们说，武帝刘裕曾在这个地方住。想当年，他骑战马披铁甲，刀枪空中舞，气吞万里如猛虎。

  宋文帝草率用兵学黩(dú)武，效法汉将伐匈奴，没能够封山纪功狼居胥，却要仓皇向南逃，时时回头向北顾。我登上山亭望江北，还记得四十三年前的旧事一幕幕：烽火连天鏖(áo)战苦，扬州一带遭荼(tú)毒。往事怎忍再回顾？拓跋焘(tào)祠堂香火盛，乌鸦啄祭品，祭祀擂大鼓。谁能派人来探问：廉颇将军虽年老，还能吃饭吗？



  注释

  京口：古城名，即今江苏镇江。因临京岘山、长江口而得名。

  孙仲谋：三国时的吴王孙权，字仲谋，曾建都京口。孙权（182年——252年），字仲谋。东吴大帝，三国时期吴国的开国皇帝。吴郡富春县（今浙江富阳）人。生于公元182年（光和五年），卒于公元252年（太元二年）。长沙太守孙坚次子，幼年跟随兄长吴侯孙策平定江东，公元200年孙策早逝。孙权继位为江东之主。

  寄奴：南朝宋武帝刘裕小名。 刘裕（363年4月——422年6月），字德舆，小名寄奴，汉族，先祖是彭城人（今江苏徐州市），后来迁居到京口（江苏镇江市），南北朝时期宋朝的建立者，史称宋武帝。中国历史上杰出的政治家、卓越的军事家、统帅。

  “想当年”三句：刘裕曾两次领兵北伐，收复洛阳、长安等地。

  “元嘉草草”句：元嘉是刘裕子刘义隆年号。草草：轻率。南朝宋（不是南宋）刘义隆好大喜功，仓促北伐，却反而让北魏主拓跋焘抓住机会，以骑兵集团南下，兵抵长江北岸而返，遭到对手的重创。封狼居胥：公元前119年（汉武帝元狩四年）霍去病远征匈奴，歼敌七万余，封狼居胥山而还。狼居胥山，在今蒙古境内。词中用“元嘉北伐”失利事，以影射南宋“隆兴北伐”。

  赢得：剩得，落得。

  烽火扬州路：指当年扬州路上，到处是金兵南侵的战火烽烟。

  “四十三年”句：作者于1162年（宋高宗绍兴三十二年）南归，到写该词时正好为四十三年。

  佛（bì）狸祠：北魏太武帝拓跋焘小名佛狸。公元450年，他曾反击刘宋，两个月的时间里，兵锋南下，五路远征军分道并进，从黄河北岸一路穿插到长江北岸。在长江北岸瓜步山建立行宫，即后来的佛狸祠。

  神鸦：指在庙里吃祭品的乌鸦。社鼓：祭祀时的鼓声。整句话的意思是，到了南宋时期，当地老百姓只把佛狸祠当作一位神祇来奉祀供奉，而不知道它过去曾是一个皇帝的行宫。

  廉颇：战国时赵国名将。《史记·廉颇蔺相如列传》记载，廉颇被免职后，跑到魏国，赵王想再用他，派人去看他的身体情况，廉颇之仇郭开贿赂使者，使者看到廉颇，廉颇为之米饭一斗，肉十斤，被甲上马，以示尚可用。使者回来报告赵王说：“廉颇将军虽老，尚善饭，然与臣坐，顷之三遗矢（通假字，即屎）矣。”赵王以为廉颇已老，遂不用。▲







  赏析



  　　辛弃疾调任镇江知府以后，登临北固亭，感叹报国无门的失望，凭高望远，抚今追昔，于是写下了这篇传唱千古之作。这首词用典精当，有怀古、忧世、抒志的多重主题。江山千古，欲觅当年英雄而不得，起调不凡。开篇借景抒情，由眼前所见而联想到两位著名历史人物——孙权和刘裕，对他们的英雄业绩表示向往。接下来讽刺当朝用事者韩侂胄（侂：tuō，胄：zhòu），又像刘义隆一样草率，欲挥师北伐，令人忧虑。老之将至而朝廷不会再用自己，不禁仰天叹息。其中“佛狸祠下，一片神鸦社鼓”写北方已非宋朝国土的感慨，最为沉痛。



  　　词的上片怀念孙权、刘裕。孙权割据东南，击退曹军；刘裕金戈铁马，战功赫赫，收复失地。不仅表达了 对历史人物的赞扬，也表达了对主战派的期望和对南宋朝廷苟安求和者的讽刺和谴责。



  　　下片引用南朝刘义隆草率北伐，招致大败的历史事实，忠告韩侂胄要吸取历史教训，不要鲁莽从事，接着用四十三年来抗金形势的变化，表示词人收复中原的决心不变，结尾三句，借廉颇自比，表示出词人报效国家的强烈愿望和对宋室不能进用人才的慨叹。



  　　全词豪壮悲凉，义重情深，放射着爱国主义的思想光辉。词中用典贴切自然，紧扣题旨，增强了作品的说服力和意境美。明代杨慎在《词品》中说：“辛词当以京口北固亭怀古《永遇乐》为第一。”这种评价是中肯的。▲

#+END_SRC





** 15:58 壮志饥餐胡虏肉，笑谈渴饮匈奴血。                             :大山:





#+BEGIN_SRC org





      满江红



      南宋/岳飞



      怒发冲冠，凭栏处、潇潇雨歇。



      抬望眼，仰天长啸，壮怀激烈。



      三十功名尘与土，八千里路云和月。



      莫等闲、白了少年头，空悲切！



      靖康耻，犹未雪。



      臣子恨，何时灭！



      驾长车，踏破贺兰山缺。



      壮志饥餐胡虏肉，笑谈渴饮匈奴血。



      待从头、收拾旧山河，朝天阙！





#+END_SRC





** 16:00 只识弯弓射大雕，原驰蜡象 (昔秦皇汉武，唐宗宋祖)              :大山:





#+BEGIN_SRC org







      沁园春●雪



      毛泽东



      北国风光，千里冰封，万里雪飘。



      望长城内外，惟余莽莽；大河上下，顿失滔滔。



      山舞银蛇，原驰蜡象，欲与天公试比高。



      须晴日，看红装素裹，分外妖娆。



      江山如此多娇，引无数英雄竞折腰。



      惜秦皇汉武，略输文采；



      唐宗宋祖，稍逊风骚。



      一代天骄，成吉思汗，只识弯弓射大雕。



      俱往矣，数风流人物，还看今朝。





  这一句的意思是：披满白雪、连绵起伏的群山，像一条条银蛇在舞动；而白雪皑皑的高原丘陵地带，像蜡白色的象群在奔兀。群山高原与低垂的冬雪云天相连成一片。“银蛇”“蜡象”两个生动比喻，一下子赋予雪境以生命感，且有动中见静的艺术效果。





  一代天骄成吉思汗只识弯弓射大雕”意思是：成吉思汗空有那么大的事业,可惜只会武功不会文治。毛泽东这一句“一代天骄成吉思汗只识弯弓射大雕”以及前面的“惜秦皇汉武，略输文采；唐宗宋祖，稍逊风骚。”显示了一种豪放的气度，让对手闻风丧胆的霸气和威严，表现出毛泽东藐视先人权威，并有超越唐宗宋祖、成吉思汗的远大抱负。





#+END_SRC





** 20:02 交易中台                                                     :java:



中台就是个平台聚合（重要意义就是流程复用，体系变大的过程中），服务集中点



*** 大中台定义



位于前台业务后方，强调资源整合、能力沉淀、流程能力服用，有很强的管理能力



*** 大中台解决什么问题



- 支撑前台业务

- 抽象业务本质，管理核心模型、数据、状态和流程

- 因为要跨业务，所以需要提供一些列标准操作并提供组合编排能力

*** 业务发展到身阶段适合做大中台



- 业务模型的成熟度具备

- 系统架构拆分的合理性

- 团队的编码能力

- 团队增量验收效率

*** 中台、平台、后台的区别和联系是什么



- 中台：

      业务角度： 流程复用且能组合编排、提供了N中业务场景组合形式。对于具体某一特定前台业务而言，业务玩法是N的子集M

      技术角度：管理所有的核心流程和数据、状态等，因此架构上需要指定SOP动作和编排组合 （就是业务流程一种有N个链路，业务方自己决定走哪些M，M是N的子集

）开发是另外一个问题：插件开发和配置开发



      概述：中台前面有多个业务，中台其实管理这些业务的，只不过把编排权限给到了医务人员。中台自己处理非常多的流程和步骤

- 平台：

  业务发展起来后，沉淀的某一职能领域平台。虽然自己的数据和业务特点，但是不横向管理和平台有交互的那些业务

*** 业界里的阿里、滴滴、京东等公司的中台发展情况怎么样



- 阿里：店铺模式+TMF框架

- 滴滴：中台支持各打车业务场景

- 京东：



*** 实现大中台的主要难点、挑战、方法有哪些



- 商品中心模型的成熟度问题（特别严重）如果要做交易型的中台架构，商品中心的位置和角



业务模型的成熟度（非业务成熟度）有什么指标判断一个业务模型的成熟度么？或者说怎么觉得自己的业务到达了可以建设中台的时机

模型有一定的成熟度，并且建模和拆解业务的逻辑原则是对的

一个是当下，一个是未来

- OOP编码能力



** 20:28 交易业务前中后                                               :java:





交易业务--售前、控货(拿到货之后，在上架卖货之前 可以加很多种控货逻辑)、售中、履约、售后



** 20:45 心存感恩，36岁保持健康配额（人生配额）            :地球:不紧急重要:





http://mp.weixin.qq.com/s/ftshczhtG6-BFtB7kpWFpA  36岁健康配额





http://mp.weixin.qq.com/s/T-sctyVEDrPZ_aQpeU5gJw 倪匡本名倪聪





体检通过，查证件的问：“你才16岁啊。”旁边一个人说：“革命事业嘛，热情最重要，不分大小。”



再去串场，倪匡问演什么，蔡澜说：“马上风的嫖客。”倪匡听了，十分高兴。结果当天酒兴来了，还没开拍就喝得酩酊大醉。等洪金宝找到他，拉着蔡澜一看：“喝成这样了还怎么演戏？”蔡澜说：“那就演一个喝醉了的嫖客不就行了？”

 

后来有人对倪太太说：“演作家还好，怎么能去接嫖客这样的角色呢，实在是太不雅了。”



倪太太却一脸淡定：“作家嫖客，都是本色出演。”



#+BEGIN_SRC org

  我们的好朋友古龙，在今年九月廿一日傍晚，离开尘世，返回本来，在人间逗留了四十八年。

  本名熊耀华的他，豪气干云，侠骨盖世，才华惊天，浪漫过人。他热爱朋友，酷嗜醇酒，迷恋美女，渴望快乐。三十年来，以他丰盛无比的创作力，写出了超过一百部精采绝伦，风行天下的作品。开创武侠小说的新路，是中国武侠小说的一代巨匠。他是他笔下所有多姿多采的英雄人物的综合。

  “人在江湖，身不由己”，如今摆脱了一切羁绊，自此人欠欠人，一了百了，再无拘束，自由翱翔于我们无法了解的另一空间。他的作品留在人世，让世人知道曾有那么出色的一个人，写出那么多好看之极的小说。

  未能免俗，为他的遗体，举行一个他会喜欢的葬礼。时间：七十四年十月八日下午一时，地点：第一殡仪馆景行厅。人间无古龙，心中有古龙，请大家来参加。



  古龙治丧委员会　谨启

#+END_SRC





随性：







#+BEGIN_SRC org

  1992年秋，盛名之下的倪匡突然离港，隐居美国，留下一纸声明：“我已决心‘淡出’，

自此天涯海角，闲云野鹤；醉里乾坤，壶中日月；竹里坐享，花间补读；世事无我，纷扰由他；

新旧相知，若居然偶有念及，可当作早登极乐。”

#+END_SRC







#+BEGIN_SRC org

  到了美国，小说也写，闲时全用在兴致上。木工、金鱼、花草、贝壳，差不多样样都玩儿成了专家。



  养鱼时，他自称“九缸居士”。一养就是十几二十缸，每口缸大得可以躺进一个人。喂鱼用的蚯蚓都比牛排贵。怕鱼水土不服，给来自亚马逊河的神仙鱼特意加了亚马逊河的水。



  玩贝壳时，洋洋洒洒写了几大篇论文，寄到国际贝壳学会，成了专家。任何贝壳他一瞧，就知道什么品种。手头四五枚稀有品种，可以卖到几十万。



  一旦说不玩儿了，也绝不留恋，转手就送人。



  倪匡常说一句话：“做人，做不喜欢做的，其实很容易。要做自己喜欢的，真难。可是人生短短几十年，不做喜欢的，活着干嘛呀？”

#+END_SRC





人生配额：





#+BEGIN_SRC org

  倪匡有个特别有意思的词：人生配额。



  以前他抽烟，2年时间把书房墙纸全部熏黄，居然可以一边抽烟一边刷牙。抽了35年，突然觉得“抽烟配额”用完了，于是说断就断。



  然后是美酒，年轻时跟古龙拼酒，一晚上七八瓶洋酒下肚，喝高了就去医院打点滴。终于一天觉得“喝酒配额”也用的差不多，便只小酌怡情。



  甚至连写作，他也察觉得到。2004年，感到灵感枯竭，字句困顿，咬牙写完了最后一本书，取名《只限老友》，便从此不再写卫斯理系列。至此，卫斯理系列写到145本，成为一座高峰。卫斯理的传奇也就此终结。倪匡自己一点也不遗憾。





  唯一放不下的，只有美食。尽管胆固醇高，医生要他减肥，一顿下来还是几个羊腿。实在要忌口时，他便跟蔡澜抱怨：“完了，所有的配额都用完了。”



  蔡澜说：“至少还有思想的配额嘛。”



  倪匡一听：“美酒香烟配额没有，性欲配额也没有，要光秃秃的思想配额有个鸟用？”



  也难怪有一次吃饭，倪匡吃着吃着便说：“唉，这男人老了，身上最该硬的地方都硬不起来了。”座上嘉宾都一脸坏笑望着他，他紧接着说：“大家不要误会，我说的是牙齿……”

#+END_SRC





既然每个人的人生配额都有限度，那么就要趁早去干你喜欢干的事情，并且不断地干下去，力所能及地把它干到你最能发挥的水准，千万别留下遗憾。这便是倪匡一生所奉行的极致。



一旦配额到限，也不要戚戚怨怨，要懂得适时地放手。这便是倪匡晚年所采取的豁达。



当追逐时，不遗余力。当放手时，不要回头。懂得了追逐与放手的分寸，方能够不虚此行



http://www.sohu.com/a/220781887_488304



** 21:09 拆解                                                    :java:地球:



交易中台很重要的是商品信息建模，业务建模，一旦理解不清楚，就得拆解、掰碎、琢磨、分析



与人讲述叫做从上至下，结论先行

自己讲述的时候往往是由下至上，进而推导出合理的结论。



拆解能力必须养成，才能适应纷繁复杂的各色逻辑中



** 21:52 结构化逻辑 （时间拆解意识）（概念宽度划分） （信息拆解） :java:地球:



概念宽度=信息拆解==信息宽度

把所有的概念放到时间的维度去分析（会不会重叠？）  更深入可能放到空间的维度【较难】



怎么拆解交易过程的：售前、售中、售后

参与的角色？ 角色的action?  按照时间序列拆的比较完整些。。

四个维度：



    1. 时间序

    2. 动作

    3. 参与方

    4. 信息（数据结构，信息存储过程，分尸能力，提取能力）



***  雕刻的艺术：



为了更好地使你提问题不留遗漏，借鉴5w2h1e标准(但1其实还有很多问题，492个问题for Bafeite)



    What: 是什么？ 做什么？ 目的是什么？

    Why: 理由是什么，为什么这样做？原因是什么？

    Who:(参与方） 谁负责？ 谁要完成这件事？ 由谁来承担？

    When:(时间序) 何时完成 ？ 最关键时期？最佳时期是什么时候？？

    Where: 在哪个地方进行，何处？在哪儿入手？ 雕刻从哪儿入手？

    How:(动作) 如何做？ 怎么去做？ 

    How much: 做多少？ 完成量是多少？ 合格率是多少？费用是多少



特别核心的是： what(是什么），why（为什么），how（怎么做） 培养自己的结构性逻辑思维

              发现问题       分析问题       解决问题



信息: What, Why, Where, How much



5W1H分析法也叫六何分析法，是一种思考方法，也可以说是一种创造技法。是对选定的项目、工序或操作，都要从原因（何因）、对象（何事）、地点（何地）、时间（何时）、人员（何人）、方法（何法）等六个方面提出问题进行思考。这种看似很可笑、很天真的问话和思考办法，可使思考的内容深化、科学化。

一、对象(what)

公司生产什么产品？车间生产什么零配件？为什么要生产这个产品？能不能生产别的？我到底应该生产什么？例如如果现在这个产品不挣钱，换个利润高

二、场所(where, 场景)

生产是在哪里干的？为什么偏偏要在这个地方干？换个地方行不行？到底应该在什么地方干？这是选择工作场所应该考虑的。

三、时间和程序(when)

例如现在这个工序或者零部件是在什么时候干的？为什么要在这个时候干？能不能在其他时候干？把后工序提到前面行不行？到底应该在什么时间干？

四、人员(who)

现在这个事情是谁在干？为什么要让他干？如果他既不负责任，脾气又很大，是不是可以换个人？有时候换一个人，整个生产就有起色了。

五、手段(How)

手段也就是工艺方法，例如，现在我们是怎样干的？为什么用这种方法来干？有没有别的方法可以干？到底应该怎么干？有时候方法一改，全局就会改变。



What(什么)--企划的目的、内容。

Who( 谁)--企划相关人员。

Where( 何处)--企划实施场所。(地点1， 地点2 。。。)

When(何时)--企划的时间。

Why(为什么)--企划缘由、前景。

How(如何)--企划的方法和运转实施。

How much(多少)--企划预算。

Effect(效果)--预测企划结果、效果。



尤其值得一提的是，要注意How much和Effect对整个企划案的重要意义。如果忽视企划的成本投入，不注意企划书实施效果的预测，那么，这种企划就不是一种成功的企划。只有5W1H的企划书不能称之为企划书，只能算是计划书。





四种技巧：

一、取消

就是看现场能不能排除某道工序，如果可以就取消这道工序。

二、合并

就是看能不能把几道工序合并，尤其在流水线生产上合并的技巧能立竿见影地改善并提高效率。

三、改变

如上所述，改变一下顺序，改变一下工艺就能提高效率。

四、改变

将复杂的工艺变得简单一点，也能提高效率。





前台的事情（必须同步，反馈给用户，ajax）

后台的事情（不需要同步，支付中心，回调给我们，调用超时，需要重复执行，  分布式过程，反的事情回退（逆向），另一件事情把这件事情截断，重新再搞（正向））



【特别重要】公司答辩、设计分享、系统架构演变、技术工作总结：（你做过了什么突破性的挑战，决定着别人会不会使用你）

1. 过去一段时间工作，我的系统第一个版本是做了什么事情，

2. 当时的挑战？然后你在这个过程中的做的取舍是什么?架构理论和方法论本身（00:30:28讲到）

3. 你在Vi(i=1,2,3)的时候你又遇到什么挑战

业务上的需求和复杂度其实是外在的输入（外部输入的冲击，新的不一样的地方，因为对系统有冲击才会存在多个新的版本），从技术角度分析， 新的v2 v3版本又有什么挑战？？？(挑战意味着价值，取舍意味着代价)

以及相关的取舍是什么？ 另外的一个规划是什么？



做过的事情，也找不出找出共性和时间顺序？  该怎么办？



拆解商品中心要做什么事情，订单中心要做什么事情？整个交易环节或者交易中台要做什么事情？一样的道理，强调有一些设计，要考虑一些建模、流程拆解分析，服务划分

或者领域划分啊的一些事情，背后是有一个逻辑在里头。



如果你不知道怎么把？该怎么做？



过去一年所有事情中，写下来!!write it down!哪些是技术优化，哪些是系统结构，哪些是演进性的？哪些是系统稳定性？哪些是比较重要？

哪些是重要，哪些是次要的？  系统架构我们又做了几个版本，相关的时间线版本是什么？

技术优化上可以有哪些操作的方式，比如系统架构优化可以有5个方面进行优化，比如硬件方面维护，有哪些事情要做，你又做了什么事情？（体现你的价值）

系统服务，你做了哪些事情



滴滴和景区旅游业务的有一个比较大的不同点，滴滴可能是马上消费（一天内） 而旅游可能是隔一周一段时间才进行。。





时间的前中后，你需要做一件事情，按照一定流程或者结构，然后把该事情做完

我们需要一个判断，一个逻辑，保证我们在事物变得比较复杂的时候，运用相同的逻辑，还能继续分析它，也还能更好 更快的做完，

这是一个非常重要的事情，这也是为什么我们会考虑领域驱动、工作流或者其他的工作方式，能够帮助我们理顺这些事情（事情需要时间和人物参与）  



也就是说帮助我们把系统的交互和流程或者信息结构，能拆分出来一个相对比较有序的结构，（1. 系统交互、系统对接、2流程 3信息结构）

后续随着业务变得复杂（过程化思维的能力），我们可以用这样一种方式（归类，树状结构），然后在原来的基础上持续的迭代（新的属性，继续追加，而又不打乱设计原则

支持后续产品，优化等  中台一个挑战：抵抗系统复杂度的能力），而不至于那么混乱，这就是要说的事情，也是结构化逻辑思维能力的价值。



我们的主题思想必须满足一种逻辑，不管我们用什么逻辑来拆解主题，必须符合MECE原则，相互独立的，模块独立且不重叠

（拆解一件事情可以有很多维度去拆分，比如参与角色来分： 商品，运营，客服啊，用户，系统啊，   每个角色又有哪些业务要分啊  平台要做什么事情呢

 用户可能浏览、下单、支付、查看  商户可能上单、履约  客服可能售后、活动、补贴  系统可能存在流程（JOB）、存储(Store)、结算   而同时你可以把角色又提高到时间

维度中，交易前，交易中，履约，售后， 即交易前商品、用户、平台都需要做什么actions， 交易中？ 交易后？）



我们会先拆，然后理顺、分类，最终得到一个中心思想



系统对接效率提高（接入前、接入中、接入后）

接入前：流程标准化、分工明确化

接入中：接入自动化，测试自动化

接入后：运营智能化







电商四流：

1. 商品流

2. 订单流

3. 资金流

4. 物流



系统稳定性（一般是多阶段、长链路、多角色参与、多信息互通的商品、服务交换过程---交易业务）：

1. 设计：部署冗余 熔断降级设计  架构可拓展  设计隔离 关键服务DB不共享

2. 巡检：全链路压测  容量规划 故障演练

3. 处理： 系统回滚  故障通报  打开降级开关 处理SOP

4. 检测： 技术监控  业务监控

5. 总结  定期故障集剖析



六个部分：【前：设计】高可用系统【设计原则 设计事项】，【中】日常巡检，【中】异常检测，【后】故障处理，故障总结【总结和复盘】，系统稳定性：



事件：PM统计用户积分消耗情况是，发现2018-1-12会员数据有一场，疑似数据没计算

分析：会员升降级Job是每天7点定时跑的，由于当天数据组原因未在7点前准备好数据，导致2018-1-12的定时任务【空跑】，进而导致2018-1-11当天会员

   数据和积分未正常升降级。 3.且会员系统未在关键节点添加相应的监控报警，导致此现象无感知，未能及时处理此问题



始终：许巧辉： 

1. 事中

   1. 任务未调度执行，crane有大象报警

   2. 未调度到目标及其：Crane有监控报警

   3. 调度到机器，但未成功完成：

      1. 前置依赖未完成：数据组未准备好数据时，将发通大象通知相关负责人

      2. 是否还有其他前置依赖

      3. 处理过程失败：将发通大象通知相关负责人

      4. 部分失败的场景，针对性冲入

2. 事后

   1. 添加定时任务补偿处，按dateKey日期对相应会员数据进行补偿处理

3. 其他类似JOB整理





我们发现了什么问题？于是我们做了一些划分，把问题宽度划分，不要让问题宽度过宽



比如购买项和消费项（订单项是最大的宽度）



概念宽度，不能过宽，否则就泛泛而论



商品有哪些内容，做归类，看的，可感知的，价格，库存，库存达到一定的复杂度之后又可划分



账户系统和订单系统，是在什么阶段发起的，由谁发起的，和谁进行交互的，交互过程中的信息构成，是什么样子？

他们是怎么协作的？ 这样信息拆解过程



考虑自己架构是不是合理的问题？（大的宽度）我们会想很多新的场景，或者可能新的复杂度进来，要对现有的体系结构增加一些难度

一定的冲击，要考虑我们推导的逻辑是不是能够继续帮助我们分析新的复杂系统，沿用下去，这就是我们要讲的这样的从上向下的金字塔

思维能力，先从时间序列，再从角色和动作（有哪些角色），最后考虑整个信息结构（信息结构到底拆解的怎么样？信息结构该长什么样子？ 这就是业务逻辑要做的事情

分尸能力）。



大的方法论就是推导逻辑



平时要做的技术优化、优化服务、介绍男女服务、报告等 ，怎么给人讲清楚的能力，分哪几个点去讲，怎么讲的更清楚

哪些是性格？外貌【小鲜肉】？才华【乐器舞蹈 歌唱】？





从大框架中---推导逻辑（看看是否可行 是否支持新的动态的系统）----业务模型----OOP编码能力

链接：https://pan.baidu.com/s/1smXmc3N 密码：zkcn

* 20180205.org
** 11:10 org-mode-help                                           :emacslisp:



LINK:info:org:Top 



** 16:55 ag  pk ack                                                  :Linux:





#+BEGIN_SRC sh

  ack test_blah ~/code/  104.66s user 4.82s system 99% cpu 1:50.03 total



  ag test_blah ~/code/  4.67s user 4.58s system 286% cpu 3.227 total

#+END_SRC



https://github.com/ggreer/the_silver_searcher



** 16:59 vimproc make search files easily                            :Linux:





#+BEGIN_SRC sh

  https://github.com/Shougo/vimproc.vim

#+END_SRC





** 19:38 git config credential省去输入密码                             :git:



但是比较危险



#+BEGIN_SRC sh

  git config --global credential.helper store

  会在~目录下新建一个.git-credential文件，包含用户名和密码，明文显示（特别不安全）

#+END_SRC





** 21:19 counsel-ag navigation.el                                :emacslisp:



ag （还有 counsel-ag）会忽略在 gitignore 中设置的文件。

* 20180206.org
** 10:25 Martin Fowler关于Emacs的文章    InternalReprogrammability :emacslisp:



Emacs is a Dynabook!(Process thinking, more challenge then state thinking)



#+BEGIN_SRC emacs-lisp

  (defun my/insert-line-before (times)

    "Insert a  newline(s) above the line containing the cursor."

    (interactive "p")

    (save-excursion 

      (move-beginning-of-line 1)

      (newline times))

    )

#+END_SRC





#+BEGIN_SRC org



  I was programming away and wanted to add an empty line above where I was currently typing. The editor I was using doesn't have this feature built-in, and I'd finally had this desire enough that I really wanted it. I did a quick google search, found a few lines of code, pasted them into my startup file, executed them, and lo I could now create empty lines above with a single keystroke. It took just a couple of minutes, I didn't have to install any plugins, or restart the editor - this is normal everyday business for an emacs user.



  Emacs is an elderly piece of software, dating back to the mid 70's. Its philosophy of allowing people to easily extend it by modifying the live environment is something shared with a few other elderly-but-groundbreaking开创性、突破性 systems, such as lisp machines and Smalltalk.



  That philosophy seems rarer now. Certainly there are plenty of extensible systems, you can install plugins for browsers like Firefox and editing suites like Eclipse. The whole free/open source movement is about giving you access to the code that runs your machines so you can (in theory) tweak it to your heart's content. But there's a palpable difference between extensions in most of these environments and the kind of reprogramming you do in emacs or Smalltalk. Something about how it's easy to quickly do small modifications, such as the new command I added above. It's also about doing it without leaving the environment - I don't fire up some separate toolchain to add an emacs function, I work within emacs itself.



  This is also different to tools that add some kind of "macro capability". Adding a new elisp function is exactly how emacs is programmed itself - there is no difference between how you program little extensions and the core programming of the software. This unity allows you to reach deep into the editor's guts. It also means that your modifications aren't relegated to some "scripts" menu - they are indistinguishable from any other part of the tool.



  This capability is also a philosophy about how you relate to your tools. For many people the software you use is a relatively fixed product. Even plugins add a relatively limited menu of options. Internally reprogrammable tools allow you to add or change any part of your software, allowing you to craft your tools to exactly fit your metaphorical hand.



  This thinking even applies to programming languages themselves. Both Lisp and Smalltalk are minimal languages that make it easy to extend the language in such a way that extensions look identical to the core. Neither language has any special syntax for such basic language features as conditional logic. This flexibility allowed Smalltalk to add exception handling without any language changes.



  One of the biggest issues with internal reprogrammability is the resulting fragmentation of instances of the software. As I modify my emacs instance with lots of personal functions, I'm creating my own custom version of emacs that's tightly coupled to the emacs configuration on my machine. Inevitably this raises questions about dealing with upgrades to the core application and on how easy it is to share my functions with others.



  Systems with plug-in architectures and macro languages handle this by reducing the surface area of customization, but as Nic Ferrier put it well: "A reprogrammable system is incredibly powerful. Abusing the power is always possible and it's a point of principle in a reprogrammable system that people must be able to abuse it."



  The emacs community is, of course, a good example of how this has progressed in practice. Emacs has stabilized enough that, despite regular updates, most people are able to upgrade without serious headaches. Emacs has used package management systems to help distribute sharable changes - there's been much progress in thinking about how to share code since the original Emacs and Smalltalk days. The rise of distributed version control tools adds more ideas for managing shared code.



  Despite the sense that internal reprogrammability is a mostly-forgotten philosophy, there are some interesting flickers of life. At gotoAarhus2011 I was struck by how well Moose (a tool for assessing codebase health) used reprogrammability to help you gradually build up health-check analysis. Emacs is still widely used and being pushed into new frontiers. A group of emacs developers have built a node-like web-server in emacs. Ward Cunningham's recent thinking on developing the smallest federated wiki includes a strong element of reprogrammability through the ability to create your own javascript functions to manipulate data on your pages.



  If internal reprogrammability is rare for tools aimed at programmers, it's even rarer for tools aimed at non-programmers. I've often wondered if that ought to change. What would come from making more tools exhibit this quality? Would this encourage more people to learn about programming, the better to control the environment that they spend so much time in? This was certainly part of Alan Kay's vision of the dynabook. He saw children not as passive consumers of media, but actively programming their environment.



  Programming is not easy, and I'm not one to underplay the challenges programmers face every day. But that doesn't mean that internal reprogrammability should be relegated to 1970's vision of the future. A large part of why modern dynabooks lack the internal reprogrammability of Kay's vision is because it hasn't been made a high-enough priority. Perhaps that's something we should think about more.

  Acknowledgements

  I really appreciated the conversation on our internal mailing list between Nic Ferrier, Pat Kua and Kief Morris on the issues around fragmentation. 

#+END_SRC









https://www.mprove.de/diplom/gui/kay72.html kay's vision: All data structures are process(input ,output,changes as time)

(每个child都是长链路处理器)



#+BEGIN_SRC org

  The notion of multiple control paths allows the separate notions of "files","operating system",

  "monitor",etc., to be replaced by the single idea that the user is also a process(and thus has state which consist of

  variables and bindings, etc.)



  when he leaves the machine, his process is passivated until the next time he rejoins his Dynabook(lisp machine). His state(which

  is now activated) constituted "files" while he was away.

#+END_SRC



*** Every object has its own control path



The design principles of Dynabook language(System thinking: define + coordinate + IO+ redefine)



1. we need a uniform notion as to what objects are, how they may be referred to , and how they can manipulate other objects.

2. If each object can have its own control path, then there must be a concise way to coordinate and "control" these paths when more then

   one is active

3. The evaluation of a control path should follow simple rules which show how objects are passed and return results.

4. Every object in a system should be redefinable in terms of other objects



The basic idea is to exploit the duality between functions and tables(or processes and memory). English has nouns which refer to

"Objects", and verbs which refer to "Actors" and "Relators". This is a Newtonian epistemology. Modern physics and philosophy tend

towards the idea that both "Objects" and "actors" are just different aspects of the notion of process. A process has state (a set of

relations having only to do with it) which changes as time(defined as interations with other objects) passes. Using this view "data"

is a process which changes "slowly"(增加新的数据), "function " is a process which changes more rapidly(time small). Each process has the logical attributes of a

complete "micro computer", they can have inputs, giving back results(outputs), act as a memory on file system, perform computations, be

interrupted, etc. Since a "Computer" can simulate all other computers(modulo time and space), having the notion of a process in a language allows useful ideas such as arrays,records,recursive procedures, etc.(拓展 all are process) to be added to the repertoire(指令表)

at any time.



** 14:35 非spring的轻量级IOC容器                                      :java:



nutz

http://www.nutzam.com/





 有按照 CDI规范吗？



可以看看 actframework，使用 Genie 做 DI，完全符合 JSR330 规范。不过 CDI 还没有完全支持

这个是 genie 的项目：

https://github.com/osglworks/java-di





和 Spring 以及 Guice 的比较：

https://github.com/greenlaw110/di-benchmark



** 14:55 jekyll启动                                                   :java:



https://gitee.com/xiaodan_yu/resume.io



#+BEGIN_SRC sh

  gem install jekyll bundler



  jekyll new my-awesome-site



  cd my-awesome-site



  bundle exec jekyll serve



  # => Now browse to http://localhost:4000 

#+END_SRC









** 15:15 jdk8 往子类传变量都不用写final了 编译的时候自动给加上        :java:



在你用 lambda的时候，还是需要的 是显式的加



记得大部分final都不需要单独写了 jdk帮你加上了



** 15:19 adobe acrobat快捷键                                  :EnglishPaper:



space临时手工具（Esc退出）

ctrl+中键滚轮 临时放大缩小工具（配合中键滚轮）



Ctrl+H阅读模式最宽屏幕（Ctrl+L全屏模式）



ctrl+3 最大试图显示



** 22:08 科研动力 sci-hub                                     :EnglishPaper:



http://www.howsci.com/sci-hub-alternative.html

* 20180207.org
** 03:41 电驴测试数据                                                 :java:



https://pan.baidu.com/share/init?surl=jIlpjlc



q64t



** 04:10 try with resources                                           :java:



只要是实现AutoCloseable接口(也就是你必须去查看该类 ，看看是否implements autocloseable  或者closeable)就放入try中，必须得有1.7以上jdk才可以执行



#+BEGIN_SRC sh

  有3个接口对于流类相当重要。其中两个接口是Closeable和Flushable，它们是在java.io包中定义的，并且是由JDK5添加的。



  第3个接口是AutoColseable，它是由JDK7添加的新接口，被打包到java.lang包中。



  AutoCloseable接口对JDK7新添加的带资源的try语句提供了支持，这种try语句可以自动执行资源关闭过程。只有实现了AutoCloseable接口的类的对象才可以由带资源的try语句进行管理。AutoCloseable接口只定义了close()方法：



  https://my.oschina.net/fhd/blog/344961



从JDK7开始，Closeable扩展了AutoCloseable。因此，在JDK7中，所有实现了Closeable接口的类也都实现了AutoCloseable接口。

#+END_SRC







#+BEGIN_SRC java

   java  try-with-resources

        try(

                Connection conn = DriverManager.getConnection("jdbc:sqlite:G:\\IntellijHome\\rupengImprove\\verycd.sqlite3.db");

                PreparedStatement ps = conn.prepareStatement("select * from verycd limit 0,30");

                ResultSet rs = ps.executeQuery();

                ){

            while (rs.next()){

                String title = rs.getString("title");

                String ed2k = rs.getString("ed2k");

                String content = rs.getString("content");



                System.out.println(title+ "," + ed2k+ ","+ content);

                System.out.println("-------------------------------------");

            }

        }



#+END_SRC





** 04:22 JAVA8_HOME的变量Maven配置                                    :java:





1. pom.xml使用





#+BEGIN_SRC xml



   <build>

          <plugins>

              <plugin>

                  <groupId>org.apache.maven.plugins</groupId>

                  <artifactId>maven-compiler-plugin</artifactId>

                  <version>3.1</version>

                  <configuration>

                      <verbose>true</verbose>

                      <fork>true</fork>

                      <executable>${JAVA8_HOME}/bin/javac</executable>

                  </configuration>

              </plugin>

          </plugins>

      </build>

#+END_SRC



2. maven 的setting.xml配置JAVA8.xml





#+BEGIN_SRC xml

  <profiles>

       <profile>

           <id>custom-compiler</id>

           <properties>

               <JAVA8_HOME>G:\JAVA\jdk1.8.0_161 </JAVA8_HOME>

           </properties>

       </profile>



   </profiles>





 

   <activeProfiles>

       <activeProfile>custom-compiler</activeProfile>

   </activeProfiles>

#+END_SRC



3. 这样在idea中的pom.xml直接使用${JAVA8_HOME}变量就不会报错



** 04:38 Intellij Idea解决source 1.5问题                              :java:





#+BEGIN_SRC java

   <build>

          <plugins>

              <plugin>

                  <groupId>org.apache.maven.plugins</groupId>

                  <artifactId>maven-compiler-plugin</artifactId>

                  <version>3.1</version>

                  <configuration>

                      <verbose>true</verbose>

                      <fork>true</fork>

            <!--          <executable>${JAVA8_HOME}/bin/javac</executable>-->

                      <source>1.8</source>

                      <target>1.8</target>

                  </configuration>

              </plugin>

          </plugins>

      </build>

#+END_SRC





** 04:43 Solr安装和打开                                               :java:





#+BEGIN_SRC sh

  G:\IntellijHome\solr-7.2.1\bin>solr.cmd



  Usage: solr COMMAND OPTIONS

         where COMMAND is one of: start, stop, restart, healthcheck, create, create_core, create_collection, delete, version, zk, auth, assert



    Standalone server example (start Solr running in the background on port 8984):



      solr start -p 8984



    SolrCloud example (start Solr running in SolrCloud mode using localhost:2181 to connect to Zookeeper, with 1g max heap size and remote Java debug options enabled):



      solr start -c -m 1g -z localhost:2181 -a "-Xdebug -Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=1044"



  Pass -help after any COMMAND to see command-specific usage information,

    such as:    solr start -help or solr stop -help





#+END_SRC







#+BEGIN_SRC sh

  solr.cmd start

#+END_SRC







#+BEGIN_SRC sh

  1、	solr的安装：官网https://lucene.apache.org/solr/。如果没配置环境变量JAVA_HOME和PATH(要配置用户环境变量，不要配置下面的系统环境变量），则先配置，指向JDK1.8环境；解压solr；命令行进入solr的bin目录，执行solr.cmd start，命令窗口不要关；浏览器打开http://127.0.0.1:8983/。这是以集成的jetty服务器方式去运行。还可以部署到tomcat等其他Web服务器上。

#+END_SRC





安装solr服务器的表（需要手动建表，比较麻烦！！！一个表一个文件夹，一个表一个core, 你可以建类似movies类似的很多文件夹， 比如movies3...）





#+BEGIN_SRC sh



  1)	core相当于“表”（solr目录表示数据库）

  2)	server\solr\创建文件夹movies (进入solr7.2.1目录下 创建你自己的库或者表)

  3)	把solor的server\solr\configsets\_default下的conf拷贝到server\solr\movies下

  4)	 创建core（名字movies），相当于表：（这一步是在你打开的127.0.0.1:8389页面 add core）

  5)	浏览器中打开solr控制台“Core Admin”→【Add core】，name和instanceDir都填movies，其他保持默认值。

  6)	Solr6还是需要定义Schema的呢。新版本Solr7也默认支持SchemaLess了。

#+END_SRC





pom.xml配置





#+BEGIN_SRC java



       <dependency>

              <groupId>org.apache.solr</groupId>

              <artifactId>solr-solrj</artifactId>

              <version>7.2.1</version>

          </dependency>

#+END_SRC







#+BEGIN_SRC java



  package com.f708.sousou;



  import org.apache.solr.client.solrj.SolrServerException;

  import org.apache.solr.client.solrj.impl.HttpSolrClient;

  import org.apache.solr.common.SolrInputDocument;



  import java.io.IOException;



  public class SolrTest1 {

      public static void main(String[] args) {

          //movies就是你在solr7.2.1/server/movies 同时也是你在127.0.0.1/solr/ addcoremovies

          HttpSolrClient.Builder builder = new HttpSolrClient.Builder("http://127.0.0.1:8983/solr/movies");

          try(HttpSolrClient solrClient = builder.build()){

             SolrInputDocument doc = new SolrInputDocument();



             // 字段可以灵活添加

             doc.setField("id","1");

             doc.setField("title","泰坦尼克号");

             doc.setField("ed2k","ed2:///dff.avi/df");

             doc.setField("content","hello");

             solrClient.add(doc);

             solrClient.commit();



             //删除

             //solrClient.deleteById()

          }catch (SolrServerException e){

              e.printStackTrace();

          }catch(IOException e){

              e.printStackTrace();

          }

      }

  }

#+END_SRC



执行完之后的标准就是  127.0.0.1：8983会出现numDoc多了一个记录即可（原先可能是0）



** 05:10 Aliyun elasticsearch(直接外包运维给阿里)                     :java:



不需要多添加一台电脑专门运行 ES（和solr一样比较消耗系统资源，吃内存）,只需要你专门修改你的搜索业务即可！！

 配置、运维、优化交给专业的阿里即可



https://data.aliyun.com/product/elasticsearch?spm=5176.8142029.388261.355.e93976f4L7j2jP



挺便宜的 1年2000多



** 05:27 slf4j Error                                                  :java:





bug:



#+BEGIN_SRC java



  SLF4J: Failed to load class "org.slf4j.impl.StaticLoggerBinder".

  SLF4J: Defaulting to no-operation (NOP) logger implementation

  SLF4J: See http://www.slf4j.org/codes.html#StaticLoggerBinder for further details.

#+END_SRC



解决方法：



#+BEGIN_SRC java



  https://stackoverflow.com/questions/7421612/slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder



  !-- https://mvnrepository.com/artifact/org.slf4j/slf4j-simple -->  

  <dependency>  

      <groupId>org.slf4j</groupId>  

      <artifactId>slf4j-simple</artifactId>  

      <version>1.7.25</version>  

  </dependency>  

#+END_SRC





** 05:45 solr 从sqlite批量插入数据到solr表中(core)                    :java:





#+BEGIN_SRC java

  package com.f708.sousou;



  import org.apache.solr.client.solrj.impl.HttpSolrClient;

  import org.apache.solr.common.SolrInputDocument;



  import java.sql.Connection;

  import java.sql.DriverManager;

  import java.sql.PreparedStatement;

  import java.sql.ResultSet;

  import java.text.SimpleDateFormat;

  import java.util.ArrayList;

  import java.util.List;



  public class InsertAllVeryIntoSolr {

          public static void main(String[] args) throws Exception{



                  // Solr parts

                  HttpSolrClient.Builder builder =

                                  new HttpSolrClient.Builder("http://127.0.0.1:8983/solr/movies");

                  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");



                  List<SolrInputDocument> batchDocs = new ArrayList<>();



  // sqlite parts

                  Class.forName("org.sqlite.JDBC");

                  try(Connection conn =

                                          DriverManager.getConnection("jdbc:sqlite:G:\\IntellijHome\\rupengImprove\\verycd.sqlite3.db");

                          //前几条数据没用 所以得跳过

                          PreparedStatement ps = conn.prepareStatement("select * from verycd where verycdid>=4077");

                          ResultSet rs = ps.executeQuery();

                          HttpSolrClient solrClient = builder.build())

                  {

                          while(rs.next())

                          {

                              // 从sqlite数据库获取信息

                                  String id  = rs.getString("verycdid");

                                  String title = rs.getString("title");

                                  String ed2k = rs.getString("ed2k");

                                  String content = rs.getString("content");

                                  // 不能通过rs.getDate来解析，因为存储使用String形式

                                  String pubtime = rs.getString("pubtime");

                                  String category1 = rs.getString("category1");

                                  String category2 = rs.getString("category2");



                                  // 把信息放入到solr的doc中

                                  SolrInputDocument doc = new SolrInputDocument();

                                  doc.setField("id", id);//默认主键字段就是"id"

                                  doc.setField("title",title);

                                  doc.setField("ed2k",ed2k);

                                  doc.setField("content", content);

                                  try

                                  {

                                          // 数据可能有乱码， 直接跳过即可！！ 这是一个基本技能，也是关键  select * from verycd where verycdid?=81434

                                          doc.setField("pubtime",dateFormat.parse(pubtime));

                                  }

                                  catch(java.text.ParseException ex)//日期格式错误

                                  {

                                          continue;//不处理这条非法数据

                                  }

                                  doc.setField("category1", category1);

                                  doc.setField("category2", category2);

                                  batchDocs.add(doc);



                                  //solrClient.add(doc);//insert

                                  if(batchDocs.size()==1000)//每1000条一批提交

                                  {

                                          solrClient.add(batchDocs);//批量插入，效率更高

                                          batchDocs.clear();//清空

                                          System.out.println("提交一批完成");

                                  }



                                  System.out.println(id);

                          }

                          if(!batchDocs.isEmpty())

                          {

                                  solrClient.add(batchDocs);//把剩下的不足1000条的最后一批再插入一次

                          }



                          solrClient.commit();

                  }

          }

  }



#+END_SRC





** 13:23 solr search                                                  :java:



使用于数据不是经常产生的,solr挺合适，现在es也可以



#+BEGIN_SRC org

  1)	SolrQuery query = new SolrQuery();是查询条件 

  query.setQuery(“description:\”王宝强\””);// description字段中包含”王宝强”的 

  QueryResponse resp = solr.query(query);

  SolrDocumentList list =  resp.getResults();

  2)	查询语法，支持AND、OR、NOT（必须是大写的），支持()运算符。 

  title:杨中科 是只要title中有“杨中科”任何一个的都匹配，如果想完全匹配的就用 title:"杨中科"

  范围比较。age在3到5之间的： Age:[3 TO 5]。age大于5的 Age:[5 TO *]

  3)	排序： 

  solrQuery.setSort("area", ORDER.desc);

  4)	分页查询： 

  solrQuery.setStart(起始行数 0开始);//limit 5,10

  solrQuery.setRows(取的条数);

  QueryResponse的getResults()为当前页查询的数据； 

  SolrDocumentList的getNumFound()为查询结果总条数； 

  5)	高亮显示

  query.setHighlight(true); // 开启高亮组件

  query.addHighlightField("content");// 高亮字段  

  query.addHighlightField("title");

  query.setHighlightSimplePre("<span class='kw'>");//标记，高亮关键字前缀  

  query.setHighlightSimplePost("</span>");//后缀  

                  读取高亮结果，在查询后

  Map<String, Map<String, List<String>>> map = resp.getHighlighting();

  然后

  Object id = doc.getFieldValue("id");

  String hlValue = map.get(id).get("content").get(0);

            就可以获得了



  5、	站内搜索思路：文章增删改查的时候也同步更新Solr；如果网站有文章、视频等不同类别的内容，就放到不同的Core中。



#+END_SRC





源代码





#+BEGIN_SRC java



  package com.f708.sousou;



  import org.apache.solr.client.solrj.SolrQuery;

  import org.apache.solr.client.solrj.SolrServerException;

  import org.apache.solr.client.solrj.impl.HttpSolrClient;

  import org.apache.solr.client.solrj.response.QueryResponse;

  import org.apache.solr.common.SolrDocument;

  import org.apache.solr.common.SolrDocumentList;



  import java.io.IOException;

  import java.util.List;

  import java.util.Map;



  public class TestSolrSearch {

      public static void main(String[] args) throws IOException, SolrServerException {

          HttpSolrClient.Builder builder =

                  new HttpSolrClient.Builder("http://127.0.0.1:8983/solr/movies");

          try(HttpSolrClient solrClient = builder.build();)

          {

              //SolrQuery  query = new SolrQuery("content:\"周星驰\"");

              SolrQuery  query = new SolrQuery("content:\"周星驰\" AND title:\"周星驰\"");

              //limit 3-6

              query.setStart(3);

              query.setRows(3);

              //高亮显示

              query.setHighlight(true);

              query.addHighlightField("title");

              query.addHighlightField("content");

              query.setHighlightSimplePre("<span class='kw'>");//标记，高亮关键字前缀

              query.setHighlightSimplePost("</span>");//后缀



              QueryResponse resp = solrClient.query(query);



              Map<String,Map<String,List<String>>> map = resp.getHighlighting();



              SolrDocumentList results =resp.getResults();

             for (SolrDocument doc:results){

                 Object id =doc.getFieldValue("id");

                 //Object id =doc.get('id');//类似

                 String hlContent = map.get(id).get("content").get(0);

                 String hlTitle = map.get(id).get("title").get(0);

                 System.out.println(doc.get("id")+","+hlTitle+","+hlContent);

                 //System.out.println(doc.get("id")+","+doc.get("title")+","+doc.get("content"));

                 System.out.println("-----------------------------------------");

                 System.out.println("-----------------------------------------");

             }

              System.out.println("Total serach count "+results.getNumFound());

          }

      }

  }

#+END_SRC



** 13:27 elasticsearch 启用                                           :java:



elasticsearch.bat -----127.0.0.1:9200 view(web界面)  127.0.0.1:9300编码

（没有安装服务，占内存暂时不装）





#+BEGIN_SRC org

  1、	elastic search的安装

  1)	官网 https://www.elastic.co/cn/downloads

  2)	下载安装Java运行环境JDK1.8；解压elasticsearch-xxx.zip；环境变量中配置“JAVA_HOME”指向JDK的目录。

  3)	打开cmd，cd到bin目录。运行elasticsearch.bat 如果报错“命令语法不正确”说明JAVA_HOME没配置好，然后好之后一定要重启cmd。

  4)	如果elasticsearch运行报错： Error occurred during initialization of VMCould not reserve enough space for 2097152KB object heap 。那么说明是内存不足，就修改config/jvm.options下的 

  -Xms1g

  -Xmx1g

  改成 

  -Xms512m

  -Xmx512m

  5)	浏览器访问http://localhost:9200/，如果不报错就说明成功了

  6)	运行成功后不要关闭cmd。



#+END_SRC





ELK: Elasticsearch   Kiberna   Logstash



https://elasticsearch.cn/ 中文社区

https://www.elastic.co/products/elasticsearch



** 13:44 es简单插入                                                   :java:



pom.xml





#+BEGIN_SRC xml

                <!-- https://mvnrepository.com/artifact/org.elasticsearch/elasticsearch -->

          <dependency>

              <groupId>org.elasticsearch</groupId>

              <artifactId>elasticsearch</artifactId>

              <version>6.1.2</version>

          </dependency>

          <!-- https://mvnrepository.com/artifact/org.elasticsearch.client/transport -->

          <dependency>

              <groupId>org.elasticsearch.client</groupId>

              <artifactId>transport</artifactId>

              <version>6.1.2</version>

          </dependency>





#+END_SRC





#+BEGIN_SRC java

         Settings settings = Settings.builder().build();

          try(TransportClient client = new PreBuiltTransportClient(settings)

                  .addTransportAddress(new TransportAddress(InetAddress.getByName("127.0.0.1"), 9300)))

          {

              HashMap<String, Object> data = new HashMap<String, Object>();

              data.put("id", 4);

              data.put("name", " Ye Zhao");

              data.put("title", "Beautiful day");

              data.put("content", "Welcome to F708");

              IndexResponse indexRes = client.prepareIndex("rupeng", "persons").setId("3").setSource(data).get();

              System.out.println(indexRes.getResult());

          }

#+END_SRC





** 13:57 es批量插入sqlite数据                                         :java:



耗时(942s)



#+BEGIN_SRC org

  2147483786

  2147483787

  2147483788

  2147483789

  2147483790

  2147483791

  Total time spend942316

#+END_SRC





#+BEGIN_SRC java

  package com.f708.sousou;



  import org.elasticsearch.action.bulk.BulkRequestBuilder;

  import org.elasticsearch.action.bulk.BulkResponse;

  import org.elasticsearch.action.index.IndexRequest;

  import org.elasticsearch.client.transport.TransportClient;

  import org.elasticsearch.common.settings.Settings;

  import org.elasticsearch.common.transport.TransportAddress;

  import org.elasticsearch.transport.client.PreBuiltTransportClient;



  import java.net.InetAddress;

  import java.net.UnknownHostException;

  import java.sql.*;

  import java.text.SimpleDateFormat;

  import java.util.Date;

  import java.util.HashMap;

  import java.util.concurrent.ExecutionException;



  public class ElasticSearchBulkInsert {

          public static void main(String[] args) throws ClassNotFoundException, SQLException, UnknownHostException, ExecutionException, InterruptedException {

                  long start = System.currentTimeMillis();



                  //sqlite驱动

                  Class.forName("org.sqlite.JDBC");

                  SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");

                  Settings settings = Settings.builder().build();

                  try (

                  //sqlite 部分

                                  Connection conn =

                                                  DriverManager.getConnection("jdbc:sqlite:G:\\IntellijHome\\rupengImprove\\verycd.sqlite3.db");

                                  PreparedStatement ps = conn.prepareStatement("select * from verycd where verycdid>=4077");

                                  ResultSet rs = ps.executeQuery();

                                 // ES部分

                                  TransportClient client = new PreBuiltTransportClient(settings)

                                                  .addTransportAddress(new TransportAddress(InetAddress.getByName("127.0.0.1"), 9300));//web      9200 ˿ڣ  ӿ   9300 ˿

                  ) {

                          // 每次得保证创建一个BUlkRequestBuilder

                          BulkRequestBuilder bulkRequest = client.prepareBulk();

//1.  sqlite  read ,   

//2.  es write

                          while (rs.next()) {

//read record

                                  String id = rs.getString("verycdid");

                                  String title = rs.getString("title");

                                  String ed2k = rs.getString("ed2k");

                                  String content = rs.getString("content");

                                  String pubtime = rs.getString("pubtime");

                                  String category1 = rs.getString("category1");

                                  String category2 = rs.getString("category2");

                                  Date dPubTime;

                                  try {

                                          dPubTime = dateFormat.parse(pubtime);

                                  } catch (java.text.ParseException ex)//

                                  {

                                          continue;//

                                  }

//write doc

                                  HashMap<String, Object> doc = new HashMap<>();

                                  doc.put("id", id);

                                  doc.put("title", title);

                                  doc.put("ed2k", ed2k);

                                  doc.put("content", content);

                                  doc.put("pubtime", dPubTime);

                                  doc.put("category1", category1);

                                  doc.put("category2", category2);



                                  //IndexResponse indeResp =  client.prepareIndex("rupeng1", "dianlv").setId(id).setSource(doc).get();



                                  // request 等待提交

                  // rupeng1数据库名   dianlv表明

                  // 每条记录是一个IndexRequest(recordRequest)

                                  IndexRequest indexReq = client.prepareIndex("rupeng1", "dianlv").setId(id).setSource(doc).request();

                                  bulkRequest.add(indexReq);

                                  if (bulkRequest.numberOfActions() == 1000) {

                                          BulkResponse bulkResp = bulkRequest.execute().actionGet();//executeGet()

                                          if (bulkResp.hasFailures()) {

                                                  System.out.println(bulkResp.buildFailureMessage());

                                                  break;

                                          }



                                          bulkRequest = client.prepareBulk(); //

                                  }

                                  System.out.println(id);

                                  //System.out.println(id+indeResp.getResult());

                          }

                          if (bulkRequest.numberOfActions() > 0)//    һ      1000

                          {

                                  BulkResponse bulkResp = bulkRequest.execute().get(); //立即执行 提交



                          }

                          long end = System.currentTimeMillis();

                          System.out.println("Total time spend" + (end - start));

                  }

          }

  }



#+END_SRC





** 14:02 es failed to get mapping more than one type                  :java:



rejecting mapping update to [rupeng] as final mapping would have more than 1 type :[persons, dianlv]

注意一个库只能有一个表(表类型)对应，即  rupeng--dianlv

                            rupeng2--dianlv2 不能 rupeng2 --dianlv3

actionGet()和get的区别







#+BEGIN_SRC java



#+END_SRC



failed



** 14:13 es clusterBlockException                                     :java:



blocked by:[FORBIDDEN/12/index read-only /allow delete(api)]



硬盘空间是否够呢？？？ high disk watermark exceeded on one or more(%多少不可用)



ES will go into read only mode once a threshold is hit>>>>







#+BEGIN_SRC org

  执行批量操作：BulkResponse bulkResponse = bulkRequest.execute().actionGet();

  不要一次性囤积太多批量操作再提交，否则会OOM，我的笔记本电脑累积了十几万条数据就OOM了。

  每批都要创建新的BulkRequestBuilder对象，不要重复使用BulkRequestBuilder对象。



  一个索引库下只能建一个type；

  当磁盘可用空间低于一定比例的时候，就会进入只读模式，再插入就会报错：ClusterBlockException[blocked by: [FORBIDDEN/12/index read-only / allow delete (api)]



#+END_SRC



** 14:22 es 删除id                                                    :java:





#+BEGIN_SRC java

  5、	删除：DeleteResponse response = client.prepareDelete("rupeng", "persons", "6666").get();

#+END_SRC



** 14:31 es基本查询  matchPhrasequery                                          :java:





#+BEGIN_SRC java

  package com.f708.sousou;



  import org.elasticsearch.action.search.SearchRequestBuilder;

  import org.elasticsearch.action.search.SearchResponse;

  import org.elasticsearch.client.transport.TransportClient;

  import org.elasticsearch.common.settings.Settings;

  import org.elasticsearch.common.transport.TransportAddress;

  import org.elasticsearch.index.query.QueryBuilders;

  import org.elasticsearch.search.SearchHit;

  import org.elasticsearch.search.SearchHits;

  import org.elasticsearch.transport.client.PreBuiltTransportClient;



  import java.net.InetAddress;

  import java.net.UnknownHostException;

  import java.util.Map;



  public class ElasticSearchBasicSearch {

          public static void main(String[] args) throws UnknownHostException {

                  Settings settings = Settings.builder().build();

                  try (TransportClient client = new PreBuiltTransportClient(settings)

                                  .addTransportAddress(new TransportAddress(InetAddress.getByName("127.0.0.1"), 9300));//web      9200 ˿ڣ  ӿ   9300 ˿

                  ) {

                          SearchRequestBuilder responsebuilder = client.prepareSearch("rupeng1").setTypes("dianlv");

                          SearchResponse resp = responsebuilder.setQuery(QueryBuilders.matchPhraseQuery("title", "王宝强")).setFrom(0)

                                          .setSize(10).setExplain(true).execute().actionGet();

  // setSize分页查询

                          SearchHits searchHits = resp.getHits();



                          System.out.println("Total search counts : " + searchHits.getTotalHits());



                          SearchHit[] hits = searchHits.getHits();

                          for (SearchHit hit : hits) {

                                  Map<String, Object> map = hit.getSourceAsMap();

                                  String id = (String) map.get("id");

                                  String title = (String) map.get("title");

                                  String content = (String) map.get("content");

                                  System.out.println(title + "                                   " + content);

                                  System.out.println("------------------------------------------------");

                                  System.out.println("------------------------------------------------");

                          }

                  }

          }

  }



#+END_SRC





** 14:36 es multiPhrasequery                                          :java:





#+BEGIN_SRC java

                          SearchResponse resp = responsebuilder.setQuery(QueryBuilders.multiMatchQuery("爱情","title", "content")).setFrom(0)

                                          .setSize(10).setExplain(true).execute().actionGet();



#+END_SRC





** 14:40 es termQuery                                                 :java:





#+BEGIN_SRC java

  SearchResponse resp = responsebuilder.setQuery(QueryBuilders.termQuery("category1", "欧美音乐")).setFrom(0)

                                          .setSize(10).setExplain(true).execute().actionGet();





  //不可以

  SearchResponse resp = responsebuilder.setQuery(QueryBuilders.termQuery("id", "10000")).setFrom(0)

                                          .setSize(10).setExplain(true).execute().actionGet();

  //可以

#+END_SRC





查不到，因为分词原理存在，欧美音乐不是按照字面上存储的，可能为1 2 3 4等，类型不要用中文汉字



** 14:46 es QueryBulders must mustNot should shouldNot                :java:





querybuilders可以不断嵌套的%%…………  termQuery fuzzyquery multiPhrasequery等

must表示AND

should 表示or

#+BEGIN_SRC java

                  BoolQueryBuilder queryBuilder= QueryBuilders.boolQuery().must(QueryBuilders.matchPhraseQuery("content","王宝强"))

                                          .mustNot(QueryBuilders.matchPhraseQuery("content","郝蕾"));

                          SearchResponse resp = responsebuilder.setQuery(queryBuilder).setFrom(0)

                                          .setSize(10).setExplain(true).execute().actionGet();

#+END_SRC





** 15:02 es add sort                                                  :java:



fluent link style， lambda编程



#+BEGIN_SRC java

                          SearchResponse resp = responsebuilder.setQuery(queryBuilder).setFrom(0)

                                          .setSize(100).addSort("pubtime",SortOrder.DESC).setExplain(true).execute().actionGet();

#+END_SRC







#+BEGIN_SRC org

  a)	addSort(String field, SortOrder order)增加排序规则，基于性能考虑，默认是不能用字符串类型字段排序的，虽然说可以解除限制，但是不要这么做。

#+END_SRC









** 15:02 es highlight                                                 :java:





#+BEGIN_SRC java

          // 排序一般是按照数值类型不要，字符串（否则就没意义了）

  HighlightBuilder hlBuilder =new HighlightBuilder();

                  hlBuilder.preTags("<span style='color:yellow'>").postTags("</span>").field("content").field("title");

                  responsebuilder.highlighter(hlBuilder);



#+END_SRC





注意Title可能没有要查找的值





#+BEGIN_SRC java

                          for (SearchHit hit : hits) {

                                  Map<String, Object> map = hit.getSourceAsMap();

                                  String id = (String) map.get("id");

                                  String title = (String) map.get("title");

                                  String content = (String) map.get("content");



                                  // highlighter 得重新抽取

                                  HighlightField hlTitle = hit.getHighlightFields().get("title");//Title可能不存在 title没有高亮的字

                                  HighlightField hlContent = hit.getHighlightFields().get("content");

                                  System.out.println((hlTitle==null?title:hlTitle) + "                                   " + (hlContent==null?content:hlContent));

                                  System.out.println("------------------------------------------------");

                                  System.out.println("------------------------------------------------");

                          }

#+END_SRC







可能多段高亮

#+BEGIN_SRC java

  System.out.println((hlTitle==null?title:hlTitle.getFragments()[0]) + "                                   " + (hlContent==null?content:hlContent.getFragments()[0]));

                                  S

#+END_SRC





** 15:21 ES combat with solr                                          :java:





#+BEGIN_SRC org



    9、	Solr和ES的比较

    a)	ES是后起之秀，Solr比较成熟，不过比较传统；

    b)	Solr对于“一边加入索引、一边搜索”这种实时搜索，性能比较低；

    c)	ES对于实时搜索性能比较好，而且ES做集群更简单；

    d)	没有特殊理由选择ES；



    ES比较占用性能，充分利用性能

#+END_SRC





** 15:37 快速生成一个类到另一个类的setProperty                        :java:





http://blog.xiaohansong.com/2017/02/03/codemaker/

光标一定要在class关键字旁边



** 15:56 lucen插入数据                                                :java:



手动建立d:/temp/lucene文件夹



pom.xml





#+BEGIN_SRC java



  <dependencies>

      <dependency>

          <groupId>org.xerial</groupId>

          <artifactId>sqlite-jdbc</artifactId>

          <version>3.21.0</version>

      </dependency>



      <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-core -->

      <dependency>

          <groupId>org.apache.lucene</groupId>

          <artifactId>lucene-core</artifactId>

          <version>7.2.1</version>

      </dependency>



      <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-common -->

      <dependency>

          <groupId>org.apache.lucene</groupId>

          <artifactId>lucene-analyzers-common</artifactId>

          <version>7.2.1</version>

      </dependency>

      <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-analyzers-smartcn -->

      <dependency>

          <groupId>org.apache.lucene</groupId>

          <artifactId>lucene-analyzers-smartcn</artifactId>

          <version>7.2.1</version>

      </dependency>

      <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-queryparser -->

      <dependency>

          <groupId>org.apache.lucene</groupId>

          <artifactId>lucene-queryparser</artifactId>

          <version>7.2.1</version>

      </dependency>

      <!-- https://mvnrepository.com/artifact/org.apache.lucene/lucene-highlighter -->

      <dependency>

          <groupId>org.apache.lucene</groupId>

          <artifactId>lucene-highlighter</artifactId>

          <version>7.2.1</version>

      </dependency>



  </dependencies>



         <build>

          <plugins>

              <plugin>

                  <groupId>org.apache.maven.plugins</groupId>

                  <artifactId>maven-compiler-plugin</artifactId>

                  <version>3.1</version>

                  <configuration>

                      <verbose>true</verbose>

                      <fork>true</fork>

                      <!--          <executable>${JAVA8_HOME}/bin/javac</executable>-->

                      <source>1.8</source>

                      <target>1.8</target>

                  </configuration>

              </plugin>

          </plugins>

      </build>

#+END_SRC





#+BEGIN_SRC java



  package com.f708.lucene;



  import org.apache.lucene.analysis.Analyzer;

  import org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;

  import org.apache.lucene.document.Document;

  import org.apache.lucene.document.Field;

  import org.apache.lucene.document.FieldType;

  import org.apache.lucene.index.IndexOptions;

  import org.apache.lucene.index.IndexWriter;

  import org.apache.lucene.index.IndexWriterConfig;

  import org.apache.lucene.store.Directory;

  import org.apache.lucene.store.FSDirectory;



  import java.io.IOException;

  import java.nio.file.Paths;

  import java.sql.*;



  public class LuceInitalTest {

      public static void main(String[] args) throws IOException, ClassNotFoundException, SQLException {

          //   中文分词解析器

                  Analyzer luceneAnalyzer = new SmartChineseAnalyzer();

                   //isEmpty=false   需要手动建立 d:/temp/lucene

                  Directory dir = FSDirectory.open(Paths.get("d:/temp/lucene/"));



                  IndexWriterConfig iwc = new IndexWriterConfig(luceneAnalyzer);

                  iwc.setOpenMode(IndexWriterConfig.OpenMode.CREATE_OR_APPEND);

  //5、	如果自己用Lucene开发，开发工作量比较大，需要控制好并发写入、集群等各种问题，而且由于检索服务器一般是单独一台服务器，还要自己开发服务接口供其他系统调用，因此一般不建议直接用Lucene。 

          // writer只能单线程写入，要想多线程得用生产者消费者模式，进行改写

          IndexWriter writer = new IndexWriter(dir, iwc);



                  Class.forName("org.sqlite.JDBC");

                  Connection conn =

                                  DriverManager.getConnection("jdbc:sqlite:G:\\IntellijHome\\rupengImprove\\verycd.sqlite3.db");

                  PreparedStatement ps = conn.prepareStatement("select * from verycd where title is not null limit 0,50000");

                  ResultSet rs = ps.executeQuery();

                  int i=0;



                  FieldType fieldTypeStoreNotTokenized = new FieldType();

                  fieldTypeStoreNotTokenized.setStored(true);//保存原始内容

                  fieldTypeStoreNotTokenized.setTokenized(false);//



                  FieldType fieldTypeStoreTokenized = new FieldType();

                  fieldTypeStoreTokenized.setStored(true);//存储原始数据

                  fieldTypeStoreTokenized.setTokenized(true);//进行分词保存

                  fieldTypeStoreTokenized.setIndexOptions(IndexOptions.DOCS_AND_FREQS_AND_POSITIONS_AND_OFFSETS);

                  fieldTypeStoreTokenized.setStoreTermVectorOffsets(true);

                  fieldTypeStoreTokenized.setStoreTermVectorPositions(true);

                  fieldTypeStoreTokenized.setStoreTermVectors(true);



                  while(rs.next())

                  {

                          int id = rs.getInt("verycdid");

                          String title=rs.getString("title");

                          String ed2k=rs.getString("ed2k");

                          String content=rs.getString("content");



                          Document doc = new Document();

                          doc.add(new Field("id", String.valueOf(id),  fieldTypeStoreNotTokenized));

                  doc.add(new Field("title",title,fieldTypeStoreTokenized));// 查询字段

                  doc.add(new Field("ed2k", ed2k,fieldTypeStoreNotTokenized));

                  doc.add(new Field("content",content, fieldTypeStoreTokenized));// 查询字段

                          writer.addDocument(doc);

                          System.out.println(i++);

                  }

                  writer.flush();



                  writer.close();

                  dir.close();



                  rs.close();

                  ps.close();

                  conn.close();

          }



  }

#+END_SRC





** 15:58 lucene查找                                                   :java:





分词保存一定得做

lucene一定得ts.reset()一下



#+BEGIN_SRC java

  package com.f708.lucene;



  import org.apache.lucene.analysis.Analyzer;

  import org.apache.lucene.analysis.TokenStream;

  import org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;

  import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;

  import org.apache.lucene.document.Document;

  import org.apache.lucene.index.DirectoryReader;

  import org.apache.lucene.index.IndexReader;

  import org.apache.lucene.index.Term;

  import org.apache.lucene.search.IndexSearcher;

  import org.apache.lucene.search.PhraseQuery;

  import org.apache.lucene.search.ScoreDoc;

  import org.apache.lucene.search.TopDocs;

  import org.apache.lucene.store.Directory;

  import org.apache.lucene.store.FSDirectory;



  import java.io.IOException;

  import java.nio.file.Paths;

  import java.util.ArrayList;



  public class SearchWithLucene {

      public static void main(String[] args) throws IOException {

          Analyzer luceneAnalyzer = new SmartChineseAnalyzer();

                   //isEmpty=false  ʾ

                  Directory dir = FSDirectory.open(Paths.get("d:/temp/lucene/"));

                  IndexReader indexReader = DirectoryReader.open(dir);



                  IndexSearcher indexSearcher = new IndexSearcher(indexReader);



                  ArrayList<String> words = new ArrayList<String>();

                  TokenStream ts = luceneAnalyzer.tokenStream("content", "周润发");

                  ts.reset();

                  while(ts.incrementToken())

                  {

                          CharTermAttribute cta = ts.getAttribute(CharTermAttribute.class);

                          words.add(cta.toString());

                  }



                  PhraseQuery.Builder queryBuilder =new PhraseQuery.Builder();

                  for(String word : words)

                  {

                          queryBuilder.add(new Term("content",word));

                  }

                  queryBuilder.setSlop(10);





                  PhraseQuery phraseQuery = queryBuilder.build();



                  TopDocs docs = indexSearcher.search(phraseQuery,10);

                  System.out.println("Total Counts "+docs.scoreDocs.length);

                  for(ScoreDoc scoreDoc : docs.scoreDocs)

                  {

                          Document document =  indexSearcher.doc(scoreDoc.doc);

                          System.out.println(document.get("content"));//     



                  }

      }

  }



#+END_SRC





** 16:00 全文检索 combat with 全表扫描                                :java:





#+BEGIN_SRC org



  全文搜索引擎

  1、	所有网站、App几乎都有搜索；

  2、	like做搜索的缺点：全表扫描性能低。

  3、	全文检索效率非常高，基本原理：文章进行分词处理，建立一个目录，目录记录每个词在哪篇文章中出现。 

  4、	什么是全文检索，原理是什么？分词。

 

  5、	全文检索引擎有很多，很多数据库本身也支持，也有开源的lucene等。直接用lucene开发难度比较大，有Solr、 elasticsearch等基于lucene开发的框架。

  6、	Solr、elasticsearch等是一台单独的服务器，使用java编写；运行后我们的程序向solr服务器发请求插入数据，也可以向solr服务器发请求搜索数据； 





#+END_SRC





** 16:01 全文检索问题                                                 :java:





#+BEGIN_SRC org

  1、	面试常考问题：多少条数据(20万条左右)；占多大空间（3G）；索引写入用多长时间(10min,因为批量写入，较快)；

  2、	补充：一元分词StandardAnalyzer、二元分词CJKAnalyzer、基于词库的分词SmartChineseAnalyzer



#+END_SRC









** 16:02 分词算法                                                     :java:



分词: 把词语分成一个个字或者更短词语

1. 1元分词，一个汉字一个词，效率最高

2. 2元分词: 还要 要自  自己  己干 干活

3. 基于字典分词: 

       



** 16:08 IDEvim 快捷键冲突了                                          :java:



Setting - Other Settings -Vim Emulation中可以自己选择如何处理冲突的按键



Ctrl+N 修改为IDE了，方便些，显示类信息  

** 16:15 很有意思的字典分词                                           :java:





#+BEGIN_SRC java

  package com.f708.lucene;



  import org.apache.lucene.analysis.Analyzer;

  import org.apache.lucene.analysis.TokenStream;

  import org.apache.lucene.analysis.cn.smart.SmartChineseAnalyzer;

  import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;



  import java.io.IOException;



  public class FenCiTest {

      public static void main(String[] args) throws IOException {

          //StandardAnalyzer 一元分词

          //CJKAnalyzer CJK Chinese Japanese Koren   中文分词  二元分词   CJK:苍井空

          //SmartChineseAnalyzer  IKAnanlyzer 基于字典分词

          Analyzer luceneAnalyzer = new SmartChineseAnalyzer();

          //Analyzer luceneAnalyzer = new CJKAnalyzer();

         // Analyzer luceneAnalyzer = new StandardAnalyzer();



          TokenStream ts = luceneAnalyzer.tokenStream("content", "5、	如果自己用Lucene开发，开发工作量比较大，需要控制好并发写入、集群等各种问题，而且由于检索服务器一般是单独一台服务器，还要自己开发服务接口供其他系统调用，因此一般不建议直接用Lucene。 ");

          ts.reset();

          while(ts.incrementToken())

          {

              CharTermAttribute cta = ts.getAttribute(CharTermAttribute.class);

              System.out.println(cta.toString());

          }



      }

  }



#+END_SRC





** 16:30 双方约定，网络支付                                           :java:





#+BEGIN_SRC org

  用户：上网买东西的人；

          第三方支付平台：支付宝、微信等；(未提供给个人用户，至少是个体户或者公司才可以获得接口)

          商家网站：京东、如鹏网、当当等。

  支付宝、微信等这些第三方支付平台等都提供了支付的接口，商家网站只要和他们签约，拿到接口，然后对接开发网站就可以提供在线支付的功能。用户在网站上购买商品，跳转到网络支付的网站（带着金额、订单号等信息），用户支付完成后，页面跳转回网站，带着“支付成功”的消息，这样网站就知道支付成功了，就可以给用户发货。

          第三方支付平台只是通知商家网站“用户支付的钱我收到了，钱放到了你的账号，用户购买订单号为***的商品支付成功了”，这时候钱还是在商家的第三方支付平台账户那里，第三方支付平台会定期把钱再打给商家网站的银行账号（目前，支付宝需要商家手动提现，公司对公户，微信是T+1到账）。



#+END_SRC





双方，上下游约定



上游 钱+10000算出一个md5（小票盖章之后 就把货物给你，没盖章不给，但是如果章被假冒了？所以有些人直接跟着你）

下游 钱+10000算出一个md5 查看是否一致



** 16:43 支付模拟器                                                   :java:



http://paytest.rupeng.cn/



** 21:34 GTK fortran                                               :Fortran:





#+BEGIN_SRC C

  This branch uses GTK+ 2.



  The gtk-fortran project aims to offer scientists programming in 

  Fortran a cross-platform library to build Graphical User Interfaces

  (GUI). Gtk-fortran is a partial GTK+ / Fortran binding 100% written

  in Fortran, thanks to the ISO_C_BINDING module for interoperability

   between C and Fortran, which is a part of the Fortran 2003 standard.



  To install gtk-fortran, please follow the instructions in the INSTALL

  file. More informations are available on the project wiki:

  https://github.com/jerryd/gtk-fortran/wiki



  Please post bugs on GitHub:

  https://github.com/jerryd/gtk-fortran/issues



  Vincent MAGNIN

#+END_SRC





** 21:37 StringBuilder字符串拼接速度最快                              :java:



但是如果已经微乎其微，或者量很小，比较这些就没什么太大意义。



在性能上 ++ 是最差的



StringBuilder 最快

https://github.com/venusdrogon/feilong-core/wiki/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%8B%BC%E6%8E%A5%E6%B1%87%E6%80%BB



** 21:57 猎鹰重型”（Falcon Heavy）                                    :宇宙:



大宇宙时代的开启……<2018-02-07 周三> 凌晨



LEO（近地轨道）63.8吨，GTO（地球同步转移轨道）26.7吨，Mars（火星轨道）16.8吨——“猎鹰重型”稳稳地摘下了世界现役火箭运载能力的金牌





挑战1：

1. 多发动机组合的高可靠性设计技术

为它提供高达22819KN起飞推力的，是同时工作的27台梅林（Merlin-1D+）发动机。这让“猎鹰重型”也成为了目前世界上发动机数量最多的火箭。



挑战2：

在箭体设计上，“猎鹰重型”突破了“要保证控制系统稳定、长细比不能大于16”的常规思路，火箭长细比（长度与直径之比）接近20。换句话说，3个3.6米直径的火箭模块并联，实现了通常观念中“大芯”才能获取的强大运载能力。这不仅使得这枚火箭呈现优雅颀长的外形，也提供了构建“大火箭”结构的另一种路径。



新挑战3：

将人类送上火星的运输系统叫星际传输系统(interplanetary Transport System ITS), 由可重复使用的飞船和BFR火箭构成，Big Fucking Rocket.

BFR能将乘客在1小时内送抵地球上任意地方：香港到新加坡22分钟，伦敦到迪拜29分钟，洛杉矶到多伦多24分钟。





挑战4：（动力冗余技术）

猎鹰重型”运载火箭所采用的动力冗余技术是指在其主动段飞行过程中，当1台或多台发动机发生故障，在不影响其余发动机正常工作的情况下，箭载控制系统对故障发动机实施紧急关机、故障隔离，继续执行并完成主发射任务的一项技术





别忘了，它正在把一辆樱桃红色的特斯拉跑车送上地火转移轨道



目前绕火星工作的探测器仍有6枚：

美国的

    “火星奥德赛”（Mars Odyssey）、

    “火星勘测轨道飞行器”（Mars Reconnaissance Orbiter）和

    “火星大气与挥发演化探测器”（MAVEN），

欧空局的

    “火星快车号”（Mars Express），

印度的

    “曼加里安火星探测器”（Mars Orbiter Mission），以及

欧洲和俄罗斯联合研制的

    “微量气体轨道器”（Trace Gas Orbiter）。





这位同时在航天、电动汽车、太阳能等多领域纵横驰骋的科技狂人，业内人士感慨：“他每次都将某个行业之外的技术用于改变这个行业，这种跨界创新可能会成为当今社会科技创新的一个主流方向。”



** 22:58 计划再思考                                                   :大山:



其实说到做计划，也是说让你有做事情先后的意识，让你知道什么该先做，什么后做(此鸡汤没用)



什么比较重要，什么不重要， 明白取舍，明白你做事情的挑战性在哪里……(凭什么？？)







#+BEGIN_SRC org

  6、做事没计划的人。想到哪做到哪，做任何事情都比别人慢半拍，严重影响企业的效益。



8、喜欢揽权，又不落实工作，不解决问题的人。有些企业的所谓功臣，平时不上进，不学习，权力一大堆，但不拿来开展工作，而是拿来显威望，严重阻碍企业的发展。



9、做事喜欢情绪化之人。心情好时做事做得非常好，心情不好时什么事都不做，只知道向下属发脾气



10、不尊重科学、不爱学习、不喜欢接受新的事物，因为自己的愚昧，而影响工作的人。

  http://mp.weixin.qq.com/s/PMvYqRMj0VG1S91k4k0Rnw

#+END_SRC

* 20180208.org
** 12:30 团队的抗狼性                                                 :芝麻:



+ 面粉（杠杆：借贷消费 超前消费）

+ 面包



#+BEGIN_SRC org

  如果融创未来两三年还能高速发展，房子卖到7000亿，8000亿一年，他的各项费用急剧增加，人员，管理，广告营销等都在当期发生。如果市场变天了，房子卖不动了，高杠杆的财务费用会极大侵蚀利润。当然大家都希望第一种情况发生，因为第二种情况发生，对企业是灾难性的。所以大家研究房地产必须持续观察，持续跟踪，不能静态的在哪算。一个好的房地产企业，可以分几个层面观察。

  一是，战略对头，面粉低的时候玩命储存，放对了杠杆，

  二是，把面包卖的比同行贵。

  三是，企业经营牛逼，是个优秀的企业，团队有抗狼性，无论是内控，销售，产品研发都不错，单位成本控制的好。

  四是，能拿到相对便宜的钱。



  总体来说融创在内的几家龙头房企做的还不错，因为他们大了，腾挪空间有，能熨平好多风险。但是也不是说绝对，还得持续观察，因为市场在变，国家的政策在变，人们的需求在变，对产品的需求也在变。

  总之一句话，自己研究明白了，面对股价的波动心里才踏实。千万别无脑的抄作业，因为是人都会犯错误，无脑抄会更让你无所适从，一定要消化吸收

#+END_SRC





http://blog.zhulong.com/u11238172/blogdetail8134397.html







 1、相互推诿，不能自觉主动承担责任，不能精益求精为企业创造利润；



2、上下级部门和同级部门之间存在沟通鸿沟，甚至发生矛盾、产生冲突；

3、工作心态不积极、消极怠工、工作被动、表现懒散；

4、员工整体纪律性不强、团队协作能力差；



5、员工缺乏责任心、缺乏感恩的心、玩忽职守、制造问题；

6、组织中环境沉闷，缺乏活力；





8、缺乏面对问题的勇气及解决问题的创造力；



10、没有目标概念与实现达成目标的承诺性；



** 13:32 HA_Qtranslate不错的翻译



** 16:58 kubernetes(k8s)                                              :java:



Kubernetes（通常写成“k8s”）是最开始由google设计开发最后贡献给Cloud Native Computing Foundation的开源容器集群管理项目。它的设计目标是在主机集群之间提供一个能够自动化部署、可拓展、应用容器可运营的平台。Kubernetes通常结合docker容器工具工作，并且整合多个运行着docker容器的主机集群。



http://blog.csdn.net/liangyihuai/article/details/54983521

https://github.com/kelseyhightower/kubernetes-the-hard-way



https://kubernetes.io/docs/setup/pick-right-solution/



https://github.com/kubernetes/kubernetes



https://www.cnblogs.com/zhenyuyaodidiao/p/6500720.html  核心概念









* 20180209.org
** 01:13 官方的yasnippet emacs缩写模板库                         :emacslisp:



https://github.com/AndreaCrotti/yasnippet-snippets

* 20180213.org
** 18:22 Everything新功能                                             :芝麻:





1. 添加标题定制（？）

2. 添加Not通配符

3. 添加特殊情况通配符

4. 为QTWeb 添加认证支持

5. 添加了一个排除隐藏文件和系统文件的选项









* 20180214.org
** 22:36 nutzboot 快速创建微服务                                      :java:





#+BEGIN_SRC sh

  https://nutz.io/

#+END_SRC



以nutz为核心，用极小的开发成长，帮你快速搭建生产级微服务。

* 20180215.org
** 00:16 你的作品和产品是你和世界的唯一交流方式                  :java:地球:



你的作品和产品是你和世界交流的唯一方式。你看，这就是想法和产品的区别。



https://dbarobin.com/2018/01/06/blockchain-community/





* 20180220.org
** 10:27 emacs-lisp tutorial                                     :emacslisp:



http://www.bagualu.net/wordpress/archives/6596

http://www.bagualu.net/wordpress/archives/category/emacs



** 14:08 髓鞘质                                                       :西瓜:





#+BEGIN_SRC sh

  1、我们不知道的“髓鞘质”



  髓鞘质理论是全书的生物学理论基础，作者所阐释的一切都建构在以下四点研究成果之上：



  (1)髓鞘质越厚，人的技能（才能）越精确、敏捷、自如，越多人就越聪明。



  (2)髓鞘质的生长有利于所有类型的技能，包括智力型和体力型。



  (3)精深练习对髓鞘质的生长最有效。即提供充分的犯错机会、不断地通过犯错、纠错（关注、反馈）才能刺激髓鞘质的生长。



  (4)髓鞘质与肌肉的成长机理相似——努力提起勉强可以提起的东西肌肉会越来越强壮。在精深练习时，努力完成那些勉强可以完成的事情，技能就会越来越敏捷和准确。



  因此，在学习中，犯错让你更聪明，当然，犯错后要反馈、继续练习，这样才能刺激髓鞘质。

#+END_SRC







https://www.jianshu.com/p/6f2a62fb8615









** 14:10 精深练习                                                     :西瓜:





#+BEGIN_SRC sh

  2、所谓的“精深练习”



  “精深练习不是简单的挣扎，而是有目的的奋斗：选定目标、努力争取、评估差距、回到初始步骤。”精深练习需要我们有着“吹毛求疵、死磕到底”的精神。



  在阅读到作者介绍的“精深练习”时，我想有一个真实鲜活的例子完全可以证明。



  在安徽六安地区，有一个被成为“全亚洲最大高考工厂”的学校叫“毛坦厂”，曾在纪录片《舌尖上的中国第二季》播出。



  这所大别山下的偏僻学校，学生们不研究明显、不谈论八卦，他们学习的核心只有一个，那就是一定要考大学，除此之外，一无所有。



  每天，至少要学习17个小时，不停地刷题，历年考题刷了有10遍，做题做到恶心的程度，做错了题不是挨骂，而是挨打。每天有着严格的作息时间，像监狱一般纪律严明，很多在这所学校复读过的人说，那简直是没有人生自由的岁月。所有的老师穿的衣服全是学校统一发的运动服，就是为了不让学生分心，从而专心学习。



#+END_SRC



* 20180222.org
** 11:08  结论的重要性(不带结论的只是框架）                           :西瓜:



不带结论的论调，只是框架而已，没有你的输出



结论是你的观点灵魂， 也表明你的存在。



要想想看这些故事能用在哪里，讲了什么道理



** 17:42  eova                                                        :java:





#+BEGIN_SRC org



  EOVA-最简单的快速开发平台



  简单才是高科技，因为简单所以更快，降低70%开发成本。



  Eova适合所有对UI没有严苛要求的管理系统!

  Easy Object View Admin(简单对象视图管理系统)



      Easy 简单开发

      Object 元数据驱动业务

      View 常用功能界面

      Admin 信息管理和维护



  Eova官方社群



      有问题不用怕，社区问答来帮你：快速提问

      Eova快速开发2K群：578977478 小伙伴们都在等你哟！



#+END_SRC



* 20180225.org
  干自己不喜欢的事情的人



  因为喜欢，所以才会热爱，因为热爱，才会想要去创新，去发展。只有心里始终抱着热忱，才会去将自己的工作产品当成艺术品来对待，你的工作才会有创新，有创新，在未来才不会被淘汰。那些得过且过的人，在未来就被排挤的毫无生存之地。



  不善与人沟通的人



  未来的社会，那些单调重复，不需要任何创造性的工作都会被机器人所代替，就好比那些流水线上的机械操作，已经越来越被机器手所取代。以后人们的工作主要在于需要沟通与交流、需要创造力与激情的行业，现在开始锻炼你的情商吧。



  不注重自己身体健康的人



  很多职场人压力大，晚上会释放自己的压力，透支身体，给未来留下了隐患，这是得不偿失的，职场人的压力确实很大，但在未来，物质和生活水平一定会不断提高，社会福利保障会越来越完善，留住你健康的身体，好好享受未来的生活吧。



  4. 不愿改变的人



  很多人还陷在过去的“金饭碗”的幻想里。收费站取消人工收费后，那位凌乱的中年人，“我40岁了，只会收费，别的什 么也不会”。明知道社会的潮流已经发生了变化，却固执的呆在原地不动，不愿改变，就只能被淘汰。



  5. 不会宣传自己的人



  “是金子总会发光”，这个说法不知害了多少人。等别人来挖掘你才能发光，那可能会等到你地老天荒了。现在的社会 已经不是诸葛亮那是“三顾茅庐”的时代，你的知识与技能需要及时快速的反馈到社会中，不然还没有等到别人挖掘 到你这颗金子，你的知识与技能就已经过时了，也就被人抛弃了。



  6. 交际圈太小的人



  未来社会拼的是资源，是人脉。社会资源已经被极度的集中化，每个人能够分得的资源已经极少极少。仅靠我们自 己手中的资源，已经不足以让我们过上安稳的生活，“共享”已经成为时代的主题，有资源才能共享。

#+END_SRC





** 20:55  github 与区块链                                       :blockchain:







#+BEGIN_SRC org

  今天我们介绍了共享经济的先驱 GitHub，希望你能掌握：

  第一，GitHub 的成功核心就在于超越金钱回报的精神鼓励。就像林纳斯说的那样：“金钱并不是最强大的动力。人们在激情的驱动下，在享受快乐时所做的工作是最出色的。”

  第二，共享经济的本质是一个更为宽泛的理念，它的核心离不开四个方面，包括协作、社交、开放和消费者意识。就像 GitHub 的成功离不开开发者的线上协作、互动、代码开源以及对开源软件坚定的支持态度。

  第三，对于很多人来说，开放意味着手中来之不易的资源面临着控制权和价值的流失，但实际上，开放平台吸引人才创造的价值要远远超过它所带来的问题，我们说，这就是开放的力量。

  https://dbarobin.com/  温国兵博客 blog



  https://github.com/BlockchainOne/WeChat  微信聊天记录

#+END_SRC





** 22:03 Git和区域链的区别和联系                                :blockchain:





#+BEGIN_SRC org



  一、相似性



      分布式



  Git 确保每个代码仓库在本地保留完整的项目库，而不仅仅是自己在工作的这个分支和自己的提交历史。同时也保留了最近这次pull 下来后的所有快照和索引信息。



  区块链上，每个节点在本地保存完整数据库，而不仅仅是自己的交易信息。



    2. 可追溯性



  图1: 比特币交易链



  图2:Git commit 链



  Git commit 链上，每个commit 对象都包含父级对象（上一次commit的对象，除了第一个commit），对之前的记录全部可追溯。



  区块链上，每个区块都包含前一个区块的索引（除了创世区块）,可以追溯之前所有有效交易。



  3. 不可篡改



  Git 的commit 链中，每个对象本身在存储前都计算校验和，然后以校验和来引用。一旦修改，校验和就会不对， 这意味着不可能在 Git 不知情时更改任何文件内容或目录内容。



  Git 用以计算校验和的机制叫做 SHA-1 散列（hash，哈希）。 这是一个由 40 个十六进制字符（0-9 和 a-f）组成字符串，基于 Git 中文件的内容或目录结构计算出来。 SHA-1 哈希看起来是这样：



  24b9da6552252987aa493b52f8696cd6d3b00373



  区块链中，每个区块包含上个区块ID，本区块ID两个SHA-256散列，这两个散列都是基于区块内容计算出来。一旦修改内容，则散列将变化，和其他节点的链不一致，最终不能加入到最长链中，因此无法真正篡改内容。





  二、差异性



      集体共识和中央节点意志：



               1 - 区块链是基于集体共识（POW/POS)来merge，形成最长链，最长链即为主链。



               2 - 而Git 体系里，通过仓库托管平台来进行多节点合作时，是平台项目的管理者掌握了merge的权力，体现的是中央节点的意志。



       2. 密码学



               1 - 比特币区块链中，密码学主要用到了以下方式



      在比特币区块链的整个体系中，大量使用了公开的加密算法，如Merkle Tree哈希数算法，椭圆曲线算法、哈希算法、对称加密算法及一些编码算法。各种算法在比特币区块链中的作用如下：



       a)哈希算法



      比特币系统中使用的两个哈希函数分别是：1.SHA-256，主要用于完成PoW（工作量证明）计算；2.RIPEMD160，主要用于生成比特币地址。



      b)Merkle哈希树



      基于哈希值的二叉树或多叉树，在计算机领域，Merkle树大多用来进行完整性验证处理，在分布式环境下，其进行完整性验证能大量减少数据传输和计算的复杂程度。



      c)椭圆曲线算法



      比特币中使用基于secp256k1椭圆曲线数学的公钥密码学算法进行签名与验证签名，一方面可以保证用户的账户不被冒名顶替，另一方面保证用户不能否认其所签名的交易。用私钥对交易信息签名，矿工用用户的公钥验证签名，验证通过，则交易信息记账，完成交易。



      d)对称加密算法



      比特币官方客户端使用AES（对称分组密码算法）加密钱包文件，用户设置密码后，采用用户设置饿密码通过AES对钱包私钥进行加密，确保客户端私钥的安全。



      e)Base58编码



      Base58是比特币使用的一种独特的编码方式，主要用于产生比特币的钱包地址，其类似于古典密码学里的置换算法机制，目的是为里增加可读性，把二进制的哈希值变成了我们看到的地址“177rNLTxYAaXqTrrJPRsQNxvR9a1gF5P3K”。





               2. Git：主要用了SSH 秘钥来进行远程登录验证，用了SHA-1来进行代码内容校验和。





      SSH是Secure Shell的缩写，由IETF的网络工作小组（Network Working Group）所制定,是一种专为远程登录会话和其他网络服务提供安全性的协议。利用 SSH 协议可以有效防止远程管理过程中的信息泄露问题。



      SSH传输的过程如下:

      (1)远程主机收到用户的登录请求，把自己的公钥发给用户。

      (2)用户使用这个公钥，将登录密码加密后，发送回来。

      (3)远程主机用自己的私钥，解密登录密码，如果密码正确，允许用户登录。





  参考：



  1.https://zhuanlan.zhihu.com/p/33644436



  2.区块链中的密码学

#+END_SRC



* 20180226.org
** 04:20 看不见 看不懂 看不起 来不及                                  :地球:



任何一次机遇的到来，都必将经历四个阶段:“看不见”、



看不起”、“看不懂”、最后：“来不及”！

 

先知先觉经营者 ，后知后觉跟随者 ，不知不觉消费者！

 

这个时代，永远属于那些癫狂、提前感知大势、而且超级自信、敢于坚持的人。





http://mp.weixin.qq.com/s/VhksvYDJ7NJiwJn6WJT9oA





在汽车产业争夺战中，为什么不是那些国企央企凸显出来？为什么不是那些大资本家凸显出来？为什么世界三大汽车厂商，乃至后来的特斯拉，背后都涌动着中国人的身影？

 

这里有李书福的智慧，有他增效降本的优质管理之道，有他全球布局的独到之处，这也是李书福对中国未来强盛最大的赌注和信心。



每一次的怀疑，都是李书福最大的动力。





李书福麾下已经拥有沃尔沃汽车、Polestar、领克汽车、吉利汽车、伦敦电动汽车、远程商用车等多个品牌，吉利控股还对宝腾汽车、路特斯汽车及太力飞行汽车进行了战略性投资。

 

根据吉利的2020200计划，吉利汽车到2020年进入全球汽车企业前十强，同时成为最具竞争力和受人尊敬的中国汽车品牌，刚推出这个计划的时候，很多人对之嗤之以鼻，结果李书福一次次用实际行动证明了“汽车疯子”的汽车梦绝非虚言。





2010 年，这个“赌徒”又干了一件匪夷所思的事。吉利以 18 亿美元的价格将沃尔沃汽车公司收入囊中。



** 05:54 中国人如何经营自己                                           :地球:



生活在恐惧和鄙视的躯壳下的我们



#+BEGIN_SRC org





  大家都知道，在中国人的圈子里，有很多人黑我。我懒得去看，但是有好心人告诉我，黑我的网站有知乎，MITBBS，V2EX。还有成都某码农 QQ 群，里面都是 Python 爱好者，他们可瞧不起我了，每个人都觉得自己比我牛…… 现实生活中也有听说我是谁之后，态度诡异，阴阳怪气的。我妈总是说我不会经营自己，让我向国内的一些名人学习一下技巧。可是我一直对此不屑一顾，直到今天才发现新大陆……

  网络上的网民，喜欢采用像黑美国总统特朗普一样的办法，拿起别人只言片语，断章取义，或者歪曲原意，或者干脆完全杜撰，力图把他塑造成一个自高自大，目空一切，很难相处的人。他们喜欢在“王垠是一个什么样的人”这样的知乎问题下面作答：我认为王垠是一个…… 说得好像认识我，见过我一样。而其实我不认识任何一个会在知乎上回答问题的人。

  现实生活中的某些人呢，也许还是受了网络的影响，见面的时候会这样表示他们的尊敬：“王垠，我听说你在网上很有名啊！” “王垠，我们这个地方做得不好，你可不要在博客上骂我们哈！” “王垠，我听说你有个博客，可以给我看看吗？…… 哦，谈谈这个，谈谈那个…… 哦，呵呵呵，知道了！”

  显然，这些人是话中有话，寓意深刻的。每次遇到这样的人，我就后悔跟他们打招呼。你可能无法理解这种遗憾，一种对人心的失望。久而久之，就不想去认识这个领域的中国人了。

  在与挺多中国人的接触中，我都感觉到一种很不正常的心态。开口闭口这总那总的，互相称呼大牛大师的…… 再加上如果他们听说我是“名人”，或者知道我的一些事情，那种感觉就更诡异了。当然，我也遇到少数真诚一点的中国人，然而实话说吧，这样的人非常之少。

  中国人，特别是 IT 领域的，似乎不明白如何尊重一个人。也许就像柏杨的『丑陋的中国人』所说，中国人的心里只有对彼此的恐惧，不是恐惧就是鄙视，就是没有爱。直接叫你个“大师”，免得你觉得没有受到足够的“尊敬”，或者就干脆戏谑和嘲笑你。不管叫你大师还是嘲笑你，你对于他们不是一个人，而是一个可以利用的东西。恐惧和虚伪在操纵着这一切，而不是真心实意的尊重。对人起码的尊重都是如此困难，这跟中国人吃完饭喜欢抢着付账，吃饭时互相敬酒的习俗，可能是同样的渊源。

  大概是因为中国人生活太无聊吧，很多人特别爱上网，所以经常在现实中遇到的人，感觉跟网民也没有很大差别。很多人闲得无聊就上 MITBBS，知乎，今日头条，微博…… 成天埋着头。所以呢，不知不觉说话想事情就变得跟网民一样了。我问一个老朋友：“你现在哪里工作呢？” 答曰：“哎呀，就是那个你最瞧不起的 Apple 啊！” 我不知道自己哪里说过瞧不起 Apple 了，而且我肯定没跟他说过。很显然，他没有看过我批评 iPhone 设计的文章原文，而只是在网络上听网民们转述：“王垠骂完了 Google 和微软，又开始骂 Apple 了！”

  这些人很喜欢说我在“喷”，而其实我只是在理性的评价。我看出来了，他们是有目的的。他们要妖魔化王垠，把他说成是一个走到哪骂到哪，跟谁也合不来的人。这些人都没有见过我，就开始歪曲我的各种言论。实际生活中呢，恐怕他们才是那种很难相处，两面三刀的人吧。合作过的同事都知道我是什么样的人，可惜他们都不怎么“上网”，只有这些网虫到处散布谣言。

  如果你说我也是网民，因为我在网上写博客，那你就错了。我顶多算是一个作家，或者学者。很多作家和学者都有自己的主页，他们会在上面挂上自己的散文或者学术论文。可是他们从来不去“网络社区”讨论，也不关心网络上的名人言论，业界动态等。写完自己的文章发出去，他们就开始过自己的生活。

  写完文章或者冒点微博，我一般不会去看网上的其他东西，也很少看微博的评论。我不会去知乎（除非搜索到了知乎页面），不去 MITBBS。我不看任何中文媒体，我甚至很少看朋友圈。我的朋友圈小红点是关闭的，只有我想起来的时候，才会主动去看看最亲密的朋友们有没有新鲜事。一大半联系人的朋友圈都是被我屏蔽的，原因往往是他们经常发布让我觉得功利或者显摆的内容。偶尔一两次还好，但如果大部分都是那样的内容，我就选择“不看他（她）的朋友圈”。

  所以虽然我用网络，可是我非常不像网民。我不关心网民们在说些什么，我也不关心他们怎么想。对于我来说，网民是一群心理不大健康的人，我不想让自己受到影响。我发现物理地切断这些信息来源，是唯一有效的办法。你可能以为没必要屏蔽信息，自己不要在意就行了。可是我发现，就算你不经意的看到那些标题或者图片，心理也是会受到影响的。它们操作的是你的潜意识，并不是理智觉得不在乎就真的不在乎的。

  如果你有一点功利，你就变得更加功利和浮躁。如果你不认同那些内容，你就会因为以为每个人都关心那些无聊事，而感到苦涩和绝望。很多人发图片是为了炫耀，那种感觉就更奇怪了。如果有人在朋友圈转载一些 AI 传教士的言论，说你的工作会在不久后消失，被机器取代，你能不产生感觉吗？总之，为了自己不产生任何感觉，最好的办法是屏蔽某些人的信息。屏蔽是如此有效的办法，有一次一个朋友发信息给我，说整个朋友圈都是某明星复婚的事情。我说我怎么没看见呢？后来我发现，那些可能会转载这种内容的人，早就因为其它内容被我给屏蔽了 :)

  扯远了，回到我见到的问题人类身上来吧。虽然这些人遇见我时不知道是什么样的心理，然而当他们提起中国的一些“大牛”或者名人，那可真是顶礼膜拜，非常尊重。他们喜欢转载这些名人的话，仿佛他们说的每一句话都可以写进名言录，每一句都是真理。他们买来这些名人的书，放在自己书架上显眼的位置，这样其他人就知道他心目中的英雄是谁，就以为他也传染了某种高贵的品质……

  这些“职场套路”，逼格模板，可能对其他人管用，然而我一眼看到就知道是怎么回事了。这些不但不会给这个人加分，而且会损害他在我心目中的形象。我从来不看这类名人写的“心得书”或者“回忆录”，我也不关心他们说了什么。我甚至从来没听说过他们的名字，不知道他们是谁。

  但经常看到有人崇拜他们，听说这些人和他们的“名著”，不免产生好奇。为什么我在博客上说了那么多透彻的道理，到头来得不到应有的，基本的，作为一个人的尊重。反而这些名人，打着“硅谷高管”的名号，回国随便写两本书，相当之浅，甚至误导群众，却被人崇拜到这种地步。

  总是听说这些人和这些书，却一直提不起兴趣来看看。当我真正拿起来看的时候，我惊呆了。我错过了那么多可以让自己在国内飞黄腾达的技巧！我以前真的太幼稚。

  这事的起因，是由于我最近装了一个“知识付费”的 app，你可以付费订阅很多中国名人的专栏，讲各种话题。这些人有 IT 名人，心理学家，经济学家…… 于是乎，听说过的一些中国业界名人的名字，就开始反复出现在我的眼前。他们的广告语说：“AI 时代要到了，很多人的工作就要消失了！在这个专栏里，我来教你如何提升自己相对于机器的竞争力，在未来的 AI 世界职场找到工作！”

  这是典型的制造“AI恐慌”的做法，它是利用人们害怕自己的工作被机器取代的恐惧心理，而去花钱拓宽自己的生存方式。在我之前的一篇文章里已经指出，其实人工智能只能取代最最枯燥简单的工作。连出租车司机和淘宝客服这样的工作，机器都毫无办法胜任。

  我算了一下这专栏的费用，乘以订阅的人数，也超过一千万人民币了。这还不算是里面最高的。人家用“AI 恐慌”收智商税，一年都赚一千万！王垠，你在干什么啊？把那么宝贵的信息，用最容易懂的方式写出来，免费给人看。还跟要饭的似的，贴几个二维码在那里：你们高兴就打发点吧…… 😒

  本来只是听说过这些人，并没有负面看法。可是看到这样的广告语，他们在我心目中的那一点好奇心的位置，也消失了。当然也不会忘了介绍他的事迹，摆出他的名著。由于老是听说这些书，出于好奇，我翻开了其中一些样章。这些内容在技术方面基本是在夸大机器学习的能力，让外行误以为机器已经可以理解人类的语言。但作者同时也不忘“经营自己”，所以看了几页之后，我豁然开朗。这些章节教会了我，在中国要如何正确的吹牛逼！:)

  我如获至宝。我知道很多网民说我喜欢“吹牛逼”，然而你发现没有，我其实很不会吹牛逼，很没有技巧。我的所谓“吹牛逼”基本说的都是实话。一个真有能力的人，给一些半壶水的心机家打工，被各种打压。不开心了，冒几句大实话出来，却被人说成是吹牛逼。

  就当我是吹牛逼吧，我吹牛逼的技术怎么就这么差呢？为什么每次一吹，别人就说我在吹牛逼呢？所以我决定好好地研究一下，真正高级的吹牛逼应该怎么吹。于是乎，我拿着这些样章看了一会，发现了一些通用的技巧。太美妙了！所以我决定把这些心得分享给大家。

  总有人喜欢在微博上评论，说：“王垠，感谢你！自从知道你的博客，我就学会了吹牛逼。” 我觉得真不敢当啊，还是不要误人子弟了。他们应该向这些出过书的名人学习才对！

  注意，我这里是就事论事，说一类人的问题，得给人留面子。我把原文和重要的细节都模糊化了，我描述的现象是很多人的混合体，而不是一个人。利用 AI 恐慌来搞知识付费的有好多人，很多人都可能符合这个特征，所以请勿过度解读和瞎猜。如果你认为猜出了我说的人是谁，你肯定是错的，因为我说的不是某一个人。

  好了，回到正题。凡归国“牛人”写书，必然会有很多地方体现自己的身份和价值。所谓身份，一般就是自己跟外国大牛的关系。为什么一定要是外国大牛呢？因为中国人都瞧不起中国人，你跟他们攀上关系也没有用的。一定要是高鼻梁，黄头发的外国人，才会被人仰慕。

  提高身份和价值的一般的技巧是这样：

          1. 微博，微信公众号，书名，标题，最好出现“硅谷”这个词。比如，“硅谷垠大大”，“垠老师在硅谷”，“硅谷论剑”，“硅谷那些事儿”，“相约在硅谷”…… 因为很多中国人都崇拜硅谷的技术，认为是牛人辈出的地方，所以这个词可以有效的显示自己的来历。

          2. 介绍自己所钻研的学术背景和本领域的牛人。一定要把它说成是一门艰深的科学，要介绍这门学问的鼻祖是谁，如果能扯到图灵或者某位图灵奖得主身上，那最好了。要介绍这门学科先驱者都有哪些重要人物。切记，最好使用“世界级”，“诺贝尔奖”，“图灵奖”一类的标识语。你可以放心的用这些词，而不用担心别人觉得你吹牛。因为你是在赞美其他人而不是自己，所以怎么说都不会让人觉得你在吹牛逼。你先把他们捧上去，在人们心中建立起地位，然后你再往他们身边一站，就立马显示出等级来了不是吗！

          3. 巧妙的显示出自己与这些世界级大牛有关系。注意“巧妙”二字，切不可像垠神那样，直接说我上过那人的课，得了 A+！那是会被人笑掉大牙的，立马会被认为是在吹牛逼 :p 正确的做法是含蓄一点，自然地引入你认识的，或者见过的一个牛人，我们假设他叫“牛人甲”。如果能把他跟之前的先驱者们联系起来就更好了。然后呢，采用这样的套路：

                  ○ 套路1：牛人甲的学识之高深，情操之高雅，真是让人佩服。在学校的时候，他常常对我说：“……” 我从他身上学到了很多做学问，做人的道理。省略号的部分是他说了这么，这其实不要紧。最重要的部分，是“他常常对我说”。这显示出我跟这个牛人认识，而且因为“常常”这个修饰语，暗示这不是普通的交情。

                  ○ 套路2：我当年在某大学/某公司的时候，牛人甲的办公室就在我对面。我经常看到他埋头苦想……这种套路要稍微弱一些。因为你只是见过这个大牛，没有显示出你传承了他的什么优点。但你能如此近距离的观察到这个人，足以显示出你还是受到过熏陶的。之前提到“某大学/某公司”，多半也是名校，会彰显你的身价。

                  ○ 套路3：待补充……

          4. 微信公众号和朋友圈的宣传。最好开通微信公众号，或者使用微信朋友圈。里面的内容最好是显示你有“事业心”的那种。千万别晒猫，别晒吃的，别谈生活上的事情，不然有损自己事业家的形象。其实这些都不用自己写，你转载也会有效果。内容可以是：

                  ○ 业界最新动态。比如各种黑科技，自动驾驶车，量子计算机，AlphaGo 战胜人类，iPhone X 人脸解锁技术，SpaceX 火箭着陆…… 注意要有选择，要有逼格。不要选择便宜的东西，或者看起来没有难度的。中国人都喜欢昂贵的，困难的，自己买不起，没法做出来的东西。

                  ○ 职场新闻。比如某牛人跳槽了，年薪上亿美元。某竞赛金牌得主加入了某牛公司，等等。

                  ○ 职场技巧。比如，如何高效的管理一个大型项目团队。如何在职场发展，如何升职加薪，如何转管理岗位之类的话题。这些内容都可以去 LinkedIn 找。当然你知道，这些文章基本都是假话，告诉你除了努力工作没有其他办法一类的。但你要向有权势的人表明，你认同他们让员工加班的作法，这样他们才会提拔你啊。到时候你成了奴隶主的手下，只需要指指点点，就不用担心加班了。重要的是要站对队伍。不要跟王垠一样，总是站在工人阶级一边的样子，甚至骂自己的前雇主残酷压榨。哪个奴隶主敢请这样的人做高层领导呢？注定一辈子做奴隶！

                  ○ 牛人文章或者讲座。跟专业相关的牛人讲座，可以转载视频或者博客。文字部分最好显示你好像认识这个人。比如你可以说：“王老师说得好！” 或者说：“王老师还是跟以前一样思维清晰啊。当年在xx牛校的时候，他如何呕心沥血的栽培我……”

                  ○ 构架分析。不要像垠神一样，写什么“Java有值类型吗”，“编程的智慧” 这样的文章。人家看不懂也就看不出你的水平，看得懂的肯定都是搬砖的，帮不了你爬高。要写就写“某独角兽公司内部大数据体系构架解析”，“xx公司自建分布式支付体系构架”。构架，懂吗？要是大局的！里面一定要有一堆线框图一类的东西，箭头指来指去的。反正别人也不会仔细看，看了也不知道管不管用。各种开源软件的名字要罗列一大堆，说你们试过很多这些东西，发现各自有优缺点，之类的。这些文章可以自己写点，也可以转载或者抄来。反正到处都有这种文章，大家都是拿开源软件拼凑在一起，谁也不知道其中一部分是抄来的。这种构架分析，一方面显示出你是懂一些技术的，一方面显示出你不是做基础编程工作，写底层数据结构的码农，而至少是构架师，团队带头人级别的。

          5. 互相吹捧。垠神最大的错误，就是自吹自擂。自己在那里说比别人懂得多，管你是不是真懂，当然要被人黑啦。王婆卖瓜，自卖自夸！所以呢，不要自己吹自己，要让别人来吹自己。拉拢几个人，好像不认识你，只是看过你的作品的样子，到知乎一类的网站上去表扬你，在“某某是什么样的人”这样的问题下面回答，说你学识渊博，做人低调，踏踏实实…… 有时候也可以在关于王垠之类大家都黑的人的问题上回答一句：“王垠就是个吹牛逼的！上次我问他那啥，他跟我说了一通，其实他自己都没弄明白。你看人家某某，比他踏实多了，还不会这么嚣张。王垠就是个吹牛逼的，某某才是真牛逼……” 看到没，只顺带一句，你的学识和人品就显示出来了！看到这句话的人产生好奇，不免去找你的资料，然后你可能就多了一个粉丝。当然，你也不要忘了回馈帮助过你的人。在微博或者朋友圈，也要提携人家。别人写了书，别忘了发个简短的封面照，说你看了这个作者送你的书，终于理解了他的深邃思想，等等。这样大家才能处于一种互惠互利的地位，那帮屌丝转来转去，还不是只有看我们的书，听我们的话啊，对不对？

          6. 关心年轻人的成长，树立正面榜样。中国的名人们还有一个策略，那就是从年轻人那里开始做工作。他们会像唐僧一样地宣讲：我很关心年轻人的成长，你们应该要诚信，要善良，学会做人，我来解答你们的疑惑…… 这就跟希拉里老是向年轻女性宣传一样：年轻女孩们，不要怕，你能行的，Strong，Together！全是空话，没有实际效果，但是非常正面，鼓舞人心。用这样的方式，确实很容易树立起好人的形象。然后随便你说什么他们都支持，都相信你了，即使你开始损害他们的利益，从中牟利 ;)

  继续分析中，待续……



  来自 <http://www.yinwang.org/blog-cn/2018/02/24/chinese-fame> 

#+END_SRC



* 20180228.org
** 14:08 陈绍键的深入实践Spring Boot                                  :java:



spring boot 是什么？ 全新的开发框架，其设计目的是简化Spring应用的搭建和开发过程

优势？ 不仅能提高开发速度 增强生产效率 增强系统的稳定性和扩展系统的性能指标（结论）



特点是什么： 因为基于Spring框架，所有具备Spring所有优秀特性，而且还具有如下显著特点

1. 为Spring开发提供更加简单的使用和快速开发技巧

2. 具有开箱即用的默认配置功能，能根据项目依赖自动设置

3. 具有功能强大的服务体系，包括嵌入式服务、安全、性能指标、健康检查等。

4. 绝对没有代码生成，可以不再需要xml配置，即可让应用更加轻巧和灵活

* 20180303.org
** 19:08 Increasing that knowledge                            :EnglishPaper:





#+BEGIN_SRC org

  A large-Eddy Simulation of Wind-Plant Aerodynamic



  Increasing that knowledge would allow operators to more effectively run their plants and help developers to

  better site turbines within wind plants to increase efficiency and mitigate loads. It would enable researchers to

  create better turbine- and wind plant-level control systems. It would also assist manufacturers in engineering the

  next generation of larger turbines that will be more flexible and, unless carefully designed, susceptible to wakeinduced

  damage. Field measurements are necessary to increase our knowledge of wind turbine wakes. Although

  important, experiments used to gather such data are costly and difficult given the large scale of wind plants. A

  lower-cost complement to these experiments is LES, the subject of this work.





  Few have performed LES of full wind plants.

#+END_SRC



* 20180304.org
** 13:05  一轮设计模式                                                :java:





#+BEGIN_SRC java

  1. 多态的理解

  父类可以指向子类的对象，并在调用方法时会使用子类的实现(即此时只有父类的定义方法，子类新的定义方法无法被继承，除非使用子类对象指向子类,也就是为什么一般使用this表示当前的子类对象，当前实现的对象)

    





  2. 开闭原则

  对修改关闭，对扩展开放



  修改指的是父类修改或者继承父类的其他哥哥、姐姐类不需要进行修改， 而要想拓展只修改当前的子类即可



  其实本身也是跟模板方法类似，把不变的地方刻成一个磨具，而让变化的地方设计成一个窟窿，等将来需要的时候进行填写，包括Idea编辑器的Live template,Emacs 的snippet,

  vim的snippet等，都是类似思路。(这边的窟窿一般是指abstract或者interface，即抽象编程和面向接口开发)

    

  一个比较有意思的窟窿设计是

  public void sayHi(){

      return new unsupportedMethodException();

  }



  如果子类不重写，则直接抛出异常，只有子类重写了，覆盖掉父类方法，才不会抛出异常(并未用到abstract和interface构建窟窿)



  3. 比如 状态模式

  当一个界面中状态改变(游戏，解释器，编译器，人(吃饭、睡觉、学习、写作、运动、游戏),设备(运行、暂停、停止、故障),订单(支付、退款、确认、待支付)，其他也对应改变，可能需要设计很多if-else, 不利于拓展(需要例子) 

    

  4. 比如 策略模式(干一件事情有多个类似算法, 新增一个算法不需要影响其他于是就需要使用一个普通的抽象方法来打窟窿) 

  当一个数据需要使用多个算法进行加密，当一种排序需要使用多种方法进行排序，也就是当干一件事情可以用多种方法来完成(也就是我能干什么的问题)



    

  5. 迭代器模式(还有？类似于责任链，只不过这个是名词，责任链是动词)，套路是有没有下一条数据(hasnext),如果有则取出来(next)，没有则停止, 狭义上来说是指实现了Iterable接口的类，基本上所有的集合类都有实现，对应具备hasNext和next方法



  6. 观察者模式(监听，分割行为，更改过程职责，比如交给专业运营方去处理，云平台等)：广义来说是指发生某件事情后执行某件代码，为了解决多个动作之间的冗余问题，比如注册和订单生成，都会有发送邮件的操作，但是发送邮件会有一段很长的时间

  设置卡死，所以需要把两个过程分开，把发送邮件放到任务队列中，不要影响用户体验。观察者模式为监听而生(把费时间的业务逻辑让专业人士去做，当某一事情发生时候，要干什么),比如日志系统，当新的业务产生时候，产生业务日志，当异常发生时，产生异常日志(类似于vimwiki, gitgutter等，都会监听文件状态是否改变，在java中还有一个叫做

  FileAlteration类，专门监测文件夹类内容是否发生该变)

                     



  7. 责任链模式 一个请求可以被多个对象同时访问，但请求只是瞎问，他并不知道被请求者是否具备这种能力(比如画画、唱歌、写作、演小品等，统一定义为一种accept方法)

  便利所有的被请求对象，直到找到一个为止(可能不止一个会，也有可能刚好那个解析得不太好)



  一般是类似访问者模式使用accept来定义窟窿)

    

  Array.sort(arr,new Comparator...) 策略模式？？





  策略模式的拓展，一般是最后一个参数为函数或者对象(面向函数、面向对象)



  责任链： 会干吗?.会干嘛?.会干嘛？.会干嘛?....... 不断问一下，直到会为止

    



  牢记，多态两句话，开闭原则(不修改[父类和其他子类]，可拓展),DRY(当重复时候，记得封装给父类，之类只负责修改变化部分,可创建一个新抽象方法)

#+END_SRC





** 15:49 责任链模式的小游戏                                           :java:





#+BEGIN_SRC java

  题目：FizzBuzzWhizz

  你是一名体育老师，在某次课距离下课还有五分钟时，你决定搞一个游戏。此时有100名学生在上课。游戏的规则是：

          1. 你首先说出三个不同的特殊数，要求必须是个位数，比如3、5、7。

          2. 让所有学生拍成一队，然后按顺序报数。

          3. 学生报数时，如果所报数字是第一个特殊数（3）的倍数，那么不能说该数字，而要说Fizz；如果所报数字是第二个特殊数（5）的倍数，那么要说Buzz；如果所报数字是第三个特殊数（7）的倍数，那么要说Whizz。

          4. 学生报数时，如果所报数字同时是两个特殊数的倍数情况下，也要特殊处理，比如第一个特殊数和第二个特殊数的倍数，那么不能说该数字，而是要说FizzBuzz, 以此类推。如果同时是三个特殊数的倍数，那么要说FizzBuzzWhizz。

  学生报数时，如果所报数字包含了第一个特殊数，那么也不能说该数字，而是要说相应的单词，比如本例中第一个特殊数是3，那么要报13的同学应该说Fizz。如果数字中包含了第一个特殊数，那么忽略规则3和规则4，比如要报35的同学只报Fizz，不报BuzzWhizz。

#+END_SRC



* 20180306.org


** 14:31 以解决问题为核心的笔记记录方法                  :EnglishPaper:地球:



结果导向型笔记



得到什么结论(结果,可能利益相关 )

关键问题是什么

假设解决问题的方法

遇到了什么问题





脑中思考，什么时候该干什么，什么事情该干到什么程度(做了哪些妥协，面面俱到不太合理)，什么项目得到多少利益





知识没有运用，等于没用？(eval and apply)





笔记，一定要分开人(你该思考的, 解决方案是什么？ 该怎么干)和事(它的用途，方法，何时用，怎么用，注意点，场景等,它干了什么，优势和劣势)



** 15:01 通过反复问问题可以解决拖延、执行力不足          :EnglishPaper:地球:





问什么？ 你干了什么？该干什么？要干什么？ 

干得怎么样了？ (准备的怎么样了）  解决方法有哪些？ 最佳解决方法是什么》？

并且可以解决掉内心的恐慌和失落！



我们经常会有拖延……



拖延可能有以下几点：

1）对成功自信不足



2) 讨厌指派任务（我）



3）注意力分散和容易冲动（我）

4）目标和酬劳太过遥远（我）



让人生多几个窟窿，留待以后去实现，万一梦想成真了？





你清楚你这个人？ 你是什么？ 你干什么？ 你为什么要干？ 干得怎么样？ 怎样继续

干的好一些？（对自己信心不足就得反复问……



没有非常想做的事情？？？连自己想要什么，想做什么，没有内在的驱动，那有什么意义？？



当前你能做什么？ 哪些是你需要通过学习才能做的？ 你能做的不妨先试试

```

我试试

```

试完了，不行再改，这是你能做的，赶紧做！(能做什么？ 做些准备, 能做什么本来代表的就是

解决方案）



最大的错误是：20%的时间解决80%的问题

但是不否认，吾尝终日而思矣，不如须臾之所学也，也不否认20%的人创造80%的财富

但是我想顿悟得是100%的努力(20%时间远远不够)



把自己关在一个下午里，把自己关在一个上午里，把自己关在时间里(完成了再从时间中出来)





所以，我的方法是在时间隧道中旅行，不到站，不下车。(关起来的能力)

（我把自己扔给时间,任时间将我沉浮，运往)

** 15:37 区块链算法清单                                         :blockchain:





#+BEGIN_SRC org

  https://mp.weixin.qq.com/s/bwd6Xpld-wIS-5yAmz6LvQ

  区块链挖矿算法清单

  原创 2018-03-01 退休的神 退休的神科研区块链

  在这里我会分享读论文心得和笔记，欢迎大家一同探讨。

  下面是区块链挖矿算法清单，里面涉及的论文后续会不定期选几个分享。



  SHA-256



  介绍：SHA代表安全散列算法，SHA-256是由NSA设计的SHA-2加密散列函数的成员。加密散列函数是对数字数据运行的数学运算，通过将所计算的“散列”与已知的散列值进行比较，人们可以确定数据的完整性。 单向散列可以从任意数据生成，但不能从散列生成数据。在比特币等多个区块链应用中的多个环节被使用。



  论文：Courtois, Nicolas T., Marek Grajek, and Rahul Naik. "Optimizing sha256 in bitcoin mining." International Conference on Cryptography and Security Systems. Springer, Berlin, Heidelberg, 2014.



  应用：Bitcoin(BTC)、BitcoinCash(BCH)、Peercoin(PPC)、Zetacoin(ZET)、Universal(UNIT)、Deutsche eMark(DEM)、AUR-SHA(AUR)、DGB-SHA(DGB)



  Scrypt



  介绍：Scrypt是一个内存依赖型的hash算法。有趣的是算法是由著名的FreeBSD黑客Colin Percival为他的备份服务Tarsnap开发的。内存依赖顾名思义会占用很多内存空间，从而减少cpu负荷。由于其内存依赖的设计特别符合当时对抗专业矿机的设计，成为数字货币算法发展的一个主要应用方向。



  论文：Percival, Colin. "Stronger key derivation via sequential memory-hard functions." Self-published (2009): 1-16.



  应用：Litecoin(LTC)、Dogecoin(DOGE)、DNotes(NOTE)、Florin(FLO)、Gulden(NLG)、DGB-Scrypt(DGB)、GameCredits(GAME)、Verge-Scrypt(XVG)、Einsteinium(EMC2)、AUR-Scrypt(AUR)



  X11



  介绍： X11算法的推出和litecoin采用的Scrypt算法目的一样，为了抵制ASIC矿机的扩张。X11就是使用了11种加密算法（BLAKE, BMW, GROESTL, JH, KECCAK, SKEIN, LUFFA, CUBEHASH, SHAVITE, SIMD, ECHO）。数据需要进行11次不同算法的运算，一方面提高安全性一方面增加计算量。



  论文：Duffield, Evan, and Daniel Diaz. "Dash: A PrivacyCentric CryptoCurrency." (2014).



  应用：Dash(DASH)、Prime-XI(PXI)、Onix(ONX)、Startcoin(START)、Creamcoin(CRM)、Influxcoin(INFX)、MonetaryUnit(MUE)、Monoeci(XMCC)



  Equihash



  介绍：Equihash是由卢森堡大学跨学科中心开发的面向内存的工作量证明(PoW)算法。算法的核心点是基于广义生日问题(Generalized Birthday Problem)。我个人是比较看好这个算法的，他提高了定制硬件(ASIC)的成本效益。



  论文：Biryukov, Alex, and Dmitry Khovratovich. "Equihash: Asymmetric proof-of-work based on the generalized birthday problem." Ledger 2 (2017): 1-30.



  应用：Zcash(ZEC)、Zencash(ZEN)、BitcoinGold(BTG)、Zclassic(ZCL)、Hush(HUSH)、Komodo(KMD)



  NeoScrypt



  介绍：NeoScrypt是替代Scrypt的下一代工作量验证算法。 它消耗的内存少于后者，但内存更密集，密码更强。 将流密码算法Salsa20，Salsa20改良的ChaCha20，BLAKE2s和FastKDF的功能结合到一个安全的ASIC抗性解决方案中。



  论文：Doering, John. "NeoScrypt, a Strong Memory Intensive Key Derivation Function." (2014).



  应用：GoByte(GBX)、Innova(INN)、Trezarcoin(TZC)、Vivo(VIVO)、Crowdcoin(CRC)、Phoenixcoin(PXC)



  Lyra2REv2



  介绍：Vertcoin使用Lyra2REv2作为工作量证明算法改进Bitcoin，目的同样也是为了抵抗ASIC。Vertcoin向Scrypt算法引入了“自适应N因子”。 Scrypt的N因子组件决定计算散列函数需要多少内存。 Vertcoin的N因子随着时间的推移而增加，以阻止开发专用的“采矿”硬件并鼓励在个人用户的电脑上分发验证任务。目前的LyraREv2由BLAKE, Keccak, CubeHash, Lyra2,Skein 和 Blue Midnight Wish 哈希算法组成。



  论文：Lyra2RE – A new PoW algorithm for an ASIC-free future



  应用：Vertcoin(VTC)、Monacoin(MONA)、Verge-Lyra2REv2(XVG)



  Ethash



  介绍：Ethash将DAG（有向非循环图）用于工作量证明算法，通过共享内存的方式阻止专用芯片，降低矿机的作用。 这个算法是以太坊(Ethereum)现阶段的过度算法，前身是Dagger-Hashimoto。Casper the Friendly Finality Gadget(FFG)实现后以太坊将从概率最终性变成确定最中性。



  论文：Buterin, Vitalik. "A next-generation smart contract and decentralized application platform." white paper (2014).



  应用：Ethereum(ETH)、EthereumClassic(ETC)、Pirl(PIRL)、Musicoin(MUSIC)、Expanse(EXP)、Metaverse(ETP)



  X11Gost



  介绍：x11GOST由10个SHA3算法和Stribog哈希函数组成 散列值，各个算法逐个进行计算有效的防止了ASIC的获胜概率。



  论文：CRYPTO CURRENCY ON THE BASIS OF DELEGATED NODES (MASTERNODS) WITH QUICK SCALE TECHNOLOGY



  应用：Sibcoin(SIB)



  CryptoNight



  介绍：CryptoNight是一种工作证明算法。 它被设计为适用于普通的PC CPU，利用现有cpu的优势（本地AES加密和快速64位乘法器 - 调整为使用与英特尔CPU上的每核心三级高速缓存大小相当的暂存器，大约2MB），因此CryptoNight只能进行CPU挖掘，目前没有专门的采矿设备针其做出设计。 CryptoNight依赖随机访问慢速内存并强调延迟依赖性，每个新块都取决于所有以前的块（不像scrypt）。



  论文：CryptoNight Hash Function



  应用：Dinastycoin(DCY)、Dinastycoin(DCY)、Electroneum(ETN)、Karbo(KRB)、Bytecoin(BCN)、Monero(XMR)



  Blake(14r)



  介绍：BLAKE和BLAKE2是基于Dan Bernstein的ChaCha流密码的密码散列函数，但是在每个ChaCha回合之前添加一个输入块的排列副本，其中包含一些常量异或。BLAKE的两个主要实例是BLAKE-256和BLAKE-512。 它们分别使用32位和64位字，并生成256位和512位摘要。



  论文：Aumasson, Jean-Philippe, et al. "Sha-3 proposal blake." Submission to NIST (2008).



  应用:Decred(DCR)

#+END_SRC





** 16:54 需要一个能看出完整风力机的CFD模拟的图片                       :CFD:

注意收藏(当你需要做展示的时候有用!)



** 19:16 不断突破自己                                                 :地球:





#+BEGIN_SRC org

  https://www.365yg.com/i6418062443188060673  感兴趣的同学 听听他是怎么把学习和执行分开的（可能有所帮助）











  |                | learning zone                                                 | Execute(performming) Zone                   |

  |----------------|---------------------------------------------------------------|---------------------------------------------|

  | Goal           | Improve                                                       | Do as best as we can                        |

  | Activities for | Improvement                                                   | Execute                                     |

  | Concentrate on | Haven't mastered yet                                          | Have mastered                               |

  | Mistakes to be | Expected                                                      | Minimized(mistake)                          |

  | Benifit        | Growth and  Future performance                                | Immediate performance                       |

  | Time spend     | low                                                           | high(without improve yourself) so much time |

  | Method         | Dedicate Practice(刻意练习)                                   | 标准执行                                    |

  |                | 营造低风险区域                                                | 高风险区域                                  |

  |                | read to extend your knowledge                                 |                                             |

  |                | consult with colleagues or domain experts                     |                                             |

  |                | try out new strategies,solicit feedback and reflect           |                                             |

  |                | learn the master of chess, to analysis what he will do        | perform the chess(without learn)            |

  |                | Note what makes you type slow                                 | only type, type, type without improvement   |

  |                | send, feedback,and write again                                | write,write,write                           |

  |                | practice ,mistakes, feedback and revision                     |                                             |

  |                | try new things                                                | only old things,a little new                |

  |                | The observation, reflection and adjustment is a learning zone |                                             |

  |                |                                                               |                                             |

  |                |                                                               |                                             |



  many students in elementary schools through colleges feel that if they make a mistake, others will think less of them(严重的问题，

  school should be a learning zone, but not perform zone) , No wonder they're always stressed out, and not taking the risks necessary for learning.

  But they learn that mistakes are undesiable inadvertently. when teachers or parents are eager to hear just correct answers and

  reject mistakes rather than welcome and examine them to learn from them,or when we look for narrow response,rather than encourage more

  exploratory thinking that we can all learn from.



  When all homework or student work has a number or a letter on it, and counts towards a final grade,rather than being used for practice

  mistakes, feedback and revision,

#+END_SRC



* 20180307.org
** 17:50 信息价值标签                                                 :地球:



让信息存在价值当中





说服(激励、传递信息，娱乐观众)演讲者方法：

NASA-V(第五代NASA)



ATTENTION 在演讲一开始就要抓住观众的注意力，然后把他们的注意力往你的主题上引。 

NEED(需要什么给他什么，鱼儿才能上钩) 换位思考

SATISFACTION(我能给什么)

Action

Visualization(视觉效应)为大家描述一幅采用你方案之后的画面，让大家清晰看到自己将要产生的变化 

漂亮的收尾让大家立刻行动起来



** 19:38 比特化脑洞                                                   :地球:





做后自己(怎么做好？)，独善其身

互联网是想去连接你，而不是你去连接互联网（当然很多人急着去连接，关键是你值得被连接

如果你足够有用，电话早就打过来了）



只拥有，不链接，他就是一个资源孤岛





** 21:59 为了工作 为了建设一带一路 为了构建人类命运共同体             :地球:

* 20180308.org
** 09:43 春种秋收冬藏                                                 :地球:



任何时代都是这样，自己有一块小的自留地，春种，夏长，秋收，冬藏



** 21:32 数据获取方式                                                 :java:



1. 文件方式(loadFromFile(path)

2. URL方式(网络流)loadFromStream(stream)

3. 数据库方式loadFromSQL(connection)



** 21:35 设计模式原则                                                 :java:



1. 开闭原则

对修改关闭，对扩展开放



关修开拓， 开放拓展，关闭修改   



这边的修改关闭是指，拓展新类的时候，只创建新类即可，不需要更改原先的兄弟类

不修改，一般不修改其他子类，也不修改祖先类

 

对拓展开放，是指系统拓展很方便 ，建立新的实现类或者继承类即可。



2. 依赖倒置原则

(使用父类)通俗的说就是：变量、参数、返回值类型尽量用接口/抽象类，而不用具体类，能用父接口/类，就不用子接口/类。



3. 里氏原则

任何基类可以出现的地方，子类一定可以出现。或者用如鹏课程的话语体系是：

父类类型的变量可以指向子类类型的对象，调用方法的时候执行的是子类的实现(多态定义就这两句话，怎么用金包骨法 再改造一下呢）。



儿子可以挂老子的名做生意，真正做事情就得靠儿子了。



老子罩孩子， 孩子干老子(孩子可能千万千万，老子只有一个)。



4. 	接口隔离原则 

   



5.  迪米特原则/最小知识原则





一个对象要对其他对象有最少的认知。人话：

         一个类不要把不必要的成员public；

         一个类不要访问其他类的private成员；

         一个类不要访问其他类的成员细节

         第三点的解析：不要出现getA().getB().getC().getD()这种情况(连续调用对象 不好？！有点visitor pattern的感觉)。



        

6.优先使用组合，而不是继承。



人话： 不然就插入一个 成员变量（某种数据类型，比如List, Map, Array等）

也就是重用一个类的成员(局部变量？）的时候，尽量不要声明他的子类，而是组合。

继承的坏处：如果直接继承基类，会破坏封装，因为继承将基类的实现细节暴露给子类；

  如果基类的实现发生改变，则子类的实现也不得不发生改变

  

  所有人都可以继承某个类，但是如果收入门徒，很容易学了不应该学的（四不像），又很容易因为父类发生更改，而出现问题.

还不如自创成员变量！！！除非是相同血脉的







状态接口(和访问者的感觉类似，dom对象，html对象)定义了不同状态下不同的行为，不同状态用不同的类对象。

	这样的好处：

1）	不用大量的if，设计模式中很重要的一个目标是“消灭if”

2）	由于接口定义了子类必须对行为做响应，不存在“忘了”处理某些状态的情况

3）	增加新的状态只要增加新的子类即可，而用if的写法需要到处改N多的if，体现了“开闭原则”



 

适配器：(在改不变所有的情况，到(注意 到最后还是用其他，只不过中间转了一下 AOP也有这种感觉）

 usb电池

 苹果套上盖变android充电线

 HDMI投屏器(同屏转换)

  

如果需要将“一些现存的对象”放在新的环境中应用，但是新环境要求的接口是这些现存对象所不满足的。那么就可以创建一个适配器让旧对象适用于新环境。





责任链模式也是一种桥接模式!







设计模式，最重要的意思就是，我不想让老成员少做变动（当进行拓展的时候），这就需要好好设计设计。

当然也是为了用尽量少的方式、过程来达到目的。

既能少做变动，又能实现目的，就是一种好的设计！(你现在掌握的知识并不是 最全面、最广泛、可进行拓展的，所以你在成长，一辈子都在成长着）



你的目的是什么？ 学的是一种方法？？？？？科研的方法？ 研究的思路？？ 严谨性！！ 怎么培养？





做最少的工作，完成最多的活(好难活啊！)





装饰器模式和适配器模式的区别？



装饰器必须是实现相同接口（比如可读list  都是实现List接口a)( 类似于镜子模式  特点：实现相同接口)

而适配器模式并不需要实现相同接口，只是最后调用被适配的对象的方法即可(到那个时刻为止)(套接模式，对就是管道的套接的感觉 特点：适配器对象中有被适配器对象充当其属性。)





能想明白就干（想不明白千万别干)  如何想明白？？？  明白到什么程度？？？







#+BEGIN_SRC java

          List<String> list = new SizeLimitList<>(new LinkedList<>(),10);



          /*

          此种方式类似于访问者模式的教程   new ---new ----new

          也类似于函数式编程的特点

         http://a-little-java-a-few-patterns.readthedocs.io/zh_CN/latest/

       

         装饰器分层，装饰器只干一层功能(最大好处)

           ,*/

          List<String> list2  = new StringLenLimitList(new SizeLimitList<>(new LinkedList<>(),10));



#+END_SRC







#+BEGIN_SRC java



    Collections.synchronizedList(list); 转化为线程安全的list  内部实现了



    static class synchronized () 内部类，进行了代码块同步的过程

            return Collections.unmodifiableList(list);

 

      return Collections.unmodifiableList(list);

#+END_SRC







#+BEGIN_SRC java

          try(OutputStream os = new FileOutputStream("E://hello.txt");){

              Writer osWriter = new OutputStreamWriter(os);

              osWriter.write("hello ..................");

          }



          /*

          装饰一下, 二进制GZIP保存模式（乱码了)

           ,*/

          try(OutputStream os2 = new GZIPOutputStream(new FileOutputStream("E://helloZip.txt"));){

              Writer osWriter2 = new OutputStreamWriter(os2);

              osWriter2.write("hello ..................");

          }



          /*

          缓存一下，性能提高

           ,*/

          try(OutputStream os2 = new GZIPOutputStream(new FileOutputStream("E://helloZip.txt"));){

              Writer osWriter2 = new BufferedWriter(new OutputStreamWriter(os2)) ;

              osWriter2.write("hello ..................");

          }



#+END_SRC





对于执行不带where语句的delete和update拒绝执行， 带显示sql功能







#+BEGIN_SRC java

  package f708.Connection;



  import java.sql.*;

  import java.util.Properties;

  import java.util.logging.Logger;

  import java.util.regex.Pattern;



  public class CatDriver implements Driver {

      private Driver target;

      static {

          try {

              /*

              自己注册给DriverManager



              通过url格式是否accept? accept就是通过正则表达式进行编写的！！  新的url格式你认识？？？ 认识就调用自身的CatDriver

              如果不认识就报没有这个Driver

               ,*/

              DriverManager.registerDriver(new CatDriver());

          } catch (SQLException e) {

              e.printStackTrace();

          }

      }

      @Override

      public Connection connect(String url, Properties info) throws SQLException {

          if (!acceptsURL(url)) {

              return null;

          }

          String[] segments = url.split("\\|");

          String targetDriver = segments[1];

          String targetUrl = segments[2];



          try {

              Class.forName(targetDriver); // 真正的jdbc方式 注册mysql驱动

          } catch (ClassNotFoundException e) {

              e.printStackTrace();

          }

          this.target= DriverManager.getDriver(targetUrl); // 真正jdbc方式获取

          Connection conn =DriverManager.getConnection(targetUrl,info);// 真正获取链接

          return new CatConnection(conn);

      }



      @Override

      public boolean acceptsURL(String url) throws SQLException {

          //jdbc:cat:|com.mysql.jdbc.Driver|jdbc:/mysql//localhost:3306...

          Pattern pattern = Pattern.compile("jdbc:cat:|(.+)?|(.+)");

          return pattern.matcher(url).matches();

      }



      @Override

      public DriverPropertyInfo[] getPropertyInfo(String url, Properties info) throws SQLException {

          return target.getPropertyInfo(url,info);

      }



      @Override

      public int getMajorVersion() {

          return target.getMajorVersion();

      }



      @Override

      public int getMinorVersion() {

          return target.getMinorVersion();

      }



      @Override

      public boolean jdbcCompliant() {

          return target.jdbcCompliant();

      }



      @Override

      public Logger getParentLogger() throws SQLFeatureNotSupportedException {

          return target.getParentLogger();

      }

  }



#+END_SRC





https://github.com/alibaba/druid





#+BEGIN_SRC java

  package f708.Connection;



  import java.sql.SQLException;

  import java.util.Date;



  /*

  商用级运用不能用此种方式  t_where???



  使用解释器模式……



  写自己的解析器



  分析sql语句，形成AST，来真正实现翻译，减少漏洞



  Druid 不错！





   ,*/

  public class CatUtils {

      public static void checkSQL(String sql) throws SQLException {

          if (sql.startsWith("delete")&& !sql.contains("where")) {

              throw new SQLException("Cannot delete records without sql!!!!!!");

          }

          if (sql.startsWith("update")&& !sql.contains("where")) {

              throw new SQLException("Cannot update records without sql!!!!!!");

          }

      }



      public static void log(String sql)  {

          /*

          可以用Log4j  记录下来 持久化

           ,*/

          System.out.println(new Date(System.currentTimeMillis())+": " +sql);



      }

  }



#+END_SRC

* 20180311.org
** 02:32 数组方式返回 而不是List方式返回                              :java:





#+BEGIN_SRC java

      public OrgItem[] getChildren() {

          /*

          使用数组方式返回数据，而不是list（目的是不让用户修改，可以学学这种方式)

           ,*/

          return children.toArray(new OrgItem[children.size()]);

      }



#+END_SRC



* 20180313.org
** 16:35  NAT内网穿透技术                                             :java:





本地调试回调接口要部署到服务器或者使用natapp ngrok、花生壳进行本地调试。

NAT内网穿透技术



* 20180315.org
** 01:05 docker常用命令                                              :Linux:







#+BEGIN_SRC sh

  docker ps -a



  docker ps -a -q 显示所有的容器ID(exit之后还是存在的）



  docker rm $(docker ps -a  -q)

#+END_SRC





** 20:07 时间干法                                                   :地球:



时间激情干法:

时间挑战干法:



#+BEGIN_SRC org

 

  = 16字心经 =

  《干法自然》

      == 要干什么？ ==

      == 干了什么？ ==

      == 能干什么？ ==

      == 怎么去干？ ==

 

      其实就是大目标、分步干，不扯淡(目标清楚，大体现着挑战性的背景，分步表示计划，解决方案，干表示怎么驱赶)

      "分步干大目标"(大包干)  包也意味着分或者说合也意味着分(包意思是包给某个人，。



   按照时间顺序去记住这四个过程，有目的是第一步(定义为时间1)， 然后看看别人【更重要的是自己】干了什么，做了什么，有什么问题，focus到你的问题(定义为时间2)

   然后回到你的问题上，你能干什么，有什么解决方案（定义为时间3） ，最后是具体实施，采用什么技术路线，来实现完善你的方案(定义为时间4)

 

  上面的16字心经老是会忘，于是我就包装为"时间干法"



  "干一干，时间由你来做主"



  "时间让我来干活"



  "不同时间干不同事情"



  "不同阶段干不同事情"



  "如果人生是一片文章，那么你现在在干什么？ 思考、阅读、计划、实施、结果"

  "如果人生是一片文章，那么你现在到底在干什么？ 思考(要干什么)、阅读(干了什么)、计划(能干什么)、实施(怎么去干)、结果(你的归宿)"



  "干了一辈子， 一辈子不干"



"把握目标，迎接挑战，落实计划，踏实去干, 时间让我干一干"

 

   这里得强调一点：方案和技术路线，一个是想法层次，一个是实现层次， 一个是要实现的内容，一个是具体正在做的方法, 一个是指导，另一个是技术实现

 

  = 大量文章的前提 ==

 

  1. 通过摘要，确定是否课题相关

  2. 参考文献，80%以上不是最近3-5年，该文献参考价值不大（阅读经典文献外）

  3. 引言： 作者是怎么阐述其**研究思路的**，是怎么得出要做所做(要干，干了的) 研究的想法的。(怎么一步一步得到他的想法? 怎么阐述其研究思路，怎么得出要做所做的研究，他准备了什么？？？)

     如果这三面都跟自己研究方向相关，就得仔细阅读全文了

   

  = 四种阅读方案： =

   

  1. 略读(70%) : 只看摘要，和自己研究思路不相干(对你真正有用的全文并不多)

  2. 概读  : 读完摘要 继续看参考文献和引言

  3. 详读(20)【最好有纸质版】： 看完全文，并结合自己的研究思路进行分析(会有很多的启发和思路)，

  4. 精读(10%) [建议纸质版]：详细阅读之后，有收获，并阅读相关文献，以便弄懂相关概念和问题  【focus】没有focus的写作等于没用



  由面到线再到点，面线只有淡淡的3、4句话，大部分调研都围绕在点上面去讨论问题。



  = 笔记： =



  1. 重要的结论(结果：体现作者的工作)

  2. 经典的句子

  3. 精巧的试验方案







  = 文献总结格式：(Take home message) =



  1. 该论文的主题、目的？

  2. 该论文前期工作的分析（做了哪些准备， 研究中存在问题、解决思路）

  3. 该文献本身的**研究方法**、**结果**（解决方案）

  4. 该文献本身的**创新**之处

  5. 该文献可能改进的地方，对本人课题的**启发**， 以结论为抓手，反问结论，结论是否有一定的局限性和条件行。。

  6. 通过该论文，提出自己可能的**新思路**





  = 牢记一个问题：我应该如何利用该论文？【我应该如何利用那个结论？】 =



  == 真的像作者宣称的那样？ ==



  == 如果这样、那样，会发生什么? ==



  = 理解论文 =



  1. 作者的结论（并不能知全部）

  2. 作者的目的或者论文的目的，作者的选择

  3. 论文所涉及领域都有哪些，作者的研究中持续出现的难点模式是什么，论文所表达的策略观点是什么





  = 文献阅读要求： =



  掌握文献、对文献进行综合，以**批判**的眼光评论文献，并从中提取出**有用**的和**正确**的信息以指导今后的研究是一个能独立工作的科学工作者必备能力

  只有勤奋努力才能不断有优秀工作的积累，才可能在工作中逐渐产生真正创新的，别人无法剽窃的创新思想，才有可能在重大问题上取得突破。











#+END_SRC

* 20180317.org
** 12:20 指向性调用(学术用语)                                         :java:





父类指向子类， 并在调用父类方法时候，使用的是子类方法



指向代表等号，调用代表点号，这样就写成了java的最基本运用



指向性调用，实现我需要的过程





你一指，我就明白你要什么



世界那么复杂，一指就够了，指哪打哪





nosql，无论是memcached,redis,mongoDB都是打开，设置，获取，关闭的流程

给你的感觉都是实现功能，只不过是有不同的策略而已(简称策略模式)









* 20180318.org
** 17:59 print 递归                                                   :java:





#+BEGIN_SRC java

  编写打印遍历节点信息的方法，采用递归：

  static void print(OrgItem orgItem,int depth)

  {

          //如果节点是员工节点

          if(orgItem instanceof Staff)

          {

                  Staff staff = (Staff)orgItem;

                  System.out.println(repeatTab(depth)+"员工："+orgItem.getName()+",级别:"+staff.getLevel()+"，岗位:"+staff.getJobName());

          }

          //如果是组织单元节点

          else if(orgItem instanceof OrgUnit)

          {

                  OrgUnit ou = (OrgUnit)orgItem;

                  //在前面输出depth个Tab进行缩进

                  System.out.println(repeatTab(depth)+"组织单元："+orgItem.getName());

                  //对于组织单元节点，输出子节点

                  for(OrgItem item : ou.getChildren())

                  {

                          print(item,depth+1);//缩进深入一层

                  }

          }

  }



#+END_SRC





** 23:40 Social engineering                                           :地球:





#+BEGIN_SRC org

  Who am I??





  “没有一个系统是安全的”



   “人不能总藏在他的计算机后面，最大的安全漏洞并不是存在于什么程序或者服务器内，人类才是最大的安全漏洞”



  “所有黑客手段中最有效的、最伟大的幻想艺术——社交工程学”



  “你的脸皮要足够厚，那样世界就会在你的脚下”



  台词点明主题，这电影要表达的是黑客除了本职技术外，还需要回归到最传统的路子上，要会骗人。



  “人类天生胆小且容易受骗” “人们只看到他们愿意看到的”



  MRX用的招数是根据对方给自己设的陷阱反过来给对方设置陷阱，男主角学得很快，利用MRX的性格弱点使他落网，利用女调查员的弱点让自己和同伙逃脱，用剧中台词就是“黑掉人类”——每个人也就是更精密但一样有安全漏洞的电脑系统。





  利用人的（同情、自负）弱点都很典型







  1. “人类天生胆小且容易受骗” 

  2. “人们只看到他们愿意看到的”



  Social Engineering。针对人性的漏洞，不能讲遇到好心人，只要这个人有人性，就有漏洞可黑。凡人皆有恻隐。

#+END_SRC



* 20180320.org
** 01:01 自由涡尾迹                                                    :CFD:







#+BEGIN_SRC org

  广义自由度

  广义是指什么意思？？？？（阵型、模态空间中来定义

  实际物体结构包含着无限多个自由度，只不过按照傅里叶级数

  来说（Shabana第五章的是我的理论基础【floating frame】，一定得了解9（不需要全部弄明白）



  广义frame



  包括变桨+偏航+变桨加速度+偏航加速度（你的课题）



  只能说是风力机气动力（风力机现在随着塔高的变高



  他可不像内流中质量可以忽略（即使在30°位置处，他也会出现

  弯扭耦合的过程







  叶片长度变长 会导致他的主频下降，更容易和塔架







  玩一个case



  1： 全刚性

  2： 柔性不加重力

  3： 柔性加上重力  各个频率的变化



  结果中考虑的塔架的Mx PSD函数（10MW更大些，柔性更强，他的自然主频更低些，更容易发生共振。。。。看一下整体的载荷附加对它产生的影响）



  所以这篇文章主要要说的问题是指随着风轮的面积变大，塔高变长，

  柔性增加，  需要考虑的自由度就变多（fast三个自由度。。。）



  一个结构上的频率对应一个阵型





          1. 单单玩气动不行，得结合上结构部分



  2 初始化分两个过程，这两个过程是因为尾迹分两个区域 wake1  wake2

  这个wake的初始化是分开，时间上具有前后关系（逻辑上有问题，，可以尝试

  修改一下）





          3. 尾迹的空间位置计算  叶片+尾迹的诱导速度计算（尾迹的诱导速度，叶昭良你得

  尝试把他划分为远尾迹和近尾迹， 诱导速度就不要像近尾迹那样进行Biot-Savart较为精确地计算，浪费时间，可以采用涡运动理论的简化公式（红皮书）



          4. 尾迹数据结构不断增长，不要采用不断用新的更长杯子  ，来装老杯子的内容以及一个新值

          而是直接用一个新的特别长的杯子来充当容器，这样以后新的尾迹值 只要修改就好（但是有一个问题，就是尾迹之所以分为两步进行初始化， 是因为尾迹的数组不能存为0的情况，所以是不是可以分配一个大致的尾迹形状，充当初始化即可？ 得近似符合物理实际情况 ，这样可以加快计算的过程（也就是预估的过程）

	

          5. 当前的计算存在着 Biot-Savart函数的预估矫正过程，为什么需要预估校正呢？ 因为该方程是一个隐函数计算方程，他不像显函数那样，左边是一个自变量，右边是一个计算的式子，可以通过周围几个计算的值来计算你的新值。

          6. 还有当前有一各问题，在动态计算中，的确是叶片算一步，尾迹也算一步，静态计算难道不是？ 而可以考虑的一个问题是，是否可以考虑我叶片算两步之后，再进行尾迹的计算？（这是一个性能优化的地方）

          7. 另外一个物理过程是，当前的求解器计算还包含涡核位置的计算，不同的涡线的历时是不一样的，远尾迹只用两个涡线来代替， 涡核在流动过程中是经历由小变大的过程，时间肯定不一样【叶片上气动力的计算，计算完之后在进行尾迹的计算，尾迹在不断的下移，尾迹的数据信息不断地流向下游……，这是newton-raphson的工作，得尝试修改一下】

          8. 另外一个特别伤脑筋的地方是，时间推进的（time marching 的过程）   另外跟fast耦合最大的弊端，是自由涡的时间长度必须做到0.01s，控制器的限制(这让自由涡尾迹怎么玩？？ 算不动，一个计算太长时间了， 这个是必须思考的问题



  你得把 位置问题(position)  诱导速度问题  都得思考清楚（可以把时间推进给改掉，不要用时间步进的方法， 怎么用空间步进呢？）  程序中存在的





  另外针对你的课题， 好好思考清楚频率问题(f)， 频率不能瞎说   



  塔架的偏转角度是于你使用的材料属性有关，高度有关的（位移信息



#+END_SRC



* 20180401.org
** 23:14 非宁静无以致远                                               :地球:





#+BEGIN_SRC org



  【注意力】是什么？

  是你的心神关心的东西，是你在乎的东西！东西指的是人事！



  注意力是指你心神关心、在乎的唯一一件人事。

  注意力是一个沟通你和作者的一个神秘通道（注意力是唯一一个一个通道

  只能进去不能返回来，只有找到出口才可以）

  （不达目的，别想出来）

  【注意力是一条神秘的单向心神通道】

  保持心态【保持keep going on】

  诸葛亮说：“非宁静无以致远”









#+END_SRC





** 23:26 持续专注[一段时间只做一件事]                            :java:地球:





#+BEGIN_SRC org

  在一个满眼都见得到诱惑的时代里，保持专注，用心做事也是一种修行。有热爱的事物并对其始终保持热忱则是生活的意义。

  由始到终地去做一件自己喜欢的事情，到底是怎样的一种体验?是不忘初心，还是工匠精神?这或许只有真正做到过的人才深有体会吧。

  每座城市，都有那么一群不被关注的人，他们总是用最细致的手法，做出最令人感动的极致细腻。用平和的心境、任劳任怨的劳动心态，经营好小细节、小技术，这就是最为平常的劳动者的姿态，也是“微而著”、“小而实”的劳动之美。执着于一件普通事情的砖匠，是对自己和生活负责的态度;能坚持不懈的专注于一件平凡的事情，自己也就不再平凡。

  想做好一件事，必须得用心、走心，更是急不来【急事缓办】。微不足道的地方，或许就蕴藏着较高的智慧与汗水的积累，把微小的工艺，做精、做美、做到极致!

  专工需匠心，匠心品好专



  来自 <https://www.duanwenxue.com/article/4620171.html> 



  有始有终，持续【keep what?】专注



  微而著，小而实



  集中时空精力进入其中



#+END_SRC





** 23:31 细节的魅力 ：见微知著  小大之理 四两拨千斤              :java:地球:



【关系论】

【本质】 具体的社会生活的内部联系，是外在生活现象的内在逻辑



我相信： 只有经过加工和改造的细节，才能让作品与本质真实有机地联系起来

        【一段时间持续的改造一件事情】

【细节】

细节是缝合本质真实和现象的阵线，是突入本质的向导

细节的选用与剪裁实在是一门学问【select and cut and drop】

【故事之人，细节犹如骨骼之血肉】

【封装java包的细节，达到简便的使用方式】



一、细节之所以重要，在于它是构筑艺术作品真实性的基石

本质真实是艺术真实的核心与灵魂。所谓本质，不是玄妙的“自我意识”或笼统的“时代精神”，而是具体的社会生活的内部联系【关系论】，是外在生活现象的内在逻辑【内在逻辑】。[2]细节就是缝合本质真实与艺术真实之间缝隙的针线，是突入本质的向导。只有经过加工改造的细节，才能让作品与本质真实有机地联系起来。相声演员对于语言的掌握往往令人惊艳，基本上各地方言都能随手拈来，模仿个八九不离十。除了语音，模仿他人行为举止也不在话下。无论是模仿方言还是举止，都需从细微处着手，仔细揣摩平上去入中的发声道理，研究人际交往中的微妙差异，方能实现表演技巧的精深微妙。在文本创作方面，曲艺人也会刻意选取独具典型性的细节，融入作品真实性的打造中来。在马克思看来照搬事实不加选择和提炼，作品同样有可能是不真实的。利用细节来实现曲艺作品的真实性，说起来容易做起来难，细节的选用与剪裁是一门学问。





文艺作品都强调细节，由于曲艺兼具舞台表演与文学创作的双重属性，更由于这种艺术形式要在直面听众时接受群众的检阅，每一个倏然而逝的细节都会直接影响听众的感受，从而对作品产生不可估量的影响，因此，在曲艺创作中无论如何强调细节的重要性都不为过。当然，细节也是作品整体的有机组成部分，离开人物设计、情节编制与舞台表演，再好的细节都只能浮于艺术的表面。如何在一个优秀的整体设计中穿插合适的细节，实现寻常处见功力，细微处见真章，也是值得每个曲艺创作者深究的话题。



每一个开源产品都是一部可看可不看的电影



1. 人物细节

2. 情节编制

3. 舞台表演【场景设计】



 见微知著：

【解释】微：隐约；著：明显。见到事情的苗头，就能知道它的实质和发展趋势。



【出处】《韩非子·说林上》：“圣人见微以知萌，见端以知末，故见象箸而怖，知天下不足也。”汉·袁康《越绝书·越绝德序外传》：“故圣人见微知著，睹始知终。





【管中窥豹】纵然有着一叶障目的感觉，他受了那么重的伤，他会想着怎么翻过来？

怎么筹谋呢？！



想要立足必须要有真本事！！

行动是一切最有利的证据！！





习惯无常，才乃庆幸！！！【生活的态度】

* 20180402.org
** 01:23 安心计算下一秒                                               :地球:





你对下一秒是如何对待？？



更好的计算下一秒？ 而不是心怀郁闷，乃习惯无常，安之若命！



知其无可奈何，而安之若命,享受的是一种安.

习惯无常，才会庆幸,享受的是一种幸运。



安在幸运，静中享乐。



** 15:55 知道自己为了什么                                             :地球:



<2018-05-19 15:11>对，“我的意义是什么？ 不是你，不是生命”



#+BEGIN_SRC org

  弗兰克尔提到他还记得两个想自杀的人，两个人都觉得生活没有指望了。了解后他们其中有一个人有个自己非常宠爱的孩子，在外国等着他；有个人是科学家，写了不少著作，还有很多著作在等着他。就好比父亲无人可替代一般，著作也没人可以代写。正是这种独特性使每个人都千差万别，因此让每个人意识到生命的意义，也就使他有可能完成其创造性的作品。一旦他意识到自己是不可替代的，那他就会充分意识到自己的责任，意识到自己对所爱的人和未竟的事业的责任。“他知道自己存在是为了什么，也就知道如何继续活下去。”



  寻找意义有三种途径：1.创立某项工作或从事某种事业；2.体验某种事情或面对某个人，如体验真善美或是去爱某个人；3.忍受不可避免的苦难时采取某种态度。比如弗兰克尔从集中营中的领悟就是第三种途径，在极端恶劣的环境下，态度的选择是全部的尊严和意义。



  每个人的生命的意义都不同，每个阶段的生命意义也不同，但意义要自己去寻找。弗兰克尔说：“最终，人不应该问生命的意义是什么，相反，他该认识到，他自己才是被生命诘问的人。”每个人都只能自己去回答“我生命的意义是什么”，自己应该为什么负责，向谁负责，怎样负责。生命时时刻刻向你追问：你能给予你的生命什么。

#+END_SRC





问你自己，而不是问生命！！你的意义是什么？

有些书写的是：活出生命的意义，但其实说的是活出自己的意义





“我目睹我自己的生活变得苦不堪言，但最终成为正直忠诚的人性之路。我将一如既往地追寻。”

* 20180424.org
** 23:55 结论是什么？                                                 :地球:





#+BEGIN_SRC org

  从哲学观点来看，结论是相对一定条件而言的，结论与条件互为因果关系，条件（原因）是引起一定现象的现象，结论（结果）是由于条件作用而产生的现象。



  结论与条件互为因果关系



  结论基于一定的条件、一定的前提，而提出的新的现象，或者叫做总结性判断【什么是条件，就是分支，或者叫做多种查看方式，菱形分界,不同的条件引出不同的结论】。





  对某人的推理进行评价之前，我们必须先要弄明白他的推理是什么？【推理指的是什么？ 按照一定的道理 经过一定的过程得到的现象】,



  论题： 是引起会话或讨论的问题或争议。 对人们所谈论的事情来说，论题是一个驱动因素



  1. 描述性论题[]： 针对过去、现在、未来的描述是否正确提出的问题

     1. 典型的事例： 引起通货膨胀的原因是什么？

     2. 明年初放假到底是跌？

     3. 征收房产税谁是最大受益者

  2. 规定性论题[怎么做]： 针对我们应该怎样做及对与错、好与坏、提出的问题

     1. 典型的事例： 民众应当容忍高通货膨胀？

     2. 面对高房价我们应该做什么？

     3. 我们真的有必要征收房产税？



  基本问题是什么？ 基本论题是什么？





  批判性评价的第一步就是找出结论，这往往是很困难的一步【一定得学会批判性的评论】



  结论： 就是演讲者、或者作者希望你接受的信息【我针对一定的前提研究的东西是有用的】 [ 我研究的东西是有用的]  [ 我东西是有用的]  [ 我是有用的]



  为了确定结论，我们必须问一问：“作者或演讲者希望证明的是什么？”或“他们的主要观点是什么？”[观点][证明的内容]



  作者或演讲者对这些问题的答案就是结论



  在寻找结论的过程中，你需要寻找一个或一组作者希望你相信的陈述。作者希望你接受他的这些陈述，进而相信她的结论。





  具有说服力的文章或辩论的基本结构是：



     因为A， 所以B



  其中B代表结论，A代表支持结论的证据。这个结构就是推理的过程。



  结论是由推理产生的，它起源于原因【也就是条件和前提特别重要，因为他们产生结论】, 结论是一种需要其他观点支持的观点【被支持的观点】。结论是值得批判的。





  无论什么时候，如果某人生成某件事情是真的或者是应该的，却提不出任何证据来证明支持他的观点，那么，他个人观点就是没有结论，因为他没有提供可支持的证据。





  没有证据支持的言论仅仅是一些观点而非结论





  被支撑起来的观点【树形结构的上层观点，而非独立事实，一定是这样，必须是金子塔的样式！！！ 必须有支撑的，没有支撑的观点均是浮沙摄影，空中楼阁】





  论题： 我们是否应该在内华达州储备核废物

  结论：我们反对在内华达州修建一个核废物处理站

  支持结论的论据： 有一些更安全的方法来储存这些危险的核能源副产品。



  为什么更安全的方法更可取？？





  人们的推理思路【理解，反思】

       因为你认为某个观点得到其他观点强有力的支持，所以你就相信这个观点（即结论）.这个过程就是一个推理的过程。当人们进行这个过程是，就是

       在推理的过程；推理得到的结果就是结论。





  一旦找出结论， 就要把它作为评论的焦点【反复批判】

  结论是作者或演讲者希望你进行选择的目标【但是你的目标不是我的目标， 你的结论在我的眼里不是结论】





  人们需要继续推理的思路【理解、反思】

        根据这些论据，我是否该接受这个结论？ 他的论据的前提是否正确？ 是否可以运用在当前前提下？？？

        论题是什么额？？？？

      

  知道论题是什么，有助于找出结论。



  确定论题的方法：  看文章的题目，然后看文章的手段。如果以上两种方法无效，就有必要接着往下看几行了



  如果以上线索都不行，有必要看一些结论提示语作为线索。



  1. 所以。。。。。

  2. 这说明。。。。。

  3. 因为。。。。

  4. 为此 ....

  5. 我们可以推理。。。。

  6. 接下来

  7. 由此得出结论。。。。

  8. 那样。。。。。

  9. 我们努力说明的一点是。。。。

  10. 简而言之。。。。

  11. 最明显的解释是。。。

  12. 事实证明。。。。

  13. 事件的真相是。。。。。

  14. 早期的【先前的】



  如果还看不出来，注意文章的段落层次， 一般作者都是在开篇写明为什么要写这篇文章，也就是这篇文章的目的，包括他们要证明的问题是什么？ 有的人在结尾处总结出结论。



  如果还看不出来结论？



  记住不可能作为结论的东西。

  例如



  1. 统计数据

  2. 定义

  3. 背景信息

  4. 证据



  有结论，一定有钻石存在【钻石代表的是分支前提】



  如果还有不清楚？ 一定一定要问自己“所以？？” 这在你的结构思考力.xmind中有提到，但是你还是没有用起来【所以这就是为什么需要review】。【结论先行】



  或者说 “因此？？”【就是说由这个观点你要说出什么来？？？】





  一句话，总结结论【也是从条件、前提出发，N个方面代表目录的第一级】

      在……的基础上，从……N个方面(从以下三个方面)，说明了……

    



  记住

  1. 我们的表达是为了让读者或听众理解我们的意思，想方设法将自己的意思表达清楚，容易理解

  2. 还得进一步记住，我们的表达要区分不同的读者或听众的类别。

  3. 读者或者听众不了解我们内心的实际想法，他们不知道我们的价值观和背景，他们只能通过看到、了解到、听到的知识做推理判断





  我缺乏反复问问题的能力？？  也就是我下一步该问什么问题？ 我问的问题能够解决问题？  我还需要问那些问题？ 才能更加逼近我要的结论>????



  我问的这些问题对于逼近问题的出口有帮助？？  一个问题肯定是在一定环境下，具有进口和出口的，也许很多人对这个问题不了解，就是知道怎么进去

  却不知道该怎么出来？ 自己需要问多少问题，才能看到出口的曙光？？！？！？！！！ 你一定得反复问自己，你是学过lisp的，反复问题问题是你的强项！！

  Your strong power!!

#+END_SRC





#+BEGIN_SRC org

  1. 写什么东西都要紧密围绕核心

  2. 不依赖核心，缺乏逻辑性的组织，是写作的或者表达最大的问题

  3. 现在没有对方法进行研究，或者你论文做得工作偏向于物理问题的研究，所以核心的介绍一定得是跟物理问题相关的【你这篇文章做的内容，你项目中的挑战跟方法的提高

    方法的改进有贡献？】 对方法的评论是次要的，但是不能喧宾夺主。

  4. 方法的问题只要讨论一点即可，是支撑我们使用CFD的理由，仅此而已

  5. 错误的写作比如： 第二段写了几个实验的研究，突出了研究结论，对物理问题的结论。第三段开始写方法方面的描述，得到的完全是方面的方法结论。要注意咱们的研究

     不是针对研究方法，所以方法的部分得简写，核心还是关于物理问题的结论，而不是关于方法的结论。第四段又开始写关于物理问题的研究，也不知道是实验还是数值方法，

     没有提及。所以这三段的逻辑非常混乱。

  6. 而在写双滑移的时候，就得多描述方法行的结论了，因为你是用双轴模拟，方法上的改进了，模拟方法的改进了【再次体味，首先找到方法，然后采用该方法对物理问题进】

    行描述 这是基本的逻辑过程。 写代码的过程其实就是偏向于方法上的过程，而在做实验，做模拟等则是偏向于物理问题的描述.你作为一个程序员得从一个更高的程度

    去思考你的

  7. 如何分类描述？？ 分类1： 实验方法  然后 BEM研究物理方法  FVM研究物理方法

     分类2： 物理问题方法 ，包含实验  BEM  FVM CFD等，紧接着全部是方法方面的研究，包括BEM FVM CFD

     按照物理问题分类，按照方法分类

#+END_SRC







#+BEGIN_SRC org

  推理必须存在层次感，有一个金字塔，有很多条线，先不要太乱，否则图就没法看了



从技术层面上，从管理层面上，从市场层面来看， 这些句子在思考过程出现有助于推理。 他们如何得出结论，他们是在恩阳做的？？

文思敏捷，很重要。 





我们写作、说话【表达观点】,需要的不是提出观点，而是要提出结论，这是我们市场忽略的地方，只喜欢说出自己的观点，却没有任何支撑性的

结论！！！！！！！当别人问你为什么这样，你又说不出理由来。结论先行！



写文章会像剥洋葱一样，逐层渗透？  按照金字塔原则，结论先行，首句主题句，把文章的主题用一句话概括放在标题，每段又有自己的中心思想，

也要总结出来，放在段首（好像渔网中浮子，方便你收网！） 所有的文章犹如一张无形的网，网下面存在一条条的文章小鱼！每条鱼都有他的

逻辑结构，因果关系、并列关系、递进关系、主次关系、总分关系【总分总是我们从小学阶段开始，学的最多的一种方式，素质教育强制灌输给我们的方式】

还有结构顺序【国家、企业、部分等】 时间顺序【前中后】



网中的浮子是浮在水面上的，而真正的内容则是藏在水面底下的细小网孔！



事物描述得不清楚，一定是洋葱皮太厚，没有剥完。网中提物【提物大神：物理本质】



夏天这个事物太大了，于是你可以描述夏天的太阳、夏天的风、夏天的暴雨等几个方面进行分开阐述。

#+END_SRC





#+BEGIN_SRC org



  写作能力出众的人，大多是掌握了一些固定的重要写作原则，并在写作的过程中反复不断地使用。



  昨天读了一本关于写作原则的书，叫《一本小小的红色写作书》，作者是哈佛大学学生布兰登•罗伊尔，作者经过长期研究英文写作，总结出了20个写作原则。这20个写作原则因为来源于英语写作，有些在中文写作上并不适合，但有些却是很值得借鉴。我们发现英文写作中，非常注重文章的条理和逻辑，使读者快速找到文章的脉络。我们中文写作中，往往杂乱无章，看了一遍下去，不知所云，找不到重点，严重影响读者理解作者的意思。这一点我们需要学习英语写作中的一些规则。



  从文章挑了3个比较重要的原则，如果能按照这三个原则来写作，就可以写出一篇逻辑清晰，内容有料的文章了。



  1、运用“自上而下”的写作法



  “自上而下写作法”指的是，先写结论，再写理由，先写最重要的，再写次要的，最后写最不重要的。这个原则和金字塔原理写作要求是一样的，这也是西方人写作的习惯。我们中文写作中，常常是相反过来，把重要的放在后面，前面是很长的铺垫。这完全是站在从作者的角度来写的，因为作者写作的过程总是先找到材料，然后分析材料，最后得出结论。但从读者的角度来看，阅读习惯不是这样的，读者更喜欢先知道你的结论是什么，然后再看你的依据。我们写作的目的是给读者看的，因此我们应该站在读者的角度上，按照这个原则进行写作。金字塔原理中讲到要结论先行，自上而下。把文章的主题用一句话来概括放在标题，每段又有自己的中心思想，也都要总结出来，放在段首。这样读者读起来，一目了然，时间少的时候，只要读中心思想句，就可以对整篇文章有大致了解。如果时间充足的，想再继续往下了解，可以再读其他部分，就是这样按重要程度顺序写下去，文章就会像是剥洋葱，一层层地往里深入。



  2、分解事物



  小学时，老师教给我们经典的写作结构是总分总结构，如果是议论文，主题就是总结论，为了论证我们的总结论，不能只是从大的方面进行，应该把它分解为若干个分结论。如果是记叙文，要对所要描述的事物进行分解，才能有东西可以写，才能对事物有深入了解。比如要描绘春天，因为春天这个事物太大了，为了能把它描绘，我们可以将它分解为春草、春花、春风、春雨等几个方面来分开叙述。这样一个有质感的春天美好景象就展现出来了。



  3、支撑所说的内容



  将总论点分解为多个分论点后，需要继续用实例、故事、数据等证据来支撑你的论点，有了客观支撑证据，才能使分论点站得住脚。批判性思维中认为，只有看法，没有理由的，只叫纯观点，不能判断它的真假，比如“中国将会成为世界是经济最强的国家”就只是一句纯观点，你无法判断它的真假。有观点，又有理由，才叫结论，可以判断真假。我们写作、说话、表达观点，需要的不是提出观点，而是要提出结论。但是我们常常忽略了这一点，只喜欢说出自己的观点，当别人问你为什么这样，你又说出不理由来。书中举的一些例子，让我深同感受，因为从事的是HR工作，经常看到一些简历的写有很多自我评价的话语，应聘者说自己是一个工作积极，关于和人打交道，执行力强，但没有什么客观的事实依据支撑，这些只是干巴巴的主观评价，如何叫人信服。所以我们在写作中，一定要注意自己的观点，有没有足够的理由支撑，没有，观点就难以得到别人的认可。

#+END_SRC







#+BEGIN_SRC org

  Applied the numerical method and experiments method , to study…



  方法是用来applied，而不是用来藏着的

  

方法行描述文章【核心是采用了新方法，研究物理问题】,采用方法性描述



物理性描述文章【核心是针对物理问题进行研究】



#+END_SRC

* 20180425.org
** 16:28  What you done today decide what you will become later



记住你当天的target【每个人都应该有一个目标】来指引你今天的任务，规划你的时间，



你今天的所作所为决定着明天的进程【当你经过了那么多年的观察之后，你发现了这个

道理，并且正在践行】





** 19:10 开始修改论文

:LOGBOOK:

CLOCK: [2018-05-03 周四 20:03]--[2018-05-03 周四 20:04] =>  0:01

CLOCK: [2018-05-03 周四 19:15]--[2018-05-03 周四 19:19] =>  0:04

CLOCK: [2018-04-25 周三 19:10]--[2018-04-26 周四 13:17] => 18:07

:END:

** 19:22 版本控制系统

版本控制可以认为是一个集中式的知识管理,

     任何时刻任何地点对配置的修改都要及时上传合并 (merge).这是积累能力的关键.

* 20180426.org
* 20180427.org
** 17:35 阅读参考文献





#+BEGIN_SRC org

  1. 略读文献明确结构

  大多数期刊使用传统的 IMRD 结构：首先是摘要，其次是前言（Introduction），方法（Methods），结果（Results）和讨论（Discussion）。每部分通常每个都有自己公认的结构形式，如果阅读文献时，熟悉并能预测这些结构，将会读的更快，理解的更多。

  ,*** 摘要

  摘要常包含 4 个信息

          • 目的（为什么要做该研究）

          • 方法（怎么做的）

          • 结果（研究发现了什么）

          • 结论（结果意味着什么）

  大多数人阅读文献时先读摘要。当然有些人尤其是专家，阅读文献时一般是先看标题再看图表，因为多数情况下图表告诉了读者该研究做了什么实验，最后得到了什么结果。不过我们还是建议阅读文献时，首先认真仔细的阅读摘要，并注意上面列出的 4 个信息，然后再看图表，最后再看其他部分。

  ,*** 前言

  前言有两个作用，一是引起读者对研究的兴趣，其次是为读者提供足够的信息来理解文献。一般来说，前言一般是先介绍公认的信息（本研究时行时已知的信息），然后介绍更具体的信息（本研究未知的问题），最后引出一个焦点（作者提出并回答了什么问题）。因此，作者首先描述的是以前的工作，让读者理解目前研究（广义的），然后把研究工作着眼于某一问题（具体的）。



  1. 公认的大问题, 常识，大家都做了什么

  2. 研究的小问题, 局部问题的大范围调研

  3. 你要研究的核心



  ,*** 方法

  方法部分告诉读者实验是如何进行的，如何回答前言中提到的问题。方法通常很难阅读，尤其是对于研究生来说。但是对受过训练的科学家来说就简单的多，因为技术语言和实验细节水平足以可以让其重复该实验。你还可以通过仔细阅读方法部分来理解作者的实验设计，评估实验的有效性。



  answer: 你是如何回答核心问题？



  ,*** 结果和讨论

  结果部分包含了所有的研究结果，研究发现了什么，并以可视化（图表）的形式显示研究数据。通常情况下，结果部分不包含引用参考文献，不与其他人的研究结果相比较。与其他人研究结果相比较是在讨论中进行的，讨论中需要把自己的研究结果与他人进行广泛的比较。讨论有助于对引言中提出的问题作出明确的答复，并解释结果如何支持结论。

  ,*** 非典型结构

  有些文章与常见的 IMRD 结构不同。例如，通信类文章一般就没有摘要，只有文章正文。然而在阅读时，有时可能会看到「摘要」，不过这时候的「摘要」是研究的概括。有时为了吸引读者的注意力，「摘要」里含有大量的前言介绍部分，即把摘要和前言合二为一，下一段直接就开始实验的描述。

  因此，如果是第一次阅读一篇文献时，需要略读一下整个文章 ，分析一下文章的结构。某一部分有没有识别结构的标题？如果没有，那该部分的结构是什么。然后再决定哪部分内容包含对理解文章的重要材料，以便决定阅读文章的顺序。



#+END_SRC



* 20180501.org
** 22:20 Smart questions                                              :地球:



1. Trust us, they will be able to tell from your questions how much reading and thinking you did, and will be more willing to help if you come prepared.

2. Describe the symptom of your question in chrononlogical

3. The best way to get a rapid and responsive answer is to ask it like a person with smarts

   confidence,and clues who just happens to need help on one particular problem

4. 【answer you needed】You need to be precise and informative(version number)[你想要什么样答案？ yes-or-not answer?]

   1. being seen to invest effort in simplifying the question makes it more likely you'll get an answer

   2. Simplifying the questions makes it more likely you'll get a useful answer

   3. in the process of refining your bug report, you may develop a fix or workaround yourself

5. Don’t provide distracting and unhelpful info, such as 'I'm newbie loser'

6. 【Goal】Describe the goal first, not the step(Often, people who need techinical help have a high-level goal in mind

   and get stuck on what they think  is one particular path towards the goal. Do care! Often we come for help

   with the step, but don't realize the path is wrong[方向是错的，还去纠结则是浪费时间】

7. 【OD】One good convection for subject headers, used by many tech support organization, is "object-devication".

   1. The Object part specifies what thing or group of things is having a problem, and

   2. the "deviation" part describes the deviation from expected behavier

   the process of writing of an "object-deviation" description will help you organize your thinking about the problem

   in more detail.

   1. what is affected?

   2. just the mouse cursor or other graphics too?

   3. is this specific to the X.org version of X?

   4. To version 6.8.1？

   5. Is the specific to Fooware video chipsets?

   6. To model MV1005?

   7. .....

8. 【Tact filter】the normal people apply tact filter on the mouse to dodging the meaning of what they really wanna say

   while the nerd peole apply tact filter on the eye and ear to accept what they hear and see, without apply

   the tact filter on what they will say!

9. 【Antelope】Instead of being a mongoose, be an antelope.When an antelope is confronted with something out of the ordinary,

   and remember it or write it down. Then perhaps start cautiously pressing "OK" or "Cancel", whichever seems safest.

   Try to develop a reflex reaction --if a computer does anything unexpected, Freeze!!!

10. 【Precise】Be precise. Programmers like precison. 







RTFM: Read the Fucking Manual

STFW: Search the Fucking Web

http://www.catb.org/esr/faqs/smart-questions.html#beprecise

* 20180502.org


Patience, Patience, Patience……



* What should be turned off while you work?



1. wifi

2. Notifications

3. Mobile Phones

   



{{{

    Writing is much better without the Internet. This is by

    a factor of 10 or more. When you have the Internet at

    your disposal, writing often gets interrupted to go

    check on this or that. But writing with no other good

    options means you're going to really be able to focus.

    - Leo Babauta



}}}





* what you should stay?



1. 25 minutes block[番茄时间]

2. Focus on one task

3. Stay on task even if you finish early

4. Write in Point form

   1. write in sentence fragments

   2. Each fragment is one idea

   3. Flesh out the fragments later

* 20180503.org
** 13:54 Quality content



Quality content avoids creating frustrated users.



It helps the user effectively work with a product. 



*** Five Cs

1. Clear[清晰]

   Technical writing requires clarity of expression and

   therefore simplicity of languag

2. Concise[精确到位、专业]

   Short and to the point---that's the key to good documentation,

   or any other content. No one wants to read lengthy explanations

   or work their way through long procedures.

3. Consistent[前后一致]

   Consistency makes the documentation and product easier for user

   to understand. What this means is a common tone, a common style

   a common look and feel

   1. A common tone

   2. A common style

   3. A common look

   4. A common feel

4. Complete[完备性]

   A mathematical theory is not to be considered complete until you have made it so clear that you can explain it to the first man whom you meet on the street.

  

   Content should be available in a number of formats and be aimed

   at a number of different levels and types of user

5. Correct[不瞎说]

* 20180504.org
** 02:09 what is the story



*** Keep to the point



**** Start with a Lightning talk



 - Talk about something specific within 5 minutes

 - Realise you will over-run 5 minutes (everyone does) 

 - Get some feedback on the content

   - what did developers find interesting

   - what do developers want to hear more about 



**** Have a basic structures



You are telling a story, so there is a begining, middle and end 



Begining

 - tell people why the subject is interesting (context)



Middle

 -  the meat of the story, what happens, how does it happen



End

 - what was the point of the story, what should the audience do next







* 20180507.org
加深对风力机在旋转过程中的功角特性、载荷特性的认识



风力机在偏航运行时，风力机左右两侧的气动力受力不均，风轮下游螺旋状尾流发生偏斜

导致在风轮平面内产生非定常诱导速度，叶片径向界面的攻角会发生周期性的变化，进而

叶片的载荷呈现周期性变化。

* 20180509.org
* Event: 



  



  From: [[file:~/.emacs.d/GTD/orgBoss/Journal/journal.org::*]]





** 13:47 逝者如斯夫，不舍昼夜                                         :学术:



珍惜时间！

* 20180531.org




** 20:09 赛博学习法改述                                               :学术:





原始问题:



``` org

问题1：我阅读这篇文章的目的是什么？

    在阅读之前，你必须知道为什么要阅读，这样你在阅读的过程中，就会知道自己应该留心什么。

问题2：关于这个话题，我已经知道些什么？

    在你看完标题但还没有开始阅读正文之前，作为热身，你应该花几分钟的时间快速写下关于对应话题所有你知道的事情。

问题3：这篇文章的主要内容是什么？

    开始仔细阅读之前，你需要通过略读文章来知道文章的要点梗概。

问题4：作者接下来要说什么？

    你可以尝试一边阅读，一边预测作者接下来要讲些什么内容，让自己先他（或她）一步。

问题5：“专业问题”是什么？

    每一个科目都会有一套自己的问题，必须牢记这些问题。

问题6：针对这些信息，我能提出什么问题？

    当你在阅读的时候，你必须意识到你能从材料中提炼出什么问题。

问题7：这篇文章里哪些是重要信息？

    你必须分辨哪些信息是重要的，值得你把它们写进你的笔记里面，主要的判断依据是你的阅读目的（问题1）。

问题8：针对这些信息，我要如何进行改述和总结？

    在你选择、记录重要信息的过程中，你应该用你自己的话，尽可能简短地来表达作者的意思。

问题9：我应该如何组织这些信息？

    记完笔记之后，仔细看看你的笔记，看看文章是如何组织信息的，同时，也想想你是否能够创造合理的新信息组或者信息关联。

问题10：我如何用图表来说明这些信息？

    再一次通读笔记，你现在的目标应该是将尽可能多地将信息转化成符号或者图片。

问题11：对我而言，这些信息的记忆点是什么？

    现在你已经对文章的信息进行了处理，而且也开始理解这些信息，你需要一些技巧来帮助你，确保你能够记住考试所需要的信息。

问题12：这些信息如何才能与我已知的知识结合起来？

    当你阅读笔记时，你应该看看新信息怎样才能够与你已经知道的知识结合起来——不是只关于这个话题，而是关于其他所有方面。



```





改述:



``` org

读:



  我读这篇文章的目的是什么？这篇文章包含哪些主要的重要内容（两要20%  80%不重要  另外你只有20%的时间来完成20%的重要任务，80%的时间你也许并不会集中在这个问题上,所以很多学生都认为他一天时间就能解决掉所有问题，有点太言过其词），这些问题中哪些是专业问题？我能够提出哪些其他问题？

写:

  

  可否根据不同的背景问题、背景主题、背景内容进行改述(解决问题)、重新组织、总结这些信息，并进行图表可视化(更好解决问题)？



本文研究的目的，以及为了完成该目的，你自己需要回答哪几个问题？



学习是一个克服困惑的过程（困惑就是通往通达的关键性的过程）

```





人生在世，就要敢做刚当



再提二八原则

根据二八原则，你应该弄清楚，哪几件事情是比较重要的，也是你必须完成的，然后确保你首先完成那几件事情。如果你将自己的精力和时间均分给所有的事情，你会在不重要的事情上浪费很多时间，同时又不能给予重要的事情以足够的关注。你一定要学会按照优先顺序安排课程内容，否则你永远都不能按时完成重要的事情。







* 20180601.org
** 12:58  消极思维的魅力                                              :学术:



``` org



1. 你总是以为你会按时完成任务，但是大多数情况都无法完成。很多学生总是认为他只要临时

抱抱佛脚就可以勉强过关，完成任务



2. 消极不在于有助于达成乐观的情绪甚至成功，而在于现实主义态度，比如



SMART原则，specific具体，Measureable(可测量), Attainable(可实现)

Relevant(适度)  Timely(适时)的目标



3. 别奢望别人能够帮自己，一切都得靠自己（不是让你啥人帮忙都不需要，而是



提醒自己，必须得靠自己努力，当自己都无法完成时候，才寻求别人帮忙





4. 乔布斯:"记住人都会死，这是根据我所知可以避免产生你会有所损失这个思维陷进"

   的最好方式



5. 再努力有时候也会办不到(不是让你不去做，而是让你往其他方面再想想)

   

盲目的正面思维，忽略问题，并不能解决问题，必须看到事情的负面，

才有可能避免困难，获得好的结果







正面思维和浮夸的气氛要不得



```

* 20180602.org
** 20:26 在教育自己这件事上，你是最重要的





``` org



原则一：在教育你这件事情上，没有人能够比你自己做得更好。

    明白了这一点，任何学习的情况都将由你掌控。老师们可以告诉你学习内容，但如何学习完全由你决定。

    你不会因为学习情况而调整学习需求，相反，你会让各种学习情况去适应你的学习需求。不管你的老师多么才华横溢，

    多么有奉献精神，他们都不可能比你更清楚你是怎么思考和处理信息的。

    

你也别奢望别人会抽出大把大把时间来帮助你，除非双赢!



任何人，只有不断挑战，不断突破限制，才能学到真正重要的内容。



对你自己质疑，质疑自己观点、他人观点等



一定是金字塔原则，由外之内 由表及里

```

* 20180612.org
** 14:12 一个工具，两个模型(重点是联系)



一个工具：金字塔原理

2个模型：黄金三点论(第一 第二 第三 ） （首先 其次 最后）



要求： 重点突出、逻辑清楚、主次分明



{

 1=> 背景,现象,观点;

 2=> 冲突,原因,案例;

 3=> 疑问,方法，建议；

}

三段论： 

     1. 背景(大：时代背景、工业背景、工作背景   最为正式的场合) 2. 冲突(不和谐的地方)   3. 疑问(对这些不和谐的地方提出新的思路) 4. 解决方案

     1. 现象(偏向客观 自然现象、社会现象  偏向较为正式的场合) 2. 原因 3. 方法

     1. 观点(个人观点比较多  偏向主观， 与人聊天等) 2. 案例+例子 3. 建议



           

通过上述概括出一般性逻辑， 结果附近有原因（也就是坐着下一步会讲什么内容)



你的目的是什么，主要包含哪些主要内容，哪些是专业内容，你能提出哪些内容？



你能总结一下你说的内容，换成另外一种方式，经过图形化、表格化等更加清晰的方式？





1. 目的+主要内容+提问题(背景和方案)

2. 语言凝练（按照不同的层级进行划分信息，改述信息  总结信息） -->联系和总结

3. 可视化（比如通过图表方式）

   



总结: 发散性思考，逻辑性关联(特别是relationship, 只有有关系，你的观点才能持续下去，可持续发展, 重视可持续发展，而不是一蹴而就)



有些人喜欢把资源捂死了，不分享，这样的人格局有点低，资源流动起来才不会是死的！



心如磐石，一念尚存，便不可灭!



<2018-06-20 17:56>



|         序言的基本要素                                            |

| S(情景) | 从我行实行企业业务专营模式依赖，业务实现了快速增长   |

| C(冲突) | 企业客户资金自身平衡问题成了制约业务进一步发展的瓶颈 |

| Q(疑问) | 如何实现我行企业业务的可持续发展                     |

| A(回答  | 我部计划面向客户推介某某产品，实现业务联动、多方赢利 |





| S(情景) | 集团近年来发展速度快、产量逐年提高，众多项目被列为北京市重点项目。   |

| C(冲突) | 在如此高速发展的背景下，集团资金缺口成为限制集团快速发展的主要瓶颈。 |

| Q(疑问) | 如何拓展融资渠道、降低融资成本、提高资金使用效率？                   |

| A(回答) | 应该实施一项“设计全方位的创新金融服务支持方案”。                     |





如何做汇报：

1. 数据说话

2. 经常找领导谈话

3. 用excel写规划

* 20180613.org
** 14:52  How does summary a  paper?                                  :学术:



***                                         Summarizing a Research Article



   Research articles use a standard format to clearly communicate information about an experiment. A

research article usually has seven major sections: Title, Abstract, Introduction, Method, Results,

Discussion, and References. Sometimes there are minor variations, such as a combined Results and

Discussion section, or an overall General Discussion section in which multiple experiments are

presented in one article.



**** Reading the Article



*Allow enough time.* Allot at least half the time that you spend on this assignment to reading and

understanding the article. Before you can write about the research, you have to understand it. This

takes more time than most students realize. Does the author's study make sense to you in lay terms

(could you explain the study to your roommate)? When you can clearly explain the study in your own

words, then you are ready to write about it. Here's how to proceed.



*Scan the article first.* If you try to read a new article from start to finish, you'll get bogged down in

detail. Instead, use your knowledge of APA format to find the main points. Briefly look at each

section to identify(写作顺序):



    • the research question and reason for the study (stated in the Introduction)

    • the hypothesis or hypotheses tested (Introduction)

    • how the hypothesis was tested (Method)

    • the findings (Results, including tables and figures)

    • how the findings were interpreted (Discussion)



Underline key sentences or write the key point (e.g., hypothesis, design) of each paragraph in the

margin. Although the abstract can help you to identify the main points, you cannot rely on it

exclusively, because it contains highly condensed information.



**** Read for depth, read interactively. 



After you have highlighted the main points, read each section several times. As you read, ask yourself these questions:



    • How does the design of the study address the question posed?(怎样解决问题?)

    • What are the controls for each experiment?(实验的控制变量)

    • How convincing are the results? Are any of the results surprising?(结果具有说服力?)

    • What does this study contribute toward answering the original question?(针对原始问题这篇问题解决了多少?)

    • What aspects of the original question remain unanswered?



**** Plagiarism. 

Plagiarism is always a risk when summarizing someone else’s work. To avoid it:



    • Take notes in your own words. Avoid writing complete sentences when note-taking.

    • Summarize points in your own words. If you find yourself sticking closely to the original

    language and making only minor changes to the wording, then you probably don't understand

    the study (see our handout, "Plagiarism and Student Writing").



Like an abstract in a published research article, the purpose of an article summary is to give the reader a brief, structured overview of the study. To write a good summary, identify what information is important(和你研究问题相关的就是重要的) and condense that information for your reader. The better you understand a subject, the easier it is to explain it thoroughly and briefly.



**** Write a first draft. 



  Use the same order as in the article itself. The number of suggested sentences given

in parentheses below is only a rough guideline for the relative length of each section. Adjust the length accordingly depending on the content of your particular article(可以运用).



    • State the research question and explain why it is interesting (1 sentence).

    • State the hypothesis/hypotheses tested (1 sentence).

    • Briefly describe the methods (design, participants, materials, procedure, what was manipulated

    [independent variables], what was measured [dependent variables], how data were analyzed

    (1-3 sentences).

    • Describe the results. What differences were significant? (1-3 sentences).

    • Explain the key implications of the results. Avoid overstating the importance of the findings (1 sentence).

    • The results, and the interpretation of the results, should relate directly to the hypothesis.



For the first draft, focus on content, not length (it will probably be too long). Condense later as needed.Try writing about the hypotheses, methods and results first, then about the introduction and discussion last. If you have trouble on one section, leave it for a while and try another.



**** Edit for completeness and accuracy. 



Add information for completeness where necessary. More commonly, if you understand the article, you will need to cut redundant or less important information.

Stay focused on the research question, be concise, and avoid generalities. The Methods summary is

often the most difficult part to edit. See the questions under 'Reading interactively' to help you decide

what is important to include.

     Edit for style. Write to an intelligent, interested, naive, and slightly lazy audience (e.g., yourself, yourclassmates). Expect your readers to be interested, but don't make them struggle to understand you.

Include all the important details; don't assume that they are already understood.

    • *Eliminate wordiness, including most adverbs ("very", "clearly").* "The results clearly showed

    that there was no difference between the groups” can be shortened to "There was no significant

    difference between the groups".

    • *Use specific, concrete language.* Use precise language and cite specific examples to support

    assertions. Avoid vague references (e.g. "this illustrates" should be "this result illustrates").

    • *Use scientifically accurate language.* For example, you cannot "prove" hypotheses (especially

    with just one study). You "support" or "fail to find support for" them.

    • *Rely primarily on paraphrasing, not direct quotes.* Direct quotes are seldom used in

    scientific writing. Instead, paraphrase what you have read. To give due credit for information

    that you paraphrase, cite the author's last name and the year of the study (Smith, 1982). (See

    our “APA Citations” handout.)

    • *Re-read* what you have written. Ask others to read it to catch things that you’ve missed.

    Reference



进一步可以阅读[Emacs org-ref][2]



[1]:Pechenik, J. (1997). A Short Guide to Writing About Biology, 3rd ed. New York: Harper Collins. 

[2]: https://github.com/jkitchin/org-ref

* 20180614.org
** 13:24 ABCD原则(汇报)--演讲与口才



让你突破自我的演讲入门课(龙兄)。（if you fail to prepare, you prepare to fail）



ABCD分别指Actor,Behavior(decision),Condition,Degree



在我的引导下(C),新销售员(A),能够从我的故事中准确(Degree)总结出电话销售人员成功的关键要素(B)



根据我所提供的案例中的信息(C),新销售员(A)能够运用所教授的方法准确的(degree)介绍产品利益表，并处理客户提出的异议(B)



在给定客户信息的情况下，新销售人员(A)能够准确(D)运用我所教授的方法与技巧进行电话销售全过程现场演练，完成销售任务





在理念统一的前提下(C),客户经理(A)非常愿意(D)去跟新老客户推广"积分贷"产品





在给定明确的需求下，客户经理(A)能熟练(D)运用指定方案营销技巧向客户推广积分贷产品(B)



------------------



一句话总结你要说的内容……(万能一句话)



老师您好 在昨天跟您电话初步沟通"结构思考力"内训需求的基础上，今天想从学员面临的问题，业务部门的需求以及HR具体需求三个方面跟您进一步探讨一下课程合作的方案，您看有什么补充的内容。



这种说话结构一般归纳为:  在....的基础上，从一下N个方面(通常是金子塔原则，或者文章目录的第二级目录)，说明了。。。。







三种分类方式

1. 时间

2. 结构

3. 重要性



思考按照时间来收集重要的结构性信息，结构通常是由上至下，由表及里







 

目的？

方案？

方法？

最好的方法？



** 15:52 学习工作的关键---态度                                        :学术:

***                                             态度决定一切,并非老生常谈



keyword: 态度、信念、价值、设想、期待



``` org

  态度是定义及解释你的经历的方式。你的态度就是你的信念、设想、期待以及价值的总和。态度是人与人最关键的不同。所有的一切都与态度有关。



1. 信念

2. 设想

3. 期待

4. 价值







   这决定了你对事件的解读及其反应，简单来说，你的态度就是你看待世界的方式。你对学习的态度和对自己的认知互有影响。

毕竟当你是一个学生的时候，学校占据你大部分的生活。你的态度决定了你在学校的经历、你设定的目标以及你为此选择的技巧

及策略。所以，*你的态度也决定了你能收获、掌握知识的多少*。当我开始写这本书的时候，我曾以为我的任务就是简单地将尖子

生的学习方式写下来，但在我接触到越来越多的学生的过程中，有一件事情也慢慢显现出来：尖子生之所以会使用完全不同的学

习方法，是因为他们对事情的看法也完全不同。不同的态度成为尖子生在学习方法上另辟他径的重要原因。

[来自 《如何学习》】





```

  跳出【或者叫做改变、拓展】你的态度来思考问题【多看看其他人的生活、工作态度，跳出自己狭窄的世界】

学习的态度是不断学习（终生学习就是人的精神)，进行自我教育。以学为乐。不断发现问题、解决问题



  我的态度就是与人交好、终身学习、不断挑战自我、分享知识和经验!

* 20180620.org
** 14:04 再次体会结构思考力                                           :学术:

*** 结构是一切事物的根本 



无论是宏观物体、还是微观的细胞，都存在结构之中，



演讲由演讲结构(故事性的展开  从共同点出发，引出冲突，提出问题，并解决问题)



| 类别       | 具备结构思考力的特点                   | 不具备结构思考力的特点                   |

|------------+----------------------------------------+------------------------------------------|

| 解决问题   | 迅速抓住主要矛盾，忙而不乱应付任何问题 | 难以把我问题关键，经常遗漏关键要素       |

| 决策       | 能快速理出重点，果敢且科学做出决策     | 瞻前顾后，难以割舍，犹豫不决             |

| 写作       | 主题明确，结构严谨，层次清晰           | 找不到重点，大量文字和数字堆砌，结构混乱 |

| 表达、沟通 | 语言准确，思路清晰能快速总结说话要点   | 很难把想要表达的思想在短时间内表达清楚   |

| 辅导       | 快速确定辅导目标，指定计划，理清核心   | 目标不明确，随机性较强，被辅导者难于理解 |





但也非绝对，有些人表达不清楚，但是能够解决问题!万事万物都存在矛盾之中，我觉得这里面有存在着顿悟的可能性，

某一时刻你突然学会了、理解了、懂得了.



运思于结构当中，网中提物（在由纲领组合的知识网中迅速把握物理场景）



目的: 思考清晰，表达有力



产品---》方案--》商业价值



一句话总结:

 在所有员工掌握结构思考力技能的同时(C)，通过组织文化的建立，让全员(A)都达成统一的思考和表达标准(B)，大大提高(D)了工作效率



结构思考是人类思维领域的基本规律，内化为思考、外化为表达，所以通过结构思考力的训练可以让我们做到思考清晰、表达有力。



1. 自我介绍

2. 产品推介

3. 项目方案呈现

4. 工作成果汇报

5. 工作建议汇报

6. 竞聘演说

7. 年终总结

8. 年初规划

9. 大会演讲

10. 培训分享

    

    30s可以有一个演讲，90s也可以，1h也可以，内容确不尽相同，但是大的目标类似。



    你现在要学习的时核心理念。

*** 构建思考结构的五个步骤: 

1. 明确理念打基础, (a. 结构思考力四个基本特点  b.结构化接收信息的三个步骤)

2. 画龙点睛(运思), 基于目标定主题（a.制定目标，b.设定主题，c.设计序言）

3. 画地成图(运思)，纵向结构分层次(a.自上而下 b.自下而上 c.由表及里 d.由内至外)

4. 运筹画策(构思)，横向结构选顺序(a.演绎结构 b.归纳结构)

5. 画栋雕梁(演示),形象表达做演示，卖点包装



**** 结构思考力强调的是先总后分(总分思想).结论先行正是"先总后分"的体

1. 先框架后细节

2. 先总结后具体

3. 先重要后次要

4. 先结论后原因



结构思考力的核心理念，包含四个基本特点和结构化接收信息(3个步骤)



**** 结构思考力的四个基本特点： 



1. 结论先行(结果先给出)(ppt的标题就是结论)

2. 以上统下(大题先做 易得分先做)

3. 归纳分组(画地成图，纵向结构分层次，合并同类项)（归纳为3点再说出来！！！三点论 三段论）

4. 逻辑递进(横向结构focus拓展)(小题慢慢做)

   



**** 结构化接收信息

1. 识别信息中的事实（描述类）、理由及结论(必须得重新看一下prolog了 包括我好久没用了都不知道她的语法了)

2. 提出对应关系，并画结构图(结论==理由s) 

3. 一句话概括所有内容

   

   观点，通常有`我觉得` `或许` `如果` `可能引发`，`第一、第二、第三`,`调研显示`,`有以下材料支撑`,`鉴于`

   结论，通常有`因此`,`由此可见`,`证明、表明，问题的实质是，告诉我们，所以，显示出，我要说的重点是`等

   

   剥洋葱法找原因：

1. 为什么地面上会有一摊油污呢？是因为机器漏油了。

2. 为什么机器漏油了呢？是因为胶垫老化了。

3. 为什么胶垫提前老化了呢？是因为这批胶垫质量不好。

4. 为什么质量不好呢？是因为采购的价格便宜。

5. 为什么采购价格低呢？是因为采购部的采购方案发生了变化



1. 为什么“基因改造也不靠谱，免疫脱敏最可能奏效”？因为第一基因改造不靠谱，第二免疫脱敏最可能奏效。

2. 为什么第一基因改造不靠谱？因为找出其中可能的抗原并不容易；千女神无疑会有性命之虞。

3. 为什么免疫脱敏最可能奏效？因为它是最有效而副作用最小的方法；看起来，脱敏疗法还是有可能成功的。

   再摆上一些数据即可



原来以下四点可用于接收信息(结构化接受信息是指：接收信息时应遵循什么样原则以帮助我们听清楚):

在。。。基础上，我分3个方面来分析这个问题，首先，其次，再次，由此我们发现。

归纳来说，这件事情还是值得做的，这里我讲三点理由。第一，



所以当你在做归纳的时候，首先问自己，结论是什么？ 然后问自己，支撑结论的三个依据是什么？怎么找到这些依据

逐个做出来即可！

在。。的基础上。。[序言:阿佳都懂得]，从。。，。。，。。等N个方面【一级目录】，说明了有效性[结论]。。

ABCD: 在什么条件下(Condition),完成某个人物，Actor受众表现什么行为(Behavior),达到什么样的标准或水平



wishful thinking

1. 设想问题（为什么会这样? 怎样才能这样？ 为什么你这样说? ）

2. 解决问题



   2W1H(习惯这种思维模式 反复训练)

是什么?为什么？怎么做?

毛：发现问题，分析问题，解决问题



1. 客观帮女孩子分析她适合嫁给什么样的人。。有车、有钱、有房

2. 分析得到她的认同，因为这不是你拍脑袋想出来的，而是基于她的需求分析得出的

3. 说出你就是这样的人，符合条件1、2、3

4. 得出结论 ，嫁给我吧

   

随着。。.....业绩开始下滑(现象)===》人员能力有待提升(原因)-->抓紧内部课程开发与培训(解决方案)-->最好的解决方案？



4P: 价格(price),产品(Product),渠道(Place),促销(promotin)

以4P为指导全面推进行动: 价格细分好,产品融合好,渠道协同好,促销多元化(包装好)



有了结论，你说的话才具备灵魂，才有了你的存在



为了更好地稳增长、调结构、促改革、惠民生，我们应该继续实施积极的财政政策（分以下几个方面）



结论，分为认识到了什么规律，以及认识了之后指导我们该做什么和不该做什么。另外也可能说认识到了这个规律，减少或增加什么部分。



新闻标题写的是什么？为什么？哪些是事实？哪些是观点？可否一句话说明白。又有哪些是你可以在序言中写到的？【Collect工作-->然后归类合并同类项---》最后得精炼】



思考问题的步骤(万变不离其法)：



1. 确定主题(主题 ：通过你的目标而定)

2. 基于主题进行发散,尽可能多的联想、进行头脑风暴

3. 把想过的东西聚合浓缩为一个有用的过程！



复制以上智慧用于你平时遇到的现象和问题、工作汇报、项目决策等



交通123:1看2慢3通过

身手钥钱：身份证、手机、钥匙、钱包



**** 自然学习设计循环圈理论



1. What: 专家权威是如何看待这一知识的(形成概念)--概念第四象限

2. How:  我在生活中如何运用这一知识(解决问题)---行动第三象限

3. If:   我如何依据新的情况调整所学知识(灵活转变)---体验第二象限

4. Why:  这一只是对我来说有价值的(发现价值)---反思第一象限

   

   把知识转变到坐标系当中，转变到画中，抓变到表中。

   Hi2W  W2HI



**** 概念理论

  概念原级 

  概念分层

  概念递进

  概念运用

  概念反思

* 20180621.org
1. 行驶本(行驶本上的车牌号码编号）

2. 车辆正面照

*** 人：

1. 办理人驾照(可以代办，按照代办人信息来上传) 办理人的驾驶证号

2. 办理人手持身份证照片(胸前照)

* 20180622.org
** 11:44 自律之自治和他治

社会的浮躁心理加剧，总是会让人考虑到如何管理好自己的问题，于是就会想到自律。

而自律其实可以按照两个部分来说：自治和他治。 谈到治，也就是说是不是出现了问题

或者



我们总是想一些办法来治理自己或者治理别人。而我这边也有我的方法。GTD，

* 20180623.org
** 12:01 认真的做点小事情                                             :学术:

有些人一辈子都看不懂认真二字，细微处出真章



把小事做细，也是一种能耐



1.  数字(区分数字和文字)

2. 感觉(区分生物和非生物)

3. 空间(时间感)

4. 语言(工具)

5. 记忆(存储)

6. 归纳(逻辑处理)

7. 表述(前端处理)

   

   

   人脑有10000亿个细胞，每一个细胞就像一棵树那么复杂(观点)

   而人的每一只眼睛都有13000万个光接收器，结构之精密难以想象

   

   人的大脑有7个智力é中心



1. 语言智力

2. 音乐智力

3. 数学智力

4. 视觉智力

5. 运动智力

6. 人际智力(情感智力)

7. 内省智力

   

   

如果力不及所负，才不及所任，必然祸及几身，导致混乱（自知之明很重要)



让你的观点少了 大概、或许、可能等不确定词语，

比如，在一次涉外晚宴上，周恩来问：今晚准备了什么海鲜" 

   工作人员回答："大概是三鲜馅"

   周恩来回来:"什么叫做大概？ 就是是，还好不是？客人中如果有人对海鲜过敏，出了问题谁负责？

  周恩来身上的确体现着一丝不苟，认真的态度，也是一种担当和负责的精神。

  {{{

       "任何大事都是从注意小事入手"

  }}}

   

   

海不择细流，故能成其大；

山不择细壤，故能成其高。



一定得学习周总理注重细节的作风。细节的变化，更能体现观念上的更新和进步。(不一定是你只有当了什么职位

才能做大事，其他小事都不需要关心的，反而会官越大，却得做得越细)



在你结婚额时候，需要做好哪些细节？



1. 让客人觉得舒服

2. 让客人觉得幸福

3. 让客人觉得重要(不需要过于铺张，但又得让人看出来你对细节的关心)

4. 让客人觉得

5. 多替客人想问题？ 他们会遇到哪些问题？



荣事达三大纪律，八项注意



三大纪律

1. 不与用户顶撞

2. 不受用户吃请

3. 不收用户礼品



八项注意

1. 遵守约定，准时上门

2. 携带歉意信，登门致歉

3. 套上进门鞋，进门服务

4. 铺开红地毯，开始维修

5. 修后擦拭机器，保持整洁干净

6. 当面进行试用，检查维修效果

7. 讲解故障原因，介绍使用知识

8. 服务态度热情，举止文明



对于敬业者来说，简单不等于容易，凡事无小事。



花大力气做好小事，把小事做细。



战略上举重若轻，战术上举轻若重。



两个要求：

1. 接到收的事情必须按时、按标准完成，不能完成做任何解释，都没用

2. 已做完的事情，自己检查完全，没有错误之后在进行上报，不要等着客户或者其他人检查出来。



时间和标准必须你得认识清楚。



沉下心来，去研究市场、研究产品、研究客户



15年年说的好大喜功，贪大求洋，现在依然有，假冒伪劣，浮躁浮夸



不论做人做事做管理，都应当踏踏实实。从实际出发，从大事着手，小事做起，拒绝浮躁："做事不贪大，做人不计小"



使人疲惫的不是远方的高山，而是不合脚的鞋子。





细节不是自发产生，也不会自发消亡。战略的本质是抉择、权衡和各适其位(Mickel Bote). 细节也是存在于平衡，正如经济、旋涡一样，都是出于彼此的守恒当中，从哪里来，又到哪里去





中国不缺少雄韬伟略的战略家，缺少的是精益求精的执行者；

    不缺少各类规章、管理制度，缺少的是对规章制度不折不扣的执行。

    

    好的战略只有落实到具体的细节中去，才能做到迈克尔波特说的各适其位

    

    

    认真做事只是把事情做对

    用心做事才能把事情做好

    

    

    肯德基特色：优美、简洁的环境  热情、周到的服务

    CHAMPS

   C: Cleanlinesa 保持美观整洁的餐厅

   H: Hospitality 提供真诚友善的接待

   A: Accurary 确保准确无误的供应

   M: Maintenance 维持优良的设备

   P: Product quality 坚持高质优良稳定的产品

   S: Speed 注重迅捷服务

   

   对产品流程的精细化管理，十分有必要

   

   

   荣华鸡姜伟思过说：“”法规的制定仅仅是第一步，其后必须增加两方面内容，即法规实施细则，好实施检查细则

，形成标准化是关键。也就是PDCA（Plan, Do， Check,Act)



Plan: 计划阶段，需要做什么？哪些问题存在？ 哪些问题需要改进？逐项列出，找出最主要的问题

Do : 执行阶段，收集相应的数据

CHeck: 检查阶段，一周或者一个月，看执行的效率，问题被解决的进度。 对改进的效果进行评价，用数据说话，

看具体解决和原定目标是否一致

Act: 如果改进效果好，则进行推广；如果改进不好，则进行下一轮迭代。



丰田工人工作原则：

1. 清扫

2. 分类

3. 刷选

4. 整洁





丰田汽车社长认为：其公司最为艰巨的工作不是汽车的研发和技术创新，而是生产流程中一根绳索的摆放，要

不高不矮，不偏不歪，而且要确保每位技术工人在操作这根绳索是都要无任何偏差（婚礼上的布置，科研细节的处理

不外如是 不求铺张，但求在)





耐心、务实、精细处理大米，是王永庆致富的关键





石田的解释：(不做不知道细节)



第一杯茶：大碗温茶，用来解渴

第二杯茶：中碗热茶，捎带品茗之意

第三杯茶：小倍烫茶，品茗之意





细节进行标准化，就是一个人的涵养和态度。（凡是精细的管理，都是标准化的管理，一定要

经过严格的程序化的管理，科学管理就是力图使每一个细节管理关节都数据化） 麦当劳烤牛肉饼20min得卖掉

卖不掉就扔掉（这就是标准，过了20min不新鲜，虽然浪费，但是不能个用户食用，有些东西卖出去之后，

挣回来的如果是用户的恶心的话，干脆别挣这种钱)



诚信、负责任，杜绝浪费。



不管你的建筑设计如何恢弘大气，如果对细节把握不到位，就不能称其为好作品（细节是什么？ 细微处的美感，人的舒适感）



每个座位的摆放方向，大小，倾斜度，螺丝钉的位置， 影响效果！酒杯端起来的舒适感。视觉感受怎么样？

石头的摆放方向



匠心独运，匠心独在运字上



游戏细节。程序细节。生活细节。

* 20180705.org
** 15:06  awk的fluent文件重命名 

1. 第一步:备份



确认是$4还是$5



``` awk

ls sphere*.cas|awk -F"-" 'BEGIN{i=1}{print substr($4,0,length($4)-8),",",i; i=i+1}' > filename0.csv



ls sphere*.cas|awk -F"-" 'BEGIN{i=1}{print substr($5,0,length($5)-8),",",i; i=i+1}' > filename0.csv



```







* 20180706.org
** 15:35 功率系数

| 物理量          |    数值      | 单位    |

|-----------------+------------+-------|

| kinety visocity | 1.49*10^-5 | m^2/s |

| Velocity        |          7 | m/s   |

| Omega           |       71.9 | rpm   |

| densigy         |      1.185 | kg/m3 |

| Turbine Radisu  |     5.0289 |       |



*** 三个描述风力机工况的物理量

1. 雷诺数

   Re=Velocity*Length/(kinety viscosify)

    雷诺数，也叫作特征雷诺数特征速度选取边界层外边界对应点的速度

   也就是风力机展向雷诺数是不断变化的,对应的特征长度也是应该变化的，

   比如当地的半径，这样才可以区分展向的雷诺数的区别



2. 尖速比

   lambda=(omega*R)/Velocity*cos(yawAngle)

3. 功率系数

    Cpo=(Omega*Torque)/(0.5*density*Velocity^3*pi*R^2)

4. 斯特劳哈尔书

    一般Re>1000  斯特劳哈尔数Sr=0.21





    旋涡脱落频率f=Sr*V/d(特征直径)



| YawAngle |         Cpo |      lambda |         Re |  Cp(0)*Cos3 |

|----------+-------------+-------------+------------+-------------|

|        0 |  0.36393047 | 5.409192792 | 2362570.47 |  0.36393047 |

|        5 | 0.360205711 | 5.388609181 | 2362570.47 | 0.359791664 |

|       10 | 0.350667889 | 5.327015002 | 2362570.47 |  0.34759442 |

|       15 | 0.334416055 | 5.224879024 | 2362570.47 | 0.327981807 |

|       20 | 0.309825924 | 5.082978562 | 2362570.47 | 0.301978394 |

|       25 | 0.285878383 | 4.902393566 | 2362570.47 | 0.270922801 |

|       30 | 0.255544954 | 4.684498396 | 2362570.47 | 0.236379778 |

|       45 | 0.149933042 | 3.824876955 | 2362570.47 | 0.128668857 |

|       60 |  0.04663644 |  2.70459648 | 2362570.47 | 0.045491313 |

* 20180709.org
** 20:38  学习planet                                             :emacslisp:

software engineering book

https://www.reddit.com/r/emacs/comments/8wx52n/if_you_have_a_software_engineering_notebook_this/



Ace-link for org-mode text

https://github.com/abo-abo/ace-link

* 20180710.org
** 20:51 使用ruby-graphviz

https://github.com/glejeune/Ruby-Graphviz

ruby extend the talent of graphviz

* 20180805
* journal-dailies-end.org
* journal-dailies.org
* journal-mon.org
* journal-XYZ.org
* journal.org


;; In the emacs-lisp , you don't need to set the orgconf, to load the language for running source code



 #+BEGIN_SRC emacs-lisp

   (+ 1 2 3 4)

 #+END_SRC



 #+RESULTS:

 : 10







;you need to set the language for running the python source code 



 #+BEGIN_SRC python

   a=1+1

   print a

 #+END_SRC



 #+RESULTS:

 : None







;; you need to set the language for running the perl source code

 #+BEGIN_SRC perl

   my $hello="df";

   print "$hello \n perl \n";

   print "5\n";

 #+END_SRC



 #+RESULTS:

 : 1





;; You need to set the language for running the c++ source code

 #+BEGIN_SRC C++

     int a=1;

     int b=1;

     printf("%d\n", a+b);

 #+END_SRC



 #+RESULTS:



 #+BEGIN_SRC dot :file a.png

       digraph colla_schema {  

           UserA -> UserB[label = "Liked", color = green];  

           UserB -> UserA[label = "Liked_By", color = red];  

       }  

 #+END_SRC



 #+RESULTS:

 [[file:a.png]]







[[file:20171009]]  multi-axis paper reading

* 2018

** 2018-05 五月

*** 2018-05-09 星期三

****  [#B] 

:LOGBOOK:

CLOCK: [2018-05-09 周三 11:52]--[2018-05-09 周三 11:52] =>  0:00

:END:

输入于： [2018-05-09 周三 11:52]

 



 [[file:~/.emacs.d/README.md::c-x%20r%20b%20:%20%E8%B7%B3%E8%BD%AC]]

** 2018-08 八月

*** 2018-08-12 星期日

****  2018 8月四日游[#B] 

:LOGBOOK:

CLOCK: [2018-08-12 周日 20:58]--[2018-08-12 周日 22:49] =>  1:51

:END:

输入于： [2018-08-12 周日 20:58]

 

带人旅游是一趟累人的工作，但不能过多抱怨，而应该想想在这个旅程中你收获的东西。



比如

1. 开车可以首先看后视镜，确保是否可以转弯！北京的街道很多没有标明掉头，但是导航

有提醒掉头，其实是可以掉头的！ 

2. 回龙观靠近龙泽有一个可以掉头的地方，但是存在盲点

3. 在大城市开车，特别是闹市区，开车是不是可以选择定位停车场，比如圆明园停车场、颐和园停车场

4. 去景区一定得定位某某经典大门，比如清华西门，石油大学北门(东门现在成为领导出入场所大门),华北电力大学北门，北大西门

5. 做事情 一定得细致，查询地址最好得精确！ 同仁堂在哪里？ 建安堂药店在北门也有（天下大事必作于细）

6. 思考后再行动，每一个动作都有一定的目的性！让你的行动充满条理性，具有说服性，而不是强迫怎么做！

7. 要让别人信服你，你得首先比别人多点知识、见识、认识(三识),每个人的潜意识里面都是相信自己的判断，除非他们觉察到你很靠谱后

才会改变观点，相信你

8. 不要过多让你的人生充满巧合，而应该更多充满着设计？虽然功利，但是具有目标和确定性！然而人生总是充满着不确定性(设计性不一定意味着不好)

9. 要考虑好景区门口是否开放，是否需要提前预定？是否下雨等！路线该怎么走等等



以上所说得基于4天来一直奔走在景区之间的路程中(路中所见所感)





清华、北大吸引了全国各地的天之骄子，难道你自认为会比别人输一节？ 气节不能输，人们自我的判断是不能输，但是其实是输的，所以

我们该让自己每天都处于学习，博士最大的品质就是不断地学习，持之以恒的学习！



看到了太多的形色匆匆，偶尔得到片刻的宁静，思考着未来的道路！

圆明园的确是一个清修之地！



人因为不确定，而会有迟缓的心理！



珍惜你的现在，让你的未来多点确定性，比如写文章，做实验，结婚等



让你的脑回路动起来、转起来，而不是拘泥在一隅之地，多思考过程，在过程中顿悟！（就好像此时你不断的在转眼睛一样）



思考清楚的话，你总能把事情做好！（也许很多人反应比你快，但是一定得记住最好的品质一定是反复学习、反复锻炼）



反复克服自己的缺点，查缺补漏，让自己变得更好！要学会去对比，对比才能让你的视野变大变广（因为对比，所以成就其大、其广、其高）

对比并不是错，错的是对比之后的虐心心态，心态平和、继续努力！









 [[file:~/.emacs.d/GTD/orgBoss/writing.org::*suggest,%20input,%20filter,%20target(SIFT)][suggest, input, filter, target(SIFT)]]

* OneJournal.org
* summaryMonth.pl
#

#      OPTIONS: ---

# REQUIREMENTS: ---

#         BUGS: ---

#        NOTES: ---

#       AUTHOR: YOUR NAME (), 

# ORGANIZATION: 

#      VERSION: 1.0

#      CREATED: 2018/2/21 0:10:18

#     REVISION: ---

#===============================================================================



use strict;

use warnings;

use utf8;



#print "$_\n" foreach <"2017*">;  00 express  -

my	$CollectFile_file_name = '2017100011';# output file name







open  my $CollectFile, '>', $CollectFile_file_name

    or die  "$0 : failed to open  output file '$CollectFile_file_name' : $!\n";



foreach my $file ( <"20171[01]*"> ) {



    print $CollectFile "## $file -----------------------------------\n";



    

    my	$IntoFile_file_name = $file;#  input file name



    open  my $IntoFile, '<', $IntoFile_file_name

        or die  "$0 : failed to open  input file '$IntoFile_file_name' : $!\n";







    while ( <$IntoFile> ) {

        print $CollectFile "$_";

    }

    ##    print $CollectFile <$IntoFile>;

    # # while ( <$file> ) {

    #     print "$_\n";

    # }

    close  $IntoFile

        or warn "$0 : failed to close input file '$IntoFile_file_name' : $!\n";





}

close  $CollectFile

    or warn "$0 : failed to close output file '$CollectFile_file_name' : $!\n";





* testCollect.pl
#

#      OPTIONS: ---

# REQUIREMENTS: ---

#         BUGS: ---

#        NOTES: ---

#       AUTHOR: Ye Zhao Liang (YZL), yezhaoliang@ncepu.edu.cn

# ORGANIZATION: NCEPU

#      VERSION: 1.0

#      CREATED: 2018/8/28 17:07:32

#     REVISION: ---

#===============================================================================



use strict;

use warnings;

use utf8;







my	$journalOne_file_name = '../OneJournal.org';		# output file name



open  my $journalOne, '>', $journalOne_file_name

    or die  "$0 : failed to open  output file '$journalOne_file_name' : $!\n";



#while ( glob("*") ) {

while ( <*> ) {



    my	$journalF_file_name = "$_";# input file name



    print "$_\n";

    open  my $journalF, '<', $journalF_file_name

        or die  "$0 : failed to open  input file '$journalF_file_name' : $!\n";



    print $journalOne "* $_\n";

    my  $lineNumber=1;

    while ( <$journalF> ) {

        if($lineNumber >8)

        {

            print $journalOne "$_\n";

        }

        $lineNumber=$lineNumber+1;

    }

    close  $journalF

        or warn "$0 : failed to close input file '$journalF_file_name' : $!\n";



}



close  $journalOne

    or warn "$0 : failed to close output file '$journalOne_file_name' : $!\n";





