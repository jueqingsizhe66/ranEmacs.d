星期日, 2018/3/4


* keep work with jounal (Good for you)
[[https://github.com/howardabrams/dot-files/blob/b2e8a36832d4b9964042aca839f3ff0a3e6724a7/emacs-org.org]]

[[https://github.com/jueqingsizhe66/ranEmacs.d]]

** 13:05  一轮设计模式                                                :java:


#+BEGIN_SRC java
  1. 多态的理解
  父类可以指向子类的对象，并在调用方法时会使用子类的实现(即此时只有父类的定义方法，子类新的定义方法无法被继承，除非使用子类对象指向子类,也就是为什么一般使用this表示当前的子类对象，当前实现的对象)
    


  2. 开闭原则
  对修改关闭，对扩展开放

  修改指的是父类修改或者继承父类的其他哥哥、姐姐类不需要进行修改， 而要想拓展只修改当前的子类即可

  其实本身也是跟模板方法类似，把不变的地方刻成一个磨具，而让变化的地方设计成一个窟窿，等将来需要的时候进行填写，包括Idea编辑器的Live template,Emacs 的snippet,
  vim的snippet等，都是类似思路。(这边的窟窿一般是指abstract或者interface，即抽象编程和面向接口开发)
    
  一个比较有意思的窟窿设计是
  public void sayHi(){
      return new unsupportedMethodException();
  }

  如果子类不重写，则直接抛出异常，只有子类重写了，覆盖掉父类方法，才不会抛出异常(并未用到abstract和interface构建窟窿)

  3. 比如 状态模式
  当一个界面中状态改变(游戏，解释器，编译器，人(吃饭、睡觉、学习、写作、运动、游戏),设备(运行、暂停、停止、故障),订单(支付、退款、确认、待支付)，其他也对应改变，可能需要设计很多if-else, 不利于拓展(需要例子) 
    
  4. 比如 策略模式(干一件事情有多个类似算法, 新增一个算法不需要影响其他于是就需要使用一个普通的抽象方法来打窟窿) 
  当一个数据需要使用多个算法进行加密，当一种排序需要使用多种方法进行排序，也就是当干一件事情可以用多种方法来完成(也就是我能干什么的问题)

    
  5. 迭代器模式(还有？类似于责任链，只不过这个是名词，责任链是动词)，套路是有没有下一条数据(hasnext),如果有则取出来(next)，没有则停止, 狭义上来说是指实现了Iterable接口的类，基本上所有的集合类都有实现，对应具备hasNext和next方法

  6. 观察者模式(监听，分割行为，更改过程职责，比如交给专业运营方去处理，云平台等)：广义来说是指发生某件事情后执行某件代码，为了解决多个动作之间的冗余问题，比如注册和订单生成，都会有发送邮件的操作，但是发送邮件会有一段很长的时间
  设置卡死，所以需要把两个过程分开，把发送邮件放到任务队列中，不要影响用户体验。观察者模式为监听而生(把费时间的业务逻辑让专业人士去做，当某一事情发生时候，要干什么),比如日志系统，当新的业务产生时候，产生业务日志，当异常发生时，产生异常日志(类似于vimwiki, gitgutter等，都会监听文件状态是否改变，在java中还有一个叫做
  FileAlteration类，专门监测文件夹类内容是否发生该变)
                     

  7. 责任链模式 一个请求可以被多个对象同时访问，但请求只是瞎问，他并不知道被请求者是否具备这种能力(比如画画、唱歌、写作、演小品等，统一定义为一种accept方法)
  便利所有的被请求对象，直到找到一个为止(可能不止一个会，也有可能刚好那个解析得不太好)

  一般是类似访问者模式使用accept来定义窟窿)
    
  Array.sort(arr,new Comparator...) 策略模式？？


  策略模式的拓展，一般是最后一个参数为函数或者对象(面向函数、面向对象)

  责任链： 会干吗?.会干嘛?.会干嘛？.会干嘛?....... 不断问一下，直到会为止
    

  牢记，多态两句话，开闭原则(不修改[父类和其他子类]，可拓展),DRY(当重复时候，记得封装给父类，之类只负责修改变化部分,可创建一个新抽象方法)
#+END_SRC


** 15:49 责任链模式的小游戏                                           :java:


#+BEGIN_SRC java
  题目：FizzBuzzWhizz
  你是一名体育老师，在某次课距离下课还有五分钟时，你决定搞一个游戏。此时有100名学生在上课。游戏的规则是：
          1. 你首先说出三个不同的特殊数，要求必须是个位数，比如3、5、7。
          2. 让所有学生拍成一队，然后按顺序报数。
          3. 学生报数时，如果所报数字是第一个特殊数（3）的倍数，那么不能说该数字，而要说Fizz；如果所报数字是第二个特殊数（5）的倍数，那么要说Buzz；如果所报数字是第三个特殊数（7）的倍数，那么要说Whizz。
          4. 学生报数时，如果所报数字同时是两个特殊数的倍数情况下，也要特殊处理，比如第一个特殊数和第二个特殊数的倍数，那么不能说该数字，而是要说FizzBuzz, 以此类推。如果同时是三个特殊数的倍数，那么要说FizzBuzzWhizz。
  学生报数时，如果所报数字包含了第一个特殊数，那么也不能说该数字，而是要说相应的单词，比如本例中第一个特殊数是3，那么要报13的同学应该说Fizz。如果数字中包含了第一个特殊数，那么忽略规则3和规则4，比如要报35的同学只报Fizz，不报BuzzWhizz。
#+END_SRC

