* Site
www.orgmode.org/manual/index.html
http://orgmode.org/orgcard.txt
https://www.reddit.com/r/emacs/

the best emacs website?
http://wenshanren.org/?p=386
https://www.slideshare.net/
https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
http://sachachua.com/
https://github.com/sachac/emacs-notes

good place to learn emacs
https://github.com/rejeep/f.el

modern ApI for emacs working with file and directories
https://github.com/sachac/baby-steps-org-todo/blob/master/index.org

Look it again one project(related many tasks),maybe one task related many todos. Many todos are too much,so don’t worry ,make the Most important taks(MIP) (If you don’t feel working on it, just
http://planet.emacsen.org/

good place for emacsman
http://lists.gnu.org/archive/html/emacs-orgmode/2010-03/msg00367.html

Good for idle time for everything else
http://sachachua.com/blog/sketched-books/
http://orgmode.org/worg/org-hacks.html :@NCEPU:不紧急重要:

org-hacks
http://www.trollope.org/scheme.html

scheme loves kids, and we all kids
http://www.lisperati.com/tellstuff/index.html

computer scientist like it , like the website
http://www.defmacro.org/

how to macro it? market model
http://www.jianshu.com/p/ce9c5a312174

http://www.lisperati.com/clojure-spels/casting.html casting spels in lisp
https://en.wikipedia.org/wiki/Laminar-turbulent_transition

边界层转捩
http://en.wikipedia.org/wiki/Flow_separation

Flow separation
https://github.com/LightTable/LightTable

the-next code generation editor
https://www.clojure-toolbox.com/

clojure Toolbox
https://github.com/trending?l=clojure

clojure github 项目排名
http://wiki.fnil.net/

庄周梦蝶 lendcloud http://blog.fnil.net/blog/archives/
https://github.com/functional-koans/clojure-koans

A set of exercises for learning Clojure The Clojure Koans are a fun way to get started with Clojure - no experience assumed or required. Follow the instructions below to start making tests pass!
https://github.com/trending/python

python的小型项目 http://wenshanren.org/?p=924 如果重新学编程，我会怎么做
https://www.emacswiki.org/emacs/PrettySymbol

pretty symbol
https://github.com/abo-abo

abo-abo大神
https://www.wired.com/2015/02/on-the-joy-of-mastery

design something to be hard to use
https://github.com/clojure/core.logic

core-logic
https://github.com/howardabrams/dot-files/blob/master/emacs-fixes.org#next-and-previous-file

split strings with number
http://archive.3zso.com/archives/plantuml-quickstart.html

emacs org-mode plantuml
https://github.com/emacs-china/hello-emacs

hello emacs
https://github.com/howardabrams/demo-it

demo-it for presentations https://emacs.stackexchange.com/questions/32795/org-presentation-using-transitions-revealing-items
https://potentpages.com/web-design/reveal-js/tutorials

reveal-js ppt presentation
https://github.com/Malabarba/lazy-map-clojure

lazy map : new data structure for clojure
http://orgmode.org/worg/org-color-themes.html

tour all the color themes
https://github.com/jonnay/org-beautify-theme/issues/1

M-x load-theme M-x desrcibe-theme
https://gist.github.com/holtzermann17/6953779/revisions

github gist
https://gist.github.com/discover

All gist
https://en.wikibooks.org/wiki/LaTeX

latex入门到精通
https://www.zhihu.com/people/noinil/answers?page=2

https://github.com/noinil/prelude chen tao
http://pragmaticemacs.com/emacs/dynamically-filter-directory-listing-with-dired-narrow/#

good website for learning emacs
http://www.woola.net/tag/redirect/lisp

大雄–lisp（不错的tornado博客）
http://www.nsfc.gov.cn/

自然科学基金委，了解idea的产生
http://z.caudate.me/on-whose-authority/

Chris Zheng
http://www.lispcast.com/cognitect-clojure

3 Things Java Programmers can steal from clojure The 100 Most Used Clojure Expressions
https://www.baidu.com/s?wd=4-20ma%E8%A1%A8%E5%A4%B4&rsv_spt=1&rsv_iqid=0xf4212a0100032585&issp=1&f=8&rsv_bp=0&rsv_idx=2&ie=utf-8&tn=baiduhome_pg&rsv_enter=1&rsv_sug3=16&rsv_sug1=9&rsv_sug7=100&rsv_t=1aa9w3wsifO0%2BaD%2F1FEkrqtbJiox7Jx7ylPF%2Fb49Yb9U1sfQ8ZjEbbcOxwghSng1D9AP&rsv_sug2=0&inputT=6360&rsv_sug4=6360

4-20ma表头 接地，为了实现各种电气设备的零电位点与大地作良性电气连接，由金属接地体引至各种电气设备零电位部位的一切装置的总称。 可靠接地，应该值得是接地系统的可靠性吧， 为减小接地电阻尽量采取利用自然接地体，多点接地，网状接地等。
https://github.com/CarpenterLee/JCFInternals

State “TODO” from [2017-10-14 周六 14:26] 深入理解java collections

https://github.com/dfeich/org-babel-examples

org-babel example for many languages
https://github.com/redguardtoo/emacs.d

陈斌 chen bin
https://github.com/judasn/IntelliJ-IDEA-Tutorial

IDEA简体中文教程 http://wiki.jikexueyuan.com/project/intellij-idea-tutorial/
https://clojuredocs.org/

clojure documents
joyofclojure.com

the joy of clojure
http://clojure-api-cn.readthedocs.io/en/latest/

clojure手册
https://github.com/huangz1990/clojure_api_cn/blob/master/clojure.repl/dir-fn.rst

clojure_api_cn
http://www.cnblogs.com/fxjwind/archive/2013/01/22/2871860.html

doc and find-doc, 帮助文档

The doc, look up the documentation associated with any other function or macro.

user=> (doc +)

clojure.core/+ ([] [x] [x y] [x y & more]) Returns the sum of nums. (+) returns 0.

The find-doc function accepts a string, which can be a regex pattern. It then finds the documentation for all functions or macros whose names or associated documentation match the supplied pattern.

user> (find-doc “lazy”)

clojure.core/concat ([] [x] [x y] [x y & zs]) Returns a lazy seq representing the concatenation of…

clojure.core/cycle ([coll]) Returns a lazy (infinite!) sequence of repetitions of… … more results
http://blog.csdn.net/ithomer/article/details/78170870

技术博客，坚持始终
http://blog.csdn.net/ithomer/article/details/78170870

写博客创作，输出知识和思想，才是读书的最高境界！朋友，你的回答看似文不对题， 另辟蹊径，但实质你已达到了读书的最高境界， 看书是书，看书不是书，看书还是书，写着你自己的书，细思极恐啊，世外高人

老僧三十年前，未参禅时，见山是山，见水是水。

乃至后来，亲见知识（佛家称明师曰善知识），有个入处，见山不是山，见水不是水。

而今得个休歇处，见山只是山，见水只是水。

大众！者三般见解，是同是别，有人缁素（代表黑白分明）得出，许汝亲见老僧

https://www.zhihu.com/question/20146527
https://www.thewindpower.net/statistics_en.php

全球风电统计
http://www.mei.net.cn/dgdq/201710/751674.html

球风能理事会秘书长Steve Sawyer：中国是全球风电最主要的增长极（附图）
https://www.bp.com/zh_cn/china.html

BP全球中国统计年鉴
https://wenku.baidu.com/view/a9533b120b4e767f5acfce27.html

simpack交通大学
http://www.simpack.com/videos.html?&L=0%3Fcid%3D373%3Fcid%3D654

simpack video
http://isabelle.in.tum.de/

sabelle 又发新版了，好羡慕。 我们 HOL4 社区的用户数量相比之下太少了（不过也比 HOL Light 强，都快被榨干了）
https://www.bilibili.com/video/av12818669/?from=search&seid=18118687468980995416#page=3

oeasy 教你玩rust
https://github.com/technomancy/dotfiles

very beautiful keyboard mouse 头盔
http://www.torque2018.org/

The Science of Making Torque from Wind (TORQUE 2018)
http://geek.wasai.org/member/

王掌柜的会员
http://www.howardism.org/Technical/Emacs/spreadsheet.html

lots of spreedsheet电子表格 howardism.org 其实我们停下来想想，emacs的配置对于不经常玩电脑的人来说，简直是大麻烦。但是如果你经常玩，而且喜欢配置，那么emacs就好象一个不错的点心，他的定位不是为了简单，反而是为了expert design 有兴趣可以看看https://www.wired.com/2015/02/on-the-joy-of-mastery/

我知道我们应该想着设计简单，包括你在工作中也是想着怎么给client带来更好的用户体验，一键到底。但是有时候也可以反过来想想复杂的精细化设计（长见识哈哈） https://www.wired.com/2015/02/on-the-joy-of-mastery/

看上面link来自howardism(org-mode文学编程的倡导者）的blog : http://www.howardism.org/#Yours%20in%20Emacs
https://github.com/learnbyexample/Command-line-text-processing/blob/master/gnu_awk.md

awk gnu programming (examples for awk gnu)
https://github.com/learnbyexample/scripting_course/blob/master/Perl_curated_resources.md

perl scripting resources
http://www.inoteexpress.com/aegean/

可以方便插入参考文献
https://addons.mozilla.org/en-US/firefox/addon/org-capture/

org capture
http://www.blogjava.net/killme2008/archive/2012/02/16/370144.html

clojure IO
http://clojure.github.io/java.jdbc/
https://github.com/clojure/math.combinatorics

clojure math
https://stackoverflow.com/questions/18246549/cartesian-product-in-clojure

关于clojure数学方面计算的讨论
https://github.com/nicferrier

Nic ferrier 专业lisp
http://www.fxyqpx.org/KQDLXXB/2015-02-246.htm

中国空气动力学报
http://man.chinaunix.net/newsoft/Emac/book.html

emacs window 配置
https://cemerick.com/2011/07/05/flowchart-for-choosing-the-right-clojure-type-definition-form/

flow chart to describe how to define type
http://clojure.github.io/clojure/index.html

clojure API
https://www.braveclojure.com/concurrency/

并发 clojure
http://dp.pconline.com.cn/dphoto/list_3365009.html

太平洋摄影博客
SITES
http://dp.pconline.com.cn/dphoto/list_3365009.html

very beautiful picture about flowers
https://github.com/matthiasn/Clojure-Resources

clojure resources
https://www.clojure-toolbox.com/

clojure-toolbox做的相当不错，挺适合开发者寻找插件
https://letoverlambda.com/

defun defmacro, a special book works for clojure macro transform
http://www.hzwindpower.com/

中国海装 <2017-11-05 21:10> 已经能够生产海上型风力机171m 远景现在已经能够140m塔架 131m的风轮直径 2.2MW，市面上普遍的都是E120m 左右的风轮直径。
https://www.icax.org/forum-324-1.html

SpaceClaim(Pidex简称)
https://s-haensch.github.io/visual-cheatsheet/

可视化clojure核心函数
http://www.hi-id.com/?tag=%e8%ae%a4%e7%9f%a5%e5%bf%83%e7%90%86%e5%ad%a6

不错的设计网站
https://wolfgangmehner.github.io/vim-plugins/gitsupport.html

vim - plugins very important
http://steve-yegge.blogspot.com/

stevey’s Blog Rangts 程序员的呐喊
* SITES
** 科研动力
http://www.howsci.com/sci-hub-alternative.html
** https://github.com/erstern/public_health
 
Public Health

公共卫生知识整理cite:ZhuShen-26073 
人民卫生出版社cite:叶昭良王晓东-26083 
** https://mooc.study.163.com/course/2001280005
吴恩达 机器学习
** https://github.com/ggreer/the_silver_searcher
the_silver_searcher
** https://gitee.com/hank-whu/turbo-rpc                               :java:
turbo-rpc 是一款速度超凡的异步响应式RPC框架
** http://www.cs.cornell.edu/courses/cs3110/2015fa/                 :scheme:
数据结构和函数式编程
** https://github.com/kelseyhightower/nocode
佛系application
nothing
** https://liuboyu.github.io/blockchain/
** https://gitee.com/gvp
码云最有价值项目 
** https://bcage.one/                                           :blockchain:
区域连技术指北 
** http://www.bootdo.com/blog
bootdo 不错的官网
** emacs windows download
http://alpha.gnu.org/gnu/emacs/pretest/windows/

https://emacs.stackexchange.com/questions/27202/how-do-i-install-gnutls-for-emacs-25-1-on-windows/27251#27251

@StuartHickinbottom explained what I was doing wrong: using libgnutls-28.dll 
when Emacs 25.1 requires the newer and incompatible libgnutls-30.dll.
Then it was a matter of finding binaries of libgnutls-30.dll and other required libraries.
Thankfully Phillip Lord has compiled Windows versions of all the GnuTLS libraries and dependencies and 
many other libraries you might want for Emacs! 
They are available here: get emacs-25-i686-deps.zip if you use 32-bit Windows and get emacs-25-x86_64-deps.zip 
if you use 64-bit; then unzip in the root folder of your Emacs installation (so that the bin folder of the zip
files gets decompressed into the bin folder of your Emacs installation, etc.)
** magnars github
https://github.com/magnars/.emacs.d
** emacs load vars into env
https://github.com/diasjorge/emacs-load-env-vars
** org-ref
https://github.com/jkitchin/org-ref
** Emacs Hacker AIVaro Ramirez
http://xenodium.com/#actionable-urls-in-emacs-buffers
** 大神emacs配置
 
Steve Purcell的配置	https://github.com/purcell/emacs.d
Matt Briggs的配置	https://github.com/mbriggs/.emacs.d
我的配置(抄Steve Purcell的,加中文和C++支持)	https://github.com/redguardtoo/emacs.d
** eww eosconfig
 
https://github.com/dakrone/eos/blob/master/eos-web.org
https://writequit.org/eos/eos.html
** research gate
https://www.researchgate.net/
** new energy outlook
https://about.bnef.com/new-energy-outlook/
Extended our outlook from 2040 to 2050.
Expanded our new-build algorithm to include utility-scale lithium-ion batteries – both stand-alone and paired with renewables – for energy arbitrage as well as peaking capacity.
Expanded our assessment of new air-conditioning load to include Brazil, Indonesia, India, Mexico, Malaysia, Philippines and Thailand.
Added chapters on materials demand, market design and coal phase-out scenarios.
Updated our PV and wind cost and lithium-ion battery cost curves with 2017 data.
Updated our comparative cost of energy analysis to better capture difference between technologies and 
the cost of bulk electricity and flexibility, and enhanced the digital experience when interacting with our data models.
** emacs erc chat internet
 
http://savannah.gnu.org/projects/erc
https://www.gnu.org/software/emacs/manual/html_mono/erc.html
** orgmode 4years
orgmode
https://emacs.cafe/emacs/orgmode/gtd/2017/06/30/orgmode-gtd.html

https://emacs.cafe/

ledger
https://emacs.cafe/ledger/emacs/ynab/budgeting/2018/06/12/elbank-ynab.html
** Numerical Simulation(TongChitopakdee 2015)
 
https://www.researchgate.net/publication/228648097_Numerical_Simulation_of_the_Aerodynamics_of_Horizontal_Axis_Wind_Turbines_Under_Yawed_Flow_Conditions/citations

using both B-L and S-A
** json web token for chez scheme
https://github.com/guenchi/jwt?tdsourcetag=s_pctim_aiomsg
 
https://github.com/guenchi/json/

https://emacs-china.org/

http://riemann.io/

https://github.com/nathanmarz/specter/


https://github.com/jiacai2050/clj-json
** shen languae
http://www.shenlanguage.org/?tdsourcetag=s_pctim_aiomsg
** emacs中文
https://emacs-china.org/
** phys and mit-technology review
https://www.technologyreview.com/


https://phys.org/
** ruby tutorial
 http://www.runoob.com/ruby/ruby-tutorial.html?tdsourcetag=s_pctim_aiomsg
** mastodon
 https://github.com/tootsuite/mastodon

https://ruby.social/web/getting-started
 全球微博
** emacs stackexchage
 https://emacs.stackexchange.com/
** vi/vim stack exchange
 https://vi.stackexchange.com/
** english stack exchange
 https://english.stackexchange.com/
https://ell.stackexchange.com/users/63482/%E9%99%B3-%E5%8A%9B
** emcas another email server
 https://github.com/wanderlust/wanderlust
 

https://emacs-china.org/t/topic/2552


https://github.com/LdBeth/Emacs-for-Noobs/blob/master/WanderLust.org
** Software foundations for broad introduction
 https://www.seas.upenn.edu/~cis500/current/sf/index.html?tdsourcetag=s_pctim_aiomsg

 分为四卷
1. Logical foundations  https://www.seas.upenn.edu/~cis500/current/sf/lf-current/toc.html
2. Programming language foundations  https://www.seas.upenn.edu/~cis500/current/sf/plf-current/toc.html
3. Verified Functional Algorithms
4. Quick chick
** 交换博客链接
 https://emacs-china.org/t/topic/4162/9
 

http://www.zmonster.me/

https://macplay.github.io/index-1.html


**** 写作管理:

https://github.com/Linusp/emacs_config/blob/master/emacs_config.org#%E5%86%99%E4%BD%9C%E8%AE%BE%E7%BD%AE

****  学术科研
https://lengyueyang.github.io/

****  rss

https://www.linkedinfo.co/


****  clojure

https://kevinjiang.info/

**** vimer


http://www.wklken.me/

****  bash utils

https://github.com/wklken/bash-utils
** d3 js可视化数据库
 https://github.com/d3/d3
 
鼻祖级的做大数据可视化展现
** emacs learning
 https://www.emacswiki.org/emacs/CategoryDotEmacs

 http://emacslife.com/read-lisp-tweak-emacs/beginner-2-understand-emacs-lisp.html
 

Hooks(特别好的一个词,一个进步点，有点像是callback和closure的机制)
Hooks are lists of functions that are called from Emacs Lisp in order to modify the behaviour of something. For example, different modes have their own hooks so that you can add functions that will run when that mode is initialized. You saw this example earlier in the module:


(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
add-hook的第一个hook代表监听端口(监听函数),当一触发这个函数，则执行后面的第二个参数(对应一个函数或者一个hook)

http://y.tsutsumi.io/emacs-from-scratch-part-3-extending-emacs-with-elisp.html (hooks介绍)
Emacs provides a nice hook implementation. pass in the hook name you want to listen to, and the function name you want to call.

This is equivalent to:

(add-to-list 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
It adds the turn-on-eldoc-mode function to the list of functions
when a buffer is initialized with emacs-lisp-mode.



http://sachachua.com/blog/series/read-lisp-tweak-emacs/


**  Adding more features to Emacs
Most Emacs libraries are not loaded automatically. This saves memory and keeps things simpler.
 Some of the customizations you may want to make require that other parts of Emacs are loaded first.
 For example, if you want to define a key for the c-mode-map (used for editing C code)
 or add a function to org-mode-hook (called when a buffer is set up with Org Mode), 
 those libraries need to be loaded first. You can load libraries by using require, like this:

(require 'org)
This loads the org library. require looks for a file named after the name provided to it,
 loads it, and double-checks that the library includes (provide 'feature-name-goes-here).
 It signals a Cannot open load file error if the library is not found. If the library 
exists but does not provide that symbol, you’ll get a Required feature FEATURE was not provided error instead.

Note that the symbol you give to require might not be the same as the function you call.
 For example, c-mode is actually defined in the cc-mode library, while org-mode is defined in org.
 To find out what file a function is defined in, use C-h f (describe-function) followed by the name of the function.
 The first line will tell you what file the function is defined in, if any. For example, c-mode‘s definition starts with:

c-mode is an interactive autoloaded compiled Lisp function in
`cc-mode.el'.
The first part of the filename (before the .el or .elc) is usually what you would use with require.
 If you have the source installed (the .el file), you can look for the (provide ...) expression to find the actual symbol to use.
 

 Elisp初级教程
https://www.gnu.org/software/emacs/manual/html_mono/eintr.html

https://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html

https://cjohansen.no/an-introduction-to-elisp/


http://joelmccracken.github.io/entries/emacs-lisp-for-hackers-part-1-lisp-essentials/

https://www.emacswiki.org/emacs
Elisp高级教程
https://www.gnu.org/software/emacs/manual/html_mono/elisp.html

https://www.gnu.org/software/emacs/manual/html_mono/elisp.html#Tips

宏代表着二次解析，从你的字符串提取出可运行的lisp表达式
** chez scheme库管理器
 http://ravensc.com/?tdsourcetag=s_pctim_aiomsg
** 王勇emacs-chian
 
*** github
https://github.com/manateelazycat/awesome-tab

https://github.com/manateelazycat/insert-translated-name/commit/51e409a58f5519c47e3ff4001c64a42baf672b8c

https://github.com/manateelazycat/color-rg
*** emacs-china
https://emacs-china.org/t/emacs/7098/31

https://emacs-china.org/t/awesome-tab-1-0-emacs/7053/108

https://emacs-china.org/t/topic/6313/139
