https://github.com/gregsexton/SICP-Clojure

http://mitpress.mit.edu/sites/default/files/sicp/index.html

1. 前面都在讲什么是计算（声明式与指令式的关系、过程、Y算子、形式语义）、怎么做计算（迭代、递归）、数理逻辑跟计算直接的关系（逻辑式程序设计），
2. 然后最后再用不可计算引出“停机问题”，
3. 再用halt一语双关，指出课程结束。
项目主页：https://github.com/DeathKing/Learning-SICP
信息整合：https://learningsicp.github.io
Racket FAQ：https://racket-zh.org/faq
Racket编程指南: https://blog.csdn.net/chinazhangyong/article/details/79331809
* Drracket

:PROPERTIES:
:ID:       7f09c147-afa3-4968-9c59-e9ec56c9695f
:END:
Some useful shortcuts for DrRacket.
Inspired by paredit

Implemented:

  Movement:
    ("c-Alt-f") paredit-forward-sexp
    ("c-Alt-b") paredit-backward-sexp

    ("cⓂ️d") down-sexp ;rebind to "cⓂ️d"

    ("m:right") forward-atom ;this is not paredit shortcuts, but alternative for forward-word
    ("m:left") backward-atom ;ditto

  Depth-Changing:
    ("m:s") paredit-splice-sexp
    ("m:(") paredit-wrap-round
    ("m:up") paredit-splice-sexp-killing-backward
    ("m:down") paredit-splice-sexp-killing-forward
    ("m:r") paredit-raise-sexp
    ("m:?") paredit-convolute-sexp

  Slurpage & barfage
    ("c:right" "c:)" "c:]") paredit-slurp-forward
    ("cⓂ️left" "c:(" "c:[") paredit-slurp-backward
    ("c:left" "c:}") paredit-barf-forward
    ("cⓂ️right" "c:{") paredit-barf-backward

Note:

  All the key bindings involving meta key ("m:") can also be accessed
  using the Escape key, by pressing and releasing it before proceeding
  with the remaining keys, just like in Emacs. This is equivalent to
  replacing "m:" with prepended "esc;".

  You can see the up-to-date list of all the key bindings applied on
  your platform, by selecting from DrRacket's menu Edit, Keybindings,
  Show Active Keybindings, and filtering the list with "paredit."

Install:
  raco pkg install drracket-paredit

or manually:
  1. Download the "paredit.rkt"
  2. Open the 'Edit|Keybindings|Add user-defined-keybindings' dialog, select "paredit.rkt".
* 计算机科学
:PROPERTIES:
:ID:       638585e2-c594-4f9d-8a68-bd809ab31de0
:END:

计算机科学是一门处理信息的科学，依赖于他的输入设备或者固定数值(变量)，组成计算表达式(表达式)，进行数值模型计算(函数)，并通过不同的传输方式(赋值、函数调用、返回值)，并可以
查看(分支)不同工况下的信息，从而最终获得对应工况下的新信息
** 并行计算
:PROPERTIES:
:ID:       a8e44694-9e1e-48d2-926d-29f1f39d9fd4
:END:

两个小伙伴都能计算 1+2+3+4+5+6=？

其中一个小家伙较快，一个较慢，但是可不可以更快？

也就是你在面对复杂的表达式可不可以让多个孩子同时算？

比如他算1+2+3  另外一个人算4+5+6? 后来两个人再加起来。

但是在最后的+过程会产生通信过程，并会存在一定的延迟，叫做“通信开销”.

如何根据计算单元的能力的不同和通信开销的差异，来最大化计算的效率，降低需要的时间，就成为了并行计算领域研究的内容。
** 计算图
:PROPERTIES:
:ID:       34be527a-5c79-4e90-b05f-250fe2c40fc4
:END:

计算图中由数字、箭头、圆圈构成，数字代表需要的条件，箭头代表流动方向，从这方面来说计算科学也是流动科学，确切来说叫做数字流动科学，
只不过怎么流动则是由圆圈内的流动构成。圆圈代表的计算模型，或者数字流动机制!用于解释数据的变化！也就是数据变化的内部原理

而把圆圈看成是一种计算模型，本身也是“抽象化的过程”,<2018-07-13 14:57>现在网络工程中，少不了抽象的概念，面向接口性编程，面向抽象编程，面向方法编程等

抽象给计算机科学开了一扇窗户，帮助我们进行更高层面的思考而不为细节所累。

当我们把数字和圆圈构成一个表达式时，我们还可以在此基础上继续构成一个复合表达式，进而变成复杂表达式，lisp表达式的很多效果就是这样，由
little slice构成一片大蛋糕的过程。

在计算图中没有括号，大于号等等，但是我们学到`括号内的表达式先进性计算`, 括号其实只是“符号”那层的东西，它并不存在于计算图里面。
数学的有些括号之类的符号，只是表象而已，需要展开到计算图的规则中。从某种意义上来说，计算图才是表达式的本质或者模型，而(*2 (+ 3 4))
这串字符只是对计算图的一种表示或者编码【还有很多中表示方法】，他只是符号。

也就是说，符号和模型是两层概念，符号是对模型的一种表示（或者叫做编码），我们必须从符号得到模型才能进行操作。从符号到模型的转换过程，
在计算机科学中叫做语法分析(parsing).----》对于你自己来说，认识符号之后进行转换，无非是要去掉计算图中不存在的要素，达到本质的认识。

从符号层面表达我们的模型，再对符号模型解析成本质的计算模型。

计算图也叫作AST算法树
** 计算的要素
:PROPERTIES:
:ID:       e2bc6b54-0966-4e6b-8816-86269eff8dbe
:END:

1. 基础的数值。比如整数，字符串，布尔值等
2. 变量(电线的作用，电线是有方向的，从哪里来留到哪里去，也就是计算图中的箭头)
3. 表达式。包括基本的算术表达式，嵌套的表达式
4. 赋值语句(相当于计算图中的一组流动单元 包含输入---箭头---圆圈---箭头---输出。
5. 分支(桥墩的马蹄涡分流  棱角分明的石头把涓涓细流分成两个支流，纷涌而入大海)
6. 函数(圆圈, 制作传感器)
7. 模块(大圆圈)
8. 函数调用( ，怎么从传感器中 取到值，这就是函数掉用的过程)

   这些基本要素构成你认识计算机科学的基本概念，或者基本层面的框架，得牢牢刻录在脑中。

每当学习一种新的语言或者系统，你只需要在里面找到对应的构造，而不需要从头学习。
这就是掌握所有程序语言的秘诀。这就像学开车一样，一旦你掌握了油门，刹车，换挡器，方向盘，速度表的功能和用法，
你就学会了开所有的汽车，不管它是什么型号的汽车。

同样的所有文章也是由文章结构构成，abstract,introduction,method,result,discussion,conclusion,reference,appendence等等
你得从这些结构中体味作者的研究思路，本质来说是研究思路。

但是请不要以为掌握了语言就学会了编程或者学会了计算机科学。掌握语言就像学会了各种汽车部件的工作原理。
几分钟之内，初学者就能让车子移动，转弯，停止。可是完了之后你还需要学习交通规则，你需要许许多多的实战
练习和经验，掌握各种复杂情况下的策略，才能成为一个合格的驾驶员。如果你想成为赛车手，那就还需要很多倍的努力。
** 计算的本质
:PROPERTIES:
:ID:       88a7e809-4f03-4c0d-9604-fb389d6f92c5
:END:

计算的本质是数据的流动，支撑流动的背后是数据模型或者说是数据流动机制

或者机械化信息处理。
机械化：手指算，算盘，计算器，或者计算机。这些机器里面可以有代码、无代码、电子线路、甚至生物活动或者化学反应。

计算是处理信息的过程，信息诞生于输入设备、固定数值，依赖于传输的方式(赋值、函数调用、返回值)，并可以通过查看(分支),
获得不同情况下的数值(新信息)。
* Advancede
:PROPERTIES:
:ID:       f61a7032-556f-4ec6-8bc7-03bd01ff3926
:END:

** 5 Computing with Register Machines
:PROPERTIES:
:ID:       f8fa3f73-2daf-47b7-b017-de4b30cee72c
:END:

*** 5.5 Compilation
:PROPERTIES:
:ID:       b5aaed37-39a2-4d27-ae04-04984fd83b04
:END:
**** 5.5.1  Structure of the Compiler
:PROPERTIES:
:ID:       333d026f-26f1-45f4-8305-b1577cdc5fa3
:END:
**** 5.5.2  Compiling Expressions
:PROPERTIES:
:ID:       0c0a78a6-50ca-4273-989c-330e8e607875
:END:
**** 5.5.3  Compiling Combinations
:PROPERTIES:
:ID:       36e0673e-5b91-49c3-b1d3-af245dd5e14b
:END:
**** 5.5.4  Combining Instruction Sequences
:PROPERTIES:
:ID:       c8974961-5952-4c3c-8916-3828ad99a810
:END:
**** 5.5.5  An Example of Compiled Code
:PROPERTIES:
:ID:       68e3415e-d676-4f32-bdcc-3f768916ca35
:END:
**** 5.5.6  Lexical Addressing
:PROPERTIES:
:ID:       31a71322-8d2e-4eb8-ad56-a53d7554a784
:END:
**** 5.5.7  Interfacing Compiled Code to the Evaluator
:PROPERTIES:
:ID:       357910f4-9bd6-492d-8e87-9690d02e04da
:END:


*** 5.4 The Explicit-Control Evaluator
:PROPERTIES:
:ID:       4b288830-3f89-41d4-9a3c-3f5de9247323
:END:
**** 5.4.1  The Core of the Explicit-Control Evaluator
:PROPERTIES:
:ID:       6b1ce902-1440-4352-9260-4a5a7f6f6a4d
:END:
**** 5.4.2  Sequence Evaluation and Tail Recursion
:PROPERTIES:
:ID:       3a2e8626-7841-4895-9ed6-1faf0bda6990
:END:
**** 5.4.3  Conditionals, Assignments, and Definitions
:PROPERTIES:
:ID:       5228f7e7-5989-4e5e-99a4-fa09946fc239
:END:
**** 5.4.4  Running the Evaluator
:PROPERTIES:
:ID:       9cc52ca1-f44e-4a21-ac4f-348273f41f2f
:END:


*** 5.3 Storage Allocation and Garbage Collection
:PROPERTIES:
:ID:       f6a4b84d-fa86-4c41-ba60-28750b4a829e
:END:
**** 5.3.1  Memory as Vectors
:PROPERTIES:
:ID:       9df00166-ff10-403b-814f-b5bd8df9cc34
:END:
**** 5.3.2  Maintaining the Illusion of Infinite Memory
:PROPERTIES:
:ID:       2a36d82d-112f-44a7-b600-40092e8106f0
:END:



*** 5.2 A Register-Machine Simulator
:PROPERTIES:
:ID:       d4121662-1c0d-4e2e-b90c-f8eb4e84130b
:END:
**** 5.2.1  The Machine Model
:PROPERTIES:
:ID:       2a0d1a2d-d8de-4054-8528-4a5006f088ce
:END:
**** 5.2.2  The Assembler
:PROPERTIES:
:ID:       a4d114c9-5c04-4f5e-a088-1aa6781dc6a5
:END:
**** 5.2.3  Generating Execution Procedures for Instructions
:PROPERTIES:
:ID:       89d2287c-e001-4edb-90d2-f2673e63d32f
:END:
**** 5.2.4  Monitoring Machine Performance
:PROPERTIES:
:ID:       f50b56b0-fc6f-4341-b8e2-9648fbacea08
:END:


*** 5.1 Designing Register Machines
:PROPERTIES:
:ID:       5e4cccae-b246-4dfb-b558-4fefa1cd3538
:END:
**** 5.1.1  A Language for Describing Register Machines
:PROPERTIES:
:ID:       0e76db61-7854-4de4-831e-193ae6208643
:END:
**** 5.1.2  Abstraction in Machine Design
:PROPERTIES:
:ID:       bbbfe86d-e634-4b12-ac42-172a07a07d3c
:END:
**** 5.1.3  Subroutines
:PROPERTIES:
:ID:       810aa9c4-2129-483f-9cc5-14d8ceab292b
:END:
**** 5.1.4  Using a Stack to Implement Recursion
:PROPERTIES:
:ID:       3671e05f-7a5c-4772-b6a2-9152c3375911
:END:
**** 5.1.5  Instruction Summary
:PROPERTIES:
:ID:       0678ff2b-16c1-4e2f-8b40-eec1c194cfcb
:END:



** 4 Metalinguistic Abstraction
:PROPERTIES:
:ID:       39b4331c-b3de-489f-aec2-15407406a784
:END:
*** 4.4 Logic Programming
:PROPERTIES:
:ID:       48e52255-8aa3-433a-bf3a-89c1c943e656
:END:
**** 4.4.1  Deductive Information Retrieval
:PROPERTIES:
:ID:       6225f976-f17b-4640-abdc-d9bfe53ed80f
:END:
**** 4.4.2  How the Query System Works
:PROPERTIES:
:ID:       bb8f9cad-ce2d-47d0-a3e4-f41bb9e6a139
:END:
**** 4.4.3  Is Logic Programming Mathematical Logic?
:PROPERTIES:
:ID:       43d75fd9-3c10-469c-b447-55f7f4e517bd
:END:
**** 4.4.4  Implementing the Query System
:PROPERTIES:
:ID:       84c8b08a-5617-4efd-9f8c-0aca90e52b37
:END:


*** 4.3 Variations on a Scheme -- Nondeterministic Computing
:PROPERTIES:
:ID:       8bbfdb07-80d6-4716-8fca-1249185b29de
:END:
**** 4.3.1  Amb and Search
:PROPERTIES:
:ID:       f55beb35-d554-4d05-81c3-ab9070bb4ee4
:END:
**** 4.3.2  Examples of Nondeterministic Programs
:PROPERTIES:
:ID:       6397da86-c961-4e77-8325-6e5d1a923aa6
:END:
**** 4.3.3  Implementing the Amb Evaluator
:PROPERTIES:
:ID:       b4711c50-3e0e-429a-8bd6-d132f51410c6
:END:



*** 4.2 Variations on a Scheme---Lazy Evaluation
:PROPERTIES:
:ID:       e0a9a5ae-71ba-4780-bdab-84450ac607ba
:END:
**** 4.2.1  Normal Order and Applicative Order
:PROPERTIES:
:ID:       3446c5a7-266a-406d-bf89-1311529410c9
:END:
**** 4.2.2  An Interpreter with Lazy Evaluation
:PROPERTIES:
:ID:       b70b1904-119b-4eeb-8d8b-d3d867a0fca1
:END:
**** 4.2.3  Streams as Lazy Lists
:PROPERTIES:
:ID:       8f8ee219-f7fa-4fab-bcb3-db96d09023d7
:END:

*** 4.1 The Metacircular Evaluator
:PROPERTIES:
:ID:       7a444528-a18c-4189-8f8f-ff3c01fff5a9
:END:
**** 4.1.1  The Core of the Evaluator
:PROPERTIES:
:ID:       5b0b922d-f1af-4ea8-a829-f275151edea2
:END:
**** 4.1.2  Representing Expressions
:PROPERTIES:
:ID:       5c7dfca2-28f1-4c14-8739-d556169668b0
:END:
**** 4.1.3  Evaluator Data Structures
:PROPERTIES:
:ID:       c69f36e7-12e1-4f85-8fdb-6e8022be6a71
:END:
**** 4.1.4  Running the Evaluator as a Program
:PROPERTIES:
:ID:       16bc10e6-f84b-43b9-9c89-91c587e11447
:END:
**** 4.1.5  Data as Programs
:PROPERTIES:
:ID:       78a34a5a-94c1-4c3f-8597-44caad4d312f
:END:
**** 4.1.6  Internal Definitions
:PROPERTIES:
:ID:       914673b4-b6b5-4d52-a05c-5e7dce668e11
:END:
**** 4.1.7  Separating Syntactic Analysis from Execution
:PROPERTIES:
:ID:       92ab7c2b-3f3a-4e95-beba-b1658fb552b8
:END:
 

* Basic
:PROPERTIES:
:ID:       bbb1be03-6ae0-4ba9-9448-89d9ab4c1788
:END:
** 3 Modularity,Objects,and State
:PROPERTIES:
:ID:       f45df20e-ba73-469a-9ba8-16eded559b77
:END:
*** 3.5 Streams
:PROPERTIES:
:ID:       e34f0ea5-b75d-47de-87e4-fbb97e7113b5
:END:
**** 3.5.1  Streams Are Delayed Lists
:PROPERTIES:
:ID:       6af7f13e-2a08-47a1-9918-5e5c8dc13c1e
:END:
**** 3.5.2  Infinite Streams
:PROPERTIES:
:ID:       71f10154-7620-48a4-9992-7cac674e3fce
:END:
**** 3.5.3  Exploiting the Stream Paradigm
:PROPERTIES:
:ID:       c052fa21-0faa-4697-92f1-b8a3a6a59cd9
:END:
**** 3.5.4  Streams and Delayed Evaluation
:PROPERTIES:
:ID:       1b129037-10b6-41d4-b197-74e405e39b90
:END:
**** 3.5.5  Modularity of Functional Programs and Modularity of Objects
:PROPERTIES:
:ID:       8b294673-1466-4793-9336-3949e67cedcd
:END:


*** 3.4 Concurrency:Time Is of the Essence
:PROPERTIES:
:ID:       45bdd041-de94-4f50-8699-1a0c2eebc0de
:END:
**** 3.4.1  The Nature of Time in Concurrent Systems
:PROPERTIES:
:ID:       660b4d21-d0c3-4364-8ac7-29101e654a7d
:END:
**** 3.4.2  Mechanisms for Controlling Concurrency
:PROPERTIES:
:ID:       0517b4fb-8b71-43aa-95b1-1c4c5b984fae
:END:


*** 3.3 Modeling with Mutable Data
:PROPERTIES:
:ID:       a1f3d53a-7141-40d4-bc1a-80a0febe7aa2
:END:
**** 3.3.1  Mutable List Structure
:PROPERTIES:
:ID:       78a97156-b782-47cf-b801-1a5f78afd995
:END:
**** 3.3.2  Representing Queues
:PROPERTIES:
:ID:       f90033ad-344a-44a4-9eae-779ecee679f4
:END:
**** 3.3.3  Representing Tables
:PROPERTIES:
:ID:       367a01e0-bd94-4295-b58a-268a41c7f007
:END:
**** 3.3.4  A Simulator for Digital Circuits
:PROPERTIES:
:ID:       344446ec-18c9-45d0-8ac5-3c08f48db94d
:END:
**** 3.3.5  Propagation of Constraints
:PROPERTIES:
:ID:       5599cdd1-e489-4734-a787-265ada9522a0
:END:


*** 3.2 The Environment Model of Evaluation
:PROPERTIES:
:ID:       15ba7597-89e7-4589-903b-5372e1346305
:END:
**** 3.2.1  The Rules for Evaluation
:PROPERTIES:
:ID:       e5ce0628-518a-4fe1-9a34-cfa45f851cd0
:END:
**** 3.2.2  Applying Simple Procedures
:PROPERTIES:
:ID:       0e851871-00de-434c-97c9-43a3aa63a327
:END:
**** 3.2.3  Frames as the Repository of Local State
:PROPERTIES:
:ID:       0f347208-1a76-4f04-8598-cec6f519eca9
:END:
**** 3.2.4  Internal Definitions
:PROPERTIES:
:ID:       4aadfbcb-cd28-489a-9153-7c884e9c016d
:END:


*** 3.1 Assignment and Local State
:PROPERTIES:
:ID:       34f31574-407f-4cc4-aa62-9a1799317c31
:END:
**** 3.1.1  Local State Variables
:PROPERTIES:
:ID:       eed5a482-7932-45b4-95b6-dac38731171c
:END:
**** 3.1.2  The Benefits of Introducing Assignment
:PROPERTIES:
:ID:       2335e717-3482-4a1f-8d25-152b0bcfe67e
:END:
**** 3.1.3  The Costs of Introducing Assignment
:PROPERTIES:
:ID:       4d65c4b5-f1be-4f3c-a1ac-47875b032d89
:END:


** 2 Building Abstractions with Data
:PROPERTIES:
:ID:       3b16776b-e53e-4f62-bfb2-c41eea5e0281
:END:
*** 2.5 Systems with Generic Operations
:PROPERTIES:
:ID:       3b1300aa-e880-414d-acfe-7d3ba28c7b90
:END:
**** 2.5.1  Generic Arithmetic Operations
:PROPERTIES:
:ID:       477f0e32-a949-4496-ac14-340e22ddc3d1
:END:
**** 2.5.2  Combining Data of Different Types
:PROPERTIES:
:ID:       e6857034-062d-49f9-a860-9cfa126e8b4a
:END:
**** 2.5.3  Example: Symbolic Algebra
:PROPERTIES:
:ID:       c8444e09-1631-4a1f-a0df-2162b50f499d
:END:



*** 2.4 Multiple Representations for Abstract data
:PROPERTIES:
:ID:       97c3a711-d11b-4840-acd2-1f97495f3b38
:END:
**** 2.4.1  Representations for Complex Numbers
:PROPERTIES:
:ID:       161724a4-6607-4734-a46a-2804301d7138
:END:
**** 2.4.2  Tagged data
:PROPERTIES:
:ID:       d2a5ddc2-170a-4735-9a7a-5f97a847761f
:END:
**** 2.4.3  Data-Directed Programming and Additivity
:PROPERTIES:
:ID:       7fcee2b1-a0bf-47c3-b405-85b93861c2c1
:END:


*** 2.3 Symbolic Data
:PROPERTIES:
:ID:       cec1aea8-fbaf-44b9-baa1-cd6930f3e8e9
:END:
**** 2.3.1  Quotation
:PROPERTIES:
:ID:       efa30a0d-46a0-4b9b-abd2-996c7cc28428
:END:
**** 2.3.2  Example: Symbolic Differentiation
:PROPERTIES:
:ID:       94f0fe56-c78f-4280-91a9-64a920fa69e4
:END:
**** 2.3.3  Example: Representing Sets
:PROPERTIES:
:ID:       ad493232-d256-4488-a215-32e1aef81619
:END:
**** 2.3.4  Example: Huffman Encoding Trees
:PROPERTIES:
:ID:       901f9c09-5f4f-4106-bdd9-d0ea1a4ff9dd
:END:

*** 2.2 Hierachical data and the Closure Property
:PROPERTIES:
:ID:       9e2278fe-7291-4794-9e86-6c3ea5ee1dc3
:END:

**** 2.2.1  Representing Sequences
:PROPERTIES:
:ID:       dfc44634-2a06-456b-97e7-377ef9f41c8f
:END:
**** 2.2.2  Hierarchical Structures
:PROPERTIES:
:ID:       2d9025f2-e0b3-4803-bea1-e09fe0f77da4
:END:
**** 2.2.3  Sequences as Conventional Interfaces
:PROPERTIES:
:ID:       a128f6aa-332d-442e-83f3-68e1ae357d43
:END:
**** 2.2.4  Example: A Picture Language
:PROPERTIES:
:ID:       ff873936-7de1-4db2-9f58-f0b2b8b438d6
:END:


*** 2.1 Introduction to Data Abstraction
:PROPERTIES:
:ID:       b80ebc70-398d-43ad-a38c-aac7b3e3b2ba
:END:

****  2.1.1  Example: Arithmetic Operations for Rational Numbers
:PROPERTIES:
:ID:       7ca74747-35d3-43a6-840d-84a6024b923a
:END:
****  2.1.2  Abstraction Barriers
:PROPERTIES:
:ID:       ba3cd7dd-1c5e-474e-9933-0a684678318d
:END:
****  2.1.3  What Is Meant by Data?
:PROPERTIES:
:ID:       b441a3d6-bb36-4f83-bfde-88c8ea5ce84f
:END:
****  2.1.4  Extended Exercise: Interval Arithmetic
:PROPERTIES:
:ID:       4bbdcfd3-0be3-429b-8ea4-fe3be8f27b9f
:END:
** 1 Building Abstraction with Procedures
:PROPERTIES:
:ID:       a0ca1bb5-cc16-4a31-b4fe-aefc89b4d536
:END:
*** 1.3 Formulating Abstractions with Higher-Order Procedures
:PROPERTIES:
:ID:       0b6e913d-1815-4e51-8826-7dd90e411f01
:END:
**** 1.3.2 Constructing Procedures Using Lambda
:PROPERTIES:
:ID:       ad97756a-d9f1-4272-b953-7d517feb4234
:END:


#+BEGIN_SRC scheme
  (define (sum term a next b)
      (if (> a b)
          0
          (+ (term a)
              (sum term (next a) next b))))

; racket状态下 初始文件有效
;    (define (inc n) (+ n 1))

;    (define (cube x) (* x x x))

    (define (sum-cubes a b)
      (sum cube a inc b))

    (sum-cubes 1 10)
#+END_SRC

#+RESULTS:
: 3025


***** test2


geiser-racket-init-file

#+NAME: Integral
#+BEGIN_SRC scheme 
      (define (sum term a next b)
        (if (> a b)
            0
            (+ (term a)
               (sum term (next a) next b))))

      (define (pi-sum a b)
        (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
             a
             (lambda (x) (+ x 4))
             b))



      (define (integral f a b dx)
        (* (sum f
                (+ a (/ dx 2.0))
                (lambda (x) (+ x dx))
                b)
           dx))

    (define (square x) (* x x))


  ;  ((lambda (x y z) (+ x y (square z))) 1 2 3)

      (define (f x y)
        (define a (+ 1 (* x y)))
        (define b (- 1 y))
        (+ (* x (square a))
           (* y b)
           (* a b)))

      (f 5 6)

#+END_SRC

#+RESULTS: Integral
: 4620


***** factorial test

#+NAME: factorial
#+BEGIN_SRC scheme
  (factorial 4)
#+END_SRC

#+RESULTS: factorial
: 24


